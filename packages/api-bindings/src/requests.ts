/* Autogenerated by generate-requests.ts for proto v0.1.0
 * Do not edit directly! Instead run 'npm run generate-requests' in typescript-api-bindings
 */

import {
  AggregateSessionMetricActionRequest,
  AppendToFileRequest,
  ApplicationUpdateStatusRequest,
  ApplicationUpdateStatusResponse,
  AuthBuilderIdPollCreateTokenRequest,
  AuthBuilderIdPollCreateTokenResponse,
  AuthBuilderIdStartDeviceAuthorizationRequest,
  AuthBuilderIdStartDeviceAuthorizationResponse,
  AuthCancelPkceAuthorizationRequest,
  AuthCancelPkceAuthorizationResponse,
  AuthFinishPkceAuthorizationRequest,
  AuthFinishPkceAuthorizationResponse,
  AuthStartPkceAuthorizationRequest,
  AuthStartPkceAuthorizationResponse,
  AuthStatusRequest,
  AuthStatusResponse,
  CheckForUpdatesRequest,
  CheckForUpdatesResponse,
  CodewhispererListCustomizationRequest,
  CodewhispererListCustomizationResponse,
  ContentsOfDirectoryRequest,
  ContentsOfDirectoryResponse,
  CreateDirectoryRequest,
  DebuggerUpdateRequest,
  DestinationOfSymbolicLinkRequest,
  DestinationOfSymbolicLinkResponse,
  DragWindowRequest,
  GetConfigPropertyRequest,
  GetConfigPropertyResponse,
  GetDefaultsPropertyRequest,
  GetDefaultsPropertyResponse,
  GetLocalStateRequest,
  GetLocalStateResponse,
  GetPlatformInfoRequest,
  GetPlatformInfoResponse,
  GetSettingsPropertyRequest,
  GetSettingsPropertyResponse,
  HistoryQueryRequest,
  HistoryQueryResponse,
  InsertTextRequest,
  InstallRequest,
  InstallResponse,
  MacosInputMethodRequest,
  MacosInputMethodResponse,
  OnboardingRequest,
  OpenInExternalApplicationRequest,
  PingRequest,
  PingResponse,
  PositionWindowRequest,
  PositionWindowResponse,
  PseudoterminalExecuteRequest,
  PseudoterminalExecuteResponse,
  PseudoterminalRestartRequest,
  PseudoterminalWriteRequest,
  ReadFileRequest,
  ReadFileResponse,
  RunProcessRequest,
  RunProcessResponse,
  TelemetryIdentifyRequest,
  TelemetryPageRequest,
  TelemetryTrackRequest,
  TerminalSessionInfoRequest,
  TerminalSessionInfoResponse,
  UpdateApplicationPropertiesRequest,
  UpdateApplicationRequest,
  UpdateConfigPropertyRequest,
  UpdateDefaultsPropertyRequest,
  UpdateLocalStateRequest,
  UpdateSettingsPropertyRequest,
  UserLogoutRequest,
  WindowFocusRequest,
  WriteFileRequest,
} from "@aws/amazon-q-developer-cli-proto/fig";
import { sendMessage } from "./core.js";

export async function sendPositionWindowRequest(
  request: PositionWindowRequest,
): Promise<PositionWindowResponse> {
  return new Promise((resolve, reject) => {
    sendMessage(
      { $case: "positionWindowRequest", positionWindowRequest: request },
      (response) => {
        switch (response?.$case) {
          case "positionWindowResponse":
            resolve(response.positionWindowResponse);
            break;
          case "error":
            reject(Error(response.error));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.$case}' for 'PositionWindowRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendPseudoterminalExecuteRequest(
  request: PseudoterminalExecuteRequest,
): Promise<PseudoterminalExecuteResponse> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        $case: "pseudoterminalExecuteRequest",
        pseudoterminalExecuteRequest: request,
      },
      (response) => {
        switch (response?.$case) {
          case "pseudoterminalExecuteResponse":
            resolve(response.pseudoterminalExecuteResponse);
            break;
          case "error":
            reject(Error(response.error));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.$case}' for 'PseudoterminalExecuteRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendReadFileRequest(
  request: ReadFileRequest,
): Promise<ReadFileResponse> {
  return new Promise((resolve, reject) => {
    sendMessage(
      { $case: "readFileRequest", readFileRequest: request },
      (response) => {
        switch (response?.$case) {
          case "readFileResponse":
            resolve(response.readFileResponse);
            break;
          case "error":
            reject(Error(response.error));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.$case}' for 'ReadFileRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendContentsOfDirectoryRequest(
  request: ContentsOfDirectoryRequest,
): Promise<ContentsOfDirectoryResponse> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        $case: "contentsOfDirectoryRequest",
        contentsOfDirectoryRequest: request,
      },
      (response) => {
        switch (response?.$case) {
          case "contentsOfDirectoryResponse":
            resolve(response.contentsOfDirectoryResponse);
            break;
          case "error":
            reject(Error(response.error));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.$case}' for 'ContentsOfDirectoryRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendGetSettingsPropertyRequest(
  request: GetSettingsPropertyRequest,
): Promise<GetSettingsPropertyResponse> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        $case: "getSettingsPropertyRequest",
        getSettingsPropertyRequest: request,
      },
      (response) => {
        switch (response?.$case) {
          case "getSettingsPropertyResponse":
            resolve(response.getSettingsPropertyResponse);
            break;
          case "error":
            reject(Error(response.error));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.$case}' for 'GetSettingsPropertyRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendDestinationOfSymbolicLinkRequest(
  request: DestinationOfSymbolicLinkRequest,
): Promise<DestinationOfSymbolicLinkResponse> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        $case: "destinationOfSymbolicLinkRequest",
        destinationOfSymbolicLinkRequest: request,
      },
      (response) => {
        switch (response?.$case) {
          case "destinationOfSymbolicLinkResponse":
            resolve(response.destinationOfSymbolicLinkResponse);
            break;
          case "error":
            reject(Error(response.error));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.$case}' for 'DestinationOfSymbolicLinkRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendGetDefaultsPropertyRequest(
  request: GetDefaultsPropertyRequest,
): Promise<GetDefaultsPropertyResponse> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        $case: "getDefaultsPropertyRequest",
        getDefaultsPropertyRequest: request,
      },
      (response) => {
        switch (response?.$case) {
          case "getDefaultsPropertyResponse":
            resolve(response.getDefaultsPropertyResponse);
            break;
          case "error":
            reject(Error(response.error));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.$case}' for 'GetDefaultsPropertyRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendGetConfigPropertyRequest(
  request: GetConfigPropertyRequest,
): Promise<GetConfigPropertyResponse> {
  return new Promise((resolve, reject) => {
    sendMessage(
      { $case: "getConfigPropertyRequest", getConfigPropertyRequest: request },
      (response) => {
        switch (response?.$case) {
          case "getConfigPropertyResponse":
            resolve(response.getConfigPropertyResponse);
            break;
          case "error":
            reject(Error(response.error));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.$case}' for 'GetConfigPropertyRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendTerminalSessionInfoRequest(
  request: TerminalSessionInfoRequest,
): Promise<TerminalSessionInfoResponse> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        $case: "terminalSessionInfoRequest",
        terminalSessionInfoRequest: request,
      },
      (response) => {
        switch (response?.$case) {
          case "terminalSessionInfoResponse":
            resolve(response.terminalSessionInfoResponse);
            break;
          case "error":
            reject(Error(response.error));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.$case}' for 'TerminalSessionInfoRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendApplicationUpdateStatusRequest(
  request: ApplicationUpdateStatusRequest,
): Promise<ApplicationUpdateStatusResponse> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        $case: "applicationUpdateStatusRequest",
        applicationUpdateStatusRequest: request,
      },
      (response) => {
        switch (response?.$case) {
          case "applicationUpdateStatusResponse":
            resolve(response.applicationUpdateStatusResponse);
            break;
          case "error":
            reject(Error(response.error));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.$case}' for 'ApplicationUpdateStatusRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendGetLocalStateRequest(
  request: GetLocalStateRequest,
): Promise<GetLocalStateResponse> {
  return new Promise((resolve, reject) => {
    sendMessage(
      { $case: "getLocalStateRequest", getLocalStateRequest: request },
      (response) => {
        switch (response?.$case) {
          case "getLocalStateResponse":
            resolve(response.getLocalStateResponse);
            break;
          case "error":
            reject(Error(response.error));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.$case}' for 'GetLocalStateRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendRunProcessRequest(
  request: RunProcessRequest,
): Promise<RunProcessResponse> {
  return new Promise((resolve, reject) => {
    sendMessage(
      { $case: "runProcessRequest", runProcessRequest: request },
      (response) => {
        switch (response?.$case) {
          case "runProcessResponse":
            resolve(response.runProcessResponse);
            break;
          case "error":
            reject(Error(response.error));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.$case}' for 'RunProcessRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendMacosInputMethodRequest(
  request: MacosInputMethodRequest,
): Promise<MacosInputMethodResponse> {
  return new Promise((resolve, reject) => {
    sendMessage(
      { $case: "macosInputMethodRequest", macosInputMethodRequest: request },
      (response) => {
        switch (response?.$case) {
          case "macosInputMethodResponse":
            resolve(response.macosInputMethodResponse);
            break;
          case "error":
            reject(Error(response.error));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.$case}' for 'MacosInputMethodRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendInstallRequest(
  request: InstallRequest,
): Promise<InstallResponse> {
  return new Promise((resolve, reject) => {
    sendMessage(
      { $case: "installRequest", installRequest: request },
      (response) => {
        switch (response?.$case) {
          case "installResponse":
            resolve(response.installResponse);
            break;
          case "error":
            reject(Error(response.error));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.$case}' for 'InstallRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendCheckForUpdatesRequest(
  request: CheckForUpdatesRequest,
): Promise<CheckForUpdatesResponse> {
  return new Promise((resolve, reject) => {
    sendMessage(
      { $case: "checkForUpdatesRequest", checkForUpdatesRequest: request },
      (response) => {
        switch (response?.$case) {
          case "checkForUpdatesResponse":
            resolve(response.checkForUpdatesResponse);
            break;
          case "error":
            reject(Error(response.error));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.$case}' for 'CheckForUpdatesRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendHistoryQueryRequest(
  request: HistoryQueryRequest,
): Promise<HistoryQueryResponse> {
  return new Promise((resolve, reject) => {
    sendMessage(
      { $case: "historyQueryRequest", historyQueryRequest: request },
      (response) => {
        switch (response?.$case) {
          case "historyQueryResponse":
            resolve(response.historyQueryResponse);
            break;
          case "error":
            reject(Error(response.error));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.$case}' for 'HistoryQueryRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendAuthStatusRequest(
  request: AuthStatusRequest,
): Promise<AuthStatusResponse> {
  return new Promise((resolve, reject) => {
    sendMessage(
      { $case: "authStatusRequest", authStatusRequest: request },
      (response) => {
        switch (response?.$case) {
          case "authStatusResponse":
            resolve(response.authStatusResponse);
            break;
          case "error":
            reject(Error(response.error));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.$case}' for 'AuthStatusRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendAuthBuilderIdStartDeviceAuthorizationRequest(
  request: AuthBuilderIdStartDeviceAuthorizationRequest,
): Promise<AuthBuilderIdStartDeviceAuthorizationResponse> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        $case: "authBuilderIdStartDeviceAuthorizationRequest",
        authBuilderIdStartDeviceAuthorizationRequest: request,
      },
      (response) => {
        switch (response?.$case) {
          case "authBuilderIdStartDeviceAuthorizationResponse":
            resolve(response.authBuilderIdStartDeviceAuthorizationResponse);
            break;
          case "error":
            reject(Error(response.error));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.$case}' for 'AuthBuilderIdStartDeviceAuthorizationRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendAuthBuilderIdPollCreateTokenRequest(
  request: AuthBuilderIdPollCreateTokenRequest,
): Promise<AuthBuilderIdPollCreateTokenResponse> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        $case: "authBuilderIdPollCreateTokenRequest",
        authBuilderIdPollCreateTokenRequest: request,
      },
      (response) => {
        switch (response?.$case) {
          case "authBuilderIdPollCreateTokenResponse":
            resolve(response.authBuilderIdPollCreateTokenResponse);
            break;
          case "error":
            reject(Error(response.error));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.$case}' for 'AuthBuilderIdPollCreateTokenRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendPingRequest(
  request: PingRequest,
): Promise<PingResponse> {
  return new Promise((resolve, reject) => {
    sendMessage({ $case: "pingRequest", pingRequest: request }, (response) => {
      switch (response?.$case) {
        case "pingResponse":
          resolve(response.pingResponse);
          break;
        case "error":
          reject(Error(response.error));
          break;
        default:
          reject(
            Error(`Invalid response '${response?.$case}' for 'PingRequest'`),
          );
      }
    });
  });
}

export async function sendCodewhispererListCustomizationRequest(
  request: CodewhispererListCustomizationRequest,
): Promise<CodewhispererListCustomizationResponse> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        $case: "codewhispererListCustomizationRequest",
        codewhispererListCustomizationRequest: request,
      },
      (response) => {
        switch (response?.$case) {
          case "codewhispererListCustomizationResponse":
            resolve(response.codewhispererListCustomizationResponse);
            break;
          case "error":
            reject(Error(response.error));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.$case}' for 'CodewhispererListCustomizationRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendAuthStartPkceAuthorizationRequest(
  request: AuthStartPkceAuthorizationRequest,
): Promise<AuthStartPkceAuthorizationResponse> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        $case: "authStartPkceAuthorizationRequest",
        authStartPkceAuthorizationRequest: request,
      },
      (response) => {
        switch (response?.$case) {
          case "authStartPkceAuthorizationResponse":
            resolve(response.authStartPkceAuthorizationResponse);
            break;
          case "error":
            reject(Error(response.error));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.$case}' for 'AuthStartPkceAuthorizationRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendAuthFinishPkceAuthorizationRequest(
  request: AuthFinishPkceAuthorizationRequest,
): Promise<AuthFinishPkceAuthorizationResponse> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        $case: "authFinishPkceAuthorizationRequest",
        authFinishPkceAuthorizationRequest: request,
      },
      (response) => {
        switch (response?.$case) {
          case "authFinishPkceAuthorizationResponse":
            resolve(response.authFinishPkceAuthorizationResponse);
            break;
          case "error":
            reject(Error(response.error));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.$case}' for 'AuthFinishPkceAuthorizationRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendAuthCancelPkceAuthorizationRequest(
  request: AuthCancelPkceAuthorizationRequest,
): Promise<AuthCancelPkceAuthorizationResponse> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        $case: "authCancelPkceAuthorizationRequest",
        authCancelPkceAuthorizationRequest: request,
      },
      (response) => {
        switch (response?.$case) {
          case "authCancelPkceAuthorizationResponse":
            resolve(response.authCancelPkceAuthorizationResponse);
            break;
          case "error":
            reject(Error(response.error));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.$case}' for 'AuthCancelPkceAuthorizationRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendGetPlatformInfoRequest(
  request: GetPlatformInfoRequest,
): Promise<GetPlatformInfoResponse> {
  return new Promise((resolve, reject) => {
    sendMessage(
      { $case: "getPlatformInfoRequest", getPlatformInfoRequest: request },
      (response) => {
        switch (response?.$case) {
          case "getPlatformInfoResponse":
            resolve(response.getPlatformInfoResponse);
            break;
          case "error":
            reject(Error(response.error));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.$case}' for 'GetPlatformInfoRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendPseudoterminalWriteRequest(
  request: PseudoterminalWriteRequest,
): Promise<void> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        $case: "pseudoterminalWriteRequest",
        pseudoterminalWriteRequest: request,
      },
      (response) => {
        switch (response?.$case) {
          case "success":
            resolve();
            break;
          case "error":
            reject(Error(response.error));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.$case}' for 'PseudoterminalWriteRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendWriteFileRequest(
  request: WriteFileRequest,
): Promise<void> {
  return new Promise((resolve, reject) => {
    sendMessage(
      { $case: "writeFileRequest", writeFileRequest: request },
      (response) => {
        switch (response?.$case) {
          case "success":
            resolve();
            break;
          case "error":
            reject(Error(response.error));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.$case}' for 'WriteFileRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendUpdateSettingsPropertyRequest(
  request: UpdateSettingsPropertyRequest,
): Promise<void> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        $case: "updateSettingsPropertyRequest",
        updateSettingsPropertyRequest: request,
      },
      (response) => {
        switch (response?.$case) {
          case "success":
            resolve();
            break;
          case "error":
            reject(Error(response.error));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.$case}' for 'UpdateSettingsPropertyRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendInsertTextRequest(
  request: InsertTextRequest,
): Promise<void> {
  return new Promise((resolve, reject) => {
    sendMessage(
      { $case: "insertTextRequest", insertTextRequest: request },
      (response) => {
        switch (response?.$case) {
          case "success":
            resolve();
            break;
          case "error":
            reject(Error(response.error));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.$case}' for 'InsertTextRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendUpdateApplicationPropertiesRequest(
  request: UpdateApplicationPropertiesRequest,
): Promise<void> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        $case: "updateApplicationPropertiesRequest",
        updateApplicationPropertiesRequest: request,
      },
      (response) => {
        switch (response?.$case) {
          case "success":
            resolve();
            break;
          case "error":
            reject(Error(response.error));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.$case}' for 'UpdateApplicationPropertiesRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendUpdateDefaultsPropertyRequest(
  request: UpdateDefaultsPropertyRequest,
): Promise<void> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        $case: "updateDefaultsPropertyRequest",
        updateDefaultsPropertyRequest: request,
      },
      (response) => {
        switch (response?.$case) {
          case "success":
            resolve();
            break;
          case "error":
            reject(Error(response.error));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.$case}' for 'UpdateDefaultsPropertyRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendTelemetryIdentifyRequest(
  request: TelemetryIdentifyRequest,
): Promise<void> {
  return new Promise((resolve, reject) => {
    sendMessage(
      { $case: "telemetryIdentifyRequest", telemetryIdentifyRequest: request },
      (response) => {
        switch (response?.$case) {
          case "success":
            resolve();
            break;
          case "error":
            reject(Error(response.error));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.$case}' for 'TelemetryIdentifyRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendTelemetryTrackRequest(
  request: TelemetryTrackRequest,
): Promise<void> {
  return new Promise((resolve, reject) => {
    sendMessage(
      { $case: "telemetryTrackRequest", telemetryTrackRequest: request },
      (response) => {
        switch (response?.$case) {
          case "success":
            resolve();
            break;
          case "error":
            reject(Error(response.error));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.$case}' for 'TelemetryTrackRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendOnboardingRequest(
  request: OnboardingRequest,
): Promise<void> {
  return new Promise((resolve, reject) => {
    sendMessage(
      { $case: "onboardingRequest", onboardingRequest: request },
      (response) => {
        switch (response?.$case) {
          case "success":
            resolve();
            break;
          case "error":
            reject(Error(response.error));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.$case}' for 'OnboardingRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendWindowFocusRequest(
  request: WindowFocusRequest,
): Promise<void> {
  return new Promise((resolve, reject) => {
    sendMessage(
      { $case: "windowFocusRequest", windowFocusRequest: request },
      (response) => {
        switch (response?.$case) {
          case "success":
            resolve();
            break;
          case "error":
            reject(Error(response.error));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.$case}' for 'WindowFocusRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendOpenInExternalApplicationRequest(
  request: OpenInExternalApplicationRequest,
): Promise<void> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        $case: "openInExternalApplicationRequest",
        openInExternalApplicationRequest: request,
      },
      (response) => {
        switch (response?.$case) {
          case "success":
            resolve();
            break;
          case "error":
            reject(Error(response.error));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.$case}' for 'OpenInExternalApplicationRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendUpdateConfigPropertyRequest(
  request: UpdateConfigPropertyRequest,
): Promise<void> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        $case: "updateConfigPropertyRequest",
        updateConfigPropertyRequest: request,
      },
      (response) => {
        switch (response?.$case) {
          case "success":
            resolve();
            break;
          case "error":
            reject(Error(response.error));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.$case}' for 'UpdateConfigPropertyRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendPseudoterminalRestartRequest(
  request: PseudoterminalRestartRequest,
): Promise<void> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        $case: "pseudoterminalRestartRequest",
        pseudoterminalRestartRequest: request,
      },
      (response) => {
        switch (response?.$case) {
          case "success":
            resolve();
            break;
          case "error":
            reject(Error(response.error));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.$case}' for 'PseudoterminalRestartRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendDebuggerUpdateRequest(
  request: DebuggerUpdateRequest,
): Promise<void> {
  return new Promise((resolve, reject) => {
    sendMessage(
      { $case: "debuggerUpdateRequest", debuggerUpdateRequest: request },
      (response) => {
        switch (response?.$case) {
          case "success":
            resolve();
            break;
          case "error":
            reject(Error(response.error));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.$case}' for 'DebuggerUpdateRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendAppendToFileRequest(
  request: AppendToFileRequest,
): Promise<void> {
  return new Promise((resolve, reject) => {
    sendMessage(
      { $case: "appendToFileRequest", appendToFileRequest: request },
      (response) => {
        switch (response?.$case) {
          case "success":
            resolve();
            break;
          case "error":
            reject(Error(response.error));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.$case}' for 'AppendToFileRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendUpdateLocalStateRequest(
  request: UpdateLocalStateRequest,
): Promise<void> {
  return new Promise((resolve, reject) => {
    sendMessage(
      { $case: "updateLocalStateRequest", updateLocalStateRequest: request },
      (response) => {
        switch (response?.$case) {
          case "success":
            resolve();
            break;
          case "error":
            reject(Error(response.error));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.$case}' for 'UpdateLocalStateRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendCreateDirectoryRequest(
  request: CreateDirectoryRequest,
): Promise<void> {
  return new Promise((resolve, reject) => {
    sendMessage(
      { $case: "createDirectoryRequest", createDirectoryRequest: request },
      (response) => {
        switch (response?.$case) {
          case "success":
            resolve();
            break;
          case "error":
            reject(Error(response.error));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.$case}' for 'CreateDirectoryRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendTelemetryPageRequest(
  request: TelemetryPageRequest,
): Promise<void> {
  return new Promise((resolve, reject) => {
    sendMessage(
      { $case: "telemetryPageRequest", telemetryPageRequest: request },
      (response) => {
        switch (response?.$case) {
          case "success":
            resolve();
            break;
          case "error":
            reject(Error(response.error));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.$case}' for 'TelemetryPageRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendAggregateSessionMetricActionRequest(
  request: AggregateSessionMetricActionRequest,
): Promise<void> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        $case: "aggregateSessionMetricActionRequest",
        aggregateSessionMetricActionRequest: request,
      },
      (response) => {
        switch (response?.$case) {
          case "success":
            resolve();
            break;
          case "error":
            reject(Error(response.error));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.$case}' for 'AggregateSessionMetricActionRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendUserLogoutRequest(
  request: UserLogoutRequest,
): Promise<void> {
  return new Promise((resolve, reject) => {
    sendMessage(
      { $case: "userLogoutRequest", userLogoutRequest: request },
      (response) => {
        switch (response?.$case) {
          case "success":
            resolve();
            break;
          case "error":
            reject(Error(response.error));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.$case}' for 'UserLogoutRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendUpdateApplicationRequest(
  request: UpdateApplicationRequest,
): Promise<void> {
  return new Promise((resolve, reject) => {
    sendMessage(
      { $case: "updateApplicationRequest", updateApplicationRequest: request },
      (response) => {
        switch (response?.$case) {
          case "success":
            resolve();
            break;
          case "error":
            reject(Error(response.error));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.$case}' for 'UpdateApplicationRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendDragWindowRequest(
  request: DragWindowRequest,
): Promise<void> {
  return new Promise((resolve, reject) => {
    sendMessage(
      { $case: "dragWindowRequest", dragWindowRequest: request },
      (response) => {
        switch (response?.$case) {
          case "success":
            resolve();
            break;
          case "error":
            reject(Error(response.error));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.$case}' for 'DragWindowRequest'`,
              ),
            );
        }
      },
    );
  });
}
