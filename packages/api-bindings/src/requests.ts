/* Autogenerated by generate-requests.ts for proto v0.2.0
 * Do not edit directly! Instead run 'npm run generate-requests' in typescript-api-bindings
 */

import {
  AggregateSessionMetricActionRequest,
  AggregateSessionMetricActionRequestSchema,
  AppendToFileRequest,
  AppendToFileRequestSchema,
  AuthBuilderIdPollCreateTokenRequest,
  AuthBuilderIdPollCreateTokenRequestSchema,
  AuthBuilderIdPollCreateTokenResponse,
  AuthBuilderIdStartDeviceAuthorizationRequest,
  AuthBuilderIdStartDeviceAuthorizationRequestSchema,
  AuthBuilderIdStartDeviceAuthorizationResponse,
  AuthCancelPkceAuthorizationRequest,
  AuthCancelPkceAuthorizationRequestSchema,
  AuthCancelPkceAuthorizationResponse,
  AuthFinishPkceAuthorizationRequest,
  AuthFinishPkceAuthorizationRequestSchema,
  AuthFinishPkceAuthorizationResponse,
  AuthStartPkceAuthorizationRequest,
  AuthStartPkceAuthorizationRequestSchema,
  AuthStartPkceAuthorizationResponse,
  AuthStatusRequest,
  AuthStatusRequestSchema,
  AuthStatusResponse,
  CheckForUpdatesRequest,
  CheckForUpdatesRequestSchema,
  CheckForUpdatesResponse,
  CodewhispererListCustomizationRequest,
  CodewhispererListCustomizationRequestSchema,
  CodewhispererListCustomizationResponse,
  ContentsOfDirectoryRequest,
  ContentsOfDirectoryRequestSchema,
  ContentsOfDirectoryResponse,
  CreateDirectoryRequest,
  CreateDirectoryRequestSchema,
  DestinationOfSymbolicLinkRequest,
  DestinationOfSymbolicLinkRequestSchema,
  DestinationOfSymbolicLinkResponse,
  DragWindowRequest,
  DragWindowRequestSchema,
  GetLocalStateRequest,
  GetLocalStateRequestSchema,
  GetLocalStateResponse,
  GetPlatformInfoRequest,
  GetPlatformInfoRequestSchema,
  GetPlatformInfoResponse,
  GetSettingsPropertyRequest,
  GetSettingsPropertyRequestSchema,
  GetSettingsPropertyResponse,
  HistoryQueryRequest,
  HistoryQueryRequestSchema,
  HistoryQueryResponse,
  InsertTextRequest,
  InsertTextRequestSchema,
  InstallRequest,
  InstallRequestSchema,
  InstallResponse,
  NotificationRequest,
  NotificationRequestSchema,
  OnboardingRequest,
  OnboardingRequestSchema,
  OpenInExternalApplicationRequest,
  OpenInExternalApplicationRequestSchema,
  PingRequest,
  PingRequestSchema,
  PingResponse,
  PositionWindowRequest,
  PositionWindowRequestSchema,
  PositionWindowResponse,
  ReadFileRequest,
  ReadFileRequestSchema,
  ReadFileResponse,
  RunProcessRequest,
  RunProcessRequestSchema,
  RunProcessResponse,
  TelemetryPageRequest,
  TelemetryPageRequestSchema,
  TelemetryTrackRequest,
  TelemetryTrackRequestSchema,
  UpdateApplicationPropertiesRequest,
  UpdateApplicationPropertiesRequestSchema,
  UpdateApplicationRequest,
  UpdateApplicationRequestSchema,
  UpdateLocalStateRequest,
  UpdateLocalStateRequestSchema,
  UpdateSettingsPropertyRequest,
  UpdateSettingsPropertyRequestSchema,
  UserLogoutRequest,
  UserLogoutRequestSchema,
  WindowFocusRequest,
  WindowFocusRequestSchema,
  WriteFileRequest,
  WriteFileRequestSchema,
} from "@aws/amazon-q-developer-cli-proto/fig";
import { sendMessage } from "./core.js";
import { create } from "@bufbuild/protobuf";

export async function sendPositionWindowRequest(
  request: Omit<PositionWindowRequest, "$typeName" | "$unknown">,
): Promise<PositionWindowResponse> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        case: "positionWindowRequest",
        value: create(PositionWindowRequestSchema, request),
      },
      (response) => {
        switch (response?.case) {
          case "positionWindowResponse":
            resolve(response.value);
            break;
          case "error":
            reject(Error(response.value));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.case}' for 'PositionWindowRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendReadFileRequest(
  request: Omit<ReadFileRequest, "$typeName" | "$unknown">,
): Promise<ReadFileResponse> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        case: "readFileRequest",
        value: create(ReadFileRequestSchema, request),
      },
      (response) => {
        switch (response?.case) {
          case "readFileResponse":
            resolve(response.value);
            break;
          case "error":
            reject(Error(response.value));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.case}' for 'ReadFileRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendContentsOfDirectoryRequest(
  request: Omit<ContentsOfDirectoryRequest, "$typeName" | "$unknown">,
): Promise<ContentsOfDirectoryResponse> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        case: "contentsOfDirectoryRequest",
        value: create(ContentsOfDirectoryRequestSchema, request),
      },
      (response) => {
        switch (response?.case) {
          case "contentsOfDirectoryResponse":
            resolve(response.value);
            break;
          case "error":
            reject(Error(response.value));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.case}' for 'ContentsOfDirectoryRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendGetSettingsPropertyRequest(
  request: Omit<GetSettingsPropertyRequest, "$typeName" | "$unknown">,
): Promise<GetSettingsPropertyResponse> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        case: "getSettingsPropertyRequest",
        value: create(GetSettingsPropertyRequestSchema, request),
      },
      (response) => {
        switch (response?.case) {
          case "getSettingsPropertyResponse":
            resolve(response.value);
            break;
          case "error":
            reject(Error(response.value));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.case}' for 'GetSettingsPropertyRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendDestinationOfSymbolicLinkRequest(
  request: Omit<DestinationOfSymbolicLinkRequest, "$typeName" | "$unknown">,
): Promise<DestinationOfSymbolicLinkResponse> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        case: "destinationOfSymbolicLinkRequest",
        value: create(DestinationOfSymbolicLinkRequestSchema, request),
      },
      (response) => {
        switch (response?.case) {
          case "destinationOfSymbolicLinkResponse":
            resolve(response.value);
            break;
          case "error":
            reject(Error(response.value));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.case}' for 'DestinationOfSymbolicLinkRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendGetLocalStateRequest(
  request: Omit<GetLocalStateRequest, "$typeName" | "$unknown">,
): Promise<GetLocalStateResponse> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        case: "getLocalStateRequest",
        value: create(GetLocalStateRequestSchema, request),
      },
      (response) => {
        switch (response?.case) {
          case "getLocalStateResponse":
            resolve(response.value);
            break;
          case "error":
            reject(Error(response.value));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.case}' for 'GetLocalStateRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendRunProcessRequest(
  request: Omit<RunProcessRequest, "$typeName" | "$unknown">,
): Promise<RunProcessResponse> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        case: "runProcessRequest",
        value: create(RunProcessRequestSchema, request),
      },
      (response) => {
        switch (response?.case) {
          case "runProcessResponse":
            resolve(response.value);
            break;
          case "error":
            reject(Error(response.value));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.case}' for 'RunProcessRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendInstallRequest(
  request: Omit<InstallRequest, "$typeName" | "$unknown">,
): Promise<InstallResponse> {
  return new Promise((resolve, reject) => {
    sendMessage(
      { case: "installRequest", value: create(InstallRequestSchema, request) },
      (response) => {
        switch (response?.case) {
          case "installResponse":
            resolve(response.value);
            break;
          case "error":
            reject(Error(response.value));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.case}' for 'InstallRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendCheckForUpdatesRequest(
  request: Omit<CheckForUpdatesRequest, "$typeName" | "$unknown">,
): Promise<CheckForUpdatesResponse> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        case: "checkForUpdatesRequest",
        value: create(CheckForUpdatesRequestSchema, request),
      },
      (response) => {
        switch (response?.case) {
          case "checkForUpdatesResponse":
            resolve(response.value);
            break;
          case "error":
            reject(Error(response.value));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.case}' for 'CheckForUpdatesRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendHistoryQueryRequest(
  request: Omit<HistoryQueryRequest, "$typeName" | "$unknown">,
): Promise<HistoryQueryResponse> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        case: "historyQueryRequest",
        value: create(HistoryQueryRequestSchema, request),
      },
      (response) => {
        switch (response?.case) {
          case "historyQueryResponse":
            resolve(response.value);
            break;
          case "error":
            reject(Error(response.value));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.case}' for 'HistoryQueryRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendAuthStatusRequest(
  request: Omit<AuthStatusRequest, "$typeName" | "$unknown">,
): Promise<AuthStatusResponse> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        case: "authStatusRequest",
        value: create(AuthStatusRequestSchema, request),
      },
      (response) => {
        switch (response?.case) {
          case "authStatusResponse":
            resolve(response.value);
            break;
          case "error":
            reject(Error(response.value));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.case}' for 'AuthStatusRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendAuthBuilderIdStartDeviceAuthorizationRequest(
  request: Omit<
    AuthBuilderIdStartDeviceAuthorizationRequest,
    "$typeName" | "$unknown"
  >,
): Promise<AuthBuilderIdStartDeviceAuthorizationResponse> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        case: "authBuilderIdStartDeviceAuthorizationRequest",
        value: create(
          AuthBuilderIdStartDeviceAuthorizationRequestSchema,
          request,
        ),
      },
      (response) => {
        switch (response?.case) {
          case "authBuilderIdStartDeviceAuthorizationResponse":
            resolve(response.value);
            break;
          case "error":
            reject(Error(response.value));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.case}' for 'AuthBuilderIdStartDeviceAuthorizationRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendAuthBuilderIdPollCreateTokenRequest(
  request: Omit<AuthBuilderIdPollCreateTokenRequest, "$typeName" | "$unknown">,
): Promise<AuthBuilderIdPollCreateTokenResponse> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        case: "authBuilderIdPollCreateTokenRequest",
        value: create(AuthBuilderIdPollCreateTokenRequestSchema, request),
      },
      (response) => {
        switch (response?.case) {
          case "authBuilderIdPollCreateTokenResponse":
            resolve(response.value);
            break;
          case "error":
            reject(Error(response.value));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.case}' for 'AuthBuilderIdPollCreateTokenRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendPingRequest(
  request: Omit<PingRequest, "$typeName" | "$unknown">,
): Promise<PingResponse> {
  return new Promise((resolve, reject) => {
    sendMessage(
      { case: "pingRequest", value: create(PingRequestSchema, request) },
      (response) => {
        switch (response?.case) {
          case "pingResponse":
            resolve(response.value);
            break;
          case "error":
            reject(Error(response.value));
            break;
          default:
            reject(
              Error(`Invalid response '${response?.case}' for 'PingRequest'`),
            );
        }
      },
    );
  });
}

export async function sendCodewhispererListCustomizationRequest(
  request: Omit<
    CodewhispererListCustomizationRequest,
    "$typeName" | "$unknown"
  >,
): Promise<CodewhispererListCustomizationResponse> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        case: "codewhispererListCustomizationRequest",
        value: create(CodewhispererListCustomizationRequestSchema, request),
      },
      (response) => {
        switch (response?.case) {
          case "codewhispererListCustomizationResponse":
            resolve(response.value);
            break;
          case "error":
            reject(Error(response.value));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.case}' for 'CodewhispererListCustomizationRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendAuthStartPkceAuthorizationRequest(
  request: Omit<AuthStartPkceAuthorizationRequest, "$typeName" | "$unknown">,
): Promise<AuthStartPkceAuthorizationResponse> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        case: "authStartPkceAuthorizationRequest",
        value: create(AuthStartPkceAuthorizationRequestSchema, request),
      },
      (response) => {
        switch (response?.case) {
          case "authStartPkceAuthorizationResponse":
            resolve(response.value);
            break;
          case "error":
            reject(Error(response.value));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.case}' for 'AuthStartPkceAuthorizationRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendAuthFinishPkceAuthorizationRequest(
  request: Omit<AuthFinishPkceAuthorizationRequest, "$typeName" | "$unknown">,
): Promise<AuthFinishPkceAuthorizationResponse> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        case: "authFinishPkceAuthorizationRequest",
        value: create(AuthFinishPkceAuthorizationRequestSchema, request),
      },
      (response) => {
        switch (response?.case) {
          case "authFinishPkceAuthorizationResponse":
            resolve(response.value);
            break;
          case "error":
            reject(Error(response.value));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.case}' for 'AuthFinishPkceAuthorizationRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendAuthCancelPkceAuthorizationRequest(
  request: Omit<AuthCancelPkceAuthorizationRequest, "$typeName" | "$unknown">,
): Promise<AuthCancelPkceAuthorizationResponse> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        case: "authCancelPkceAuthorizationRequest",
        value: create(AuthCancelPkceAuthorizationRequestSchema, request),
      },
      (response) => {
        switch (response?.case) {
          case "authCancelPkceAuthorizationResponse":
            resolve(response.value);
            break;
          case "error":
            reject(Error(response.value));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.case}' for 'AuthCancelPkceAuthorizationRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendGetPlatformInfoRequest(
  request: Omit<GetPlatformInfoRequest, "$typeName" | "$unknown">,
): Promise<GetPlatformInfoResponse> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        case: "getPlatformInfoRequest",
        value: create(GetPlatformInfoRequestSchema, request),
      },
      (response) => {
        switch (response?.case) {
          case "getPlatformInfoResponse":
            resolve(response.value);
            break;
          case "error":
            reject(Error(response.value));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.case}' for 'GetPlatformInfoRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendWriteFileRequest(
  request: Omit<WriteFileRequest, "$typeName" | "$unknown">,
): Promise<void> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        case: "writeFileRequest",
        value: create(WriteFileRequestSchema, request),
      },
      (response) => {
        switch (response?.case) {
          case "success":
            resolve();
            break;
          case "error":
            reject(Error(response.value));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.case}' for 'WriteFileRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendNotificationRequest(
  request: Omit<NotificationRequest, "$typeName" | "$unknown">,
): Promise<void> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        case: "notificationRequest",
        value: create(NotificationRequestSchema, request),
      },
      (response) => {
        switch (response?.case) {
          case "success":
            resolve();
            break;
          case "error":
            reject(Error(response.value));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.case}' for 'NotificationRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendUpdateSettingsPropertyRequest(
  request: Omit<UpdateSettingsPropertyRequest, "$typeName" | "$unknown">,
): Promise<void> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        case: "updateSettingsPropertyRequest",
        value: create(UpdateSettingsPropertyRequestSchema, request),
      },
      (response) => {
        switch (response?.case) {
          case "success":
            resolve();
            break;
          case "error":
            reject(Error(response.value));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.case}' for 'UpdateSettingsPropertyRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendInsertTextRequest(
  request: Omit<InsertTextRequest, "$typeName" | "$unknown">,
): Promise<void> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        case: "insertTextRequest",
        value: create(InsertTextRequestSchema, request),
      },
      (response) => {
        switch (response?.case) {
          case "success":
            resolve();
            break;
          case "error":
            reject(Error(response.value));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.case}' for 'InsertTextRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendUpdateApplicationPropertiesRequest(
  request: Omit<UpdateApplicationPropertiesRequest, "$typeName" | "$unknown">,
): Promise<void> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        case: "updateApplicationPropertiesRequest",
        value: create(UpdateApplicationPropertiesRequestSchema, request),
      },
      (response) => {
        switch (response?.case) {
          case "success":
            resolve();
            break;
          case "error":
            reject(Error(response.value));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.case}' for 'UpdateApplicationPropertiesRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendTelemetryTrackRequest(
  request: Omit<TelemetryTrackRequest, "$typeName" | "$unknown">,
): Promise<void> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        case: "telemetryTrackRequest",
        value: create(TelemetryTrackRequestSchema, request),
      },
      (response) => {
        switch (response?.case) {
          case "success":
            resolve();
            break;
          case "error":
            reject(Error(response.value));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.case}' for 'TelemetryTrackRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendOnboardingRequest(
  request: Omit<OnboardingRequest, "$typeName" | "$unknown">,
): Promise<void> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        case: "onboardingRequest",
        value: create(OnboardingRequestSchema, request),
      },
      (response) => {
        switch (response?.case) {
          case "success":
            resolve();
            break;
          case "error":
            reject(Error(response.value));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.case}' for 'OnboardingRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendWindowFocusRequest(
  request: Omit<WindowFocusRequest, "$typeName" | "$unknown">,
): Promise<void> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        case: "windowFocusRequest",
        value: create(WindowFocusRequestSchema, request),
      },
      (response) => {
        switch (response?.case) {
          case "success":
            resolve();
            break;
          case "error":
            reject(Error(response.value));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.case}' for 'WindowFocusRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendOpenInExternalApplicationRequest(
  request: Omit<OpenInExternalApplicationRequest, "$typeName" | "$unknown">,
): Promise<void> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        case: "openInExternalApplicationRequest",
        value: create(OpenInExternalApplicationRequestSchema, request),
      },
      (response) => {
        switch (response?.case) {
          case "success":
            resolve();
            break;
          case "error":
            reject(Error(response.value));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.case}' for 'OpenInExternalApplicationRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendAppendToFileRequest(
  request: Omit<AppendToFileRequest, "$typeName" | "$unknown">,
): Promise<void> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        case: "appendToFileRequest",
        value: create(AppendToFileRequestSchema, request),
      },
      (response) => {
        switch (response?.case) {
          case "success":
            resolve();
            break;
          case "error":
            reject(Error(response.value));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.case}' for 'AppendToFileRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendUpdateLocalStateRequest(
  request: Omit<UpdateLocalStateRequest, "$typeName" | "$unknown">,
): Promise<void> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        case: "updateLocalStateRequest",
        value: create(UpdateLocalStateRequestSchema, request),
      },
      (response) => {
        switch (response?.case) {
          case "success":
            resolve();
            break;
          case "error":
            reject(Error(response.value));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.case}' for 'UpdateLocalStateRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendCreateDirectoryRequest(
  request: Omit<CreateDirectoryRequest, "$typeName" | "$unknown">,
): Promise<void> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        case: "createDirectoryRequest",
        value: create(CreateDirectoryRequestSchema, request),
      },
      (response) => {
        switch (response?.case) {
          case "success":
            resolve();
            break;
          case "error":
            reject(Error(response.value));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.case}' for 'CreateDirectoryRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendTelemetryPageRequest(
  request: Omit<TelemetryPageRequest, "$typeName" | "$unknown">,
): Promise<void> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        case: "telemetryPageRequest",
        value: create(TelemetryPageRequestSchema, request),
      },
      (response) => {
        switch (response?.case) {
          case "success":
            resolve();
            break;
          case "error":
            reject(Error(response.value));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.case}' for 'TelemetryPageRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendAggregateSessionMetricActionRequest(
  request: Omit<AggregateSessionMetricActionRequest, "$typeName" | "$unknown">,
): Promise<void> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        case: "aggregateSessionMetricActionRequest",
        value: create(AggregateSessionMetricActionRequestSchema, request),
      },
      (response) => {
        switch (response?.case) {
          case "success":
            resolve();
            break;
          case "error":
            reject(Error(response.value));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.case}' for 'AggregateSessionMetricActionRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendUserLogoutRequest(
  request: Omit<UserLogoutRequest, "$typeName" | "$unknown">,
): Promise<void> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        case: "userLogoutRequest",
        value: create(UserLogoutRequestSchema, request),
      },
      (response) => {
        switch (response?.case) {
          case "success":
            resolve();
            break;
          case "error":
            reject(Error(response.value));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.case}' for 'UserLogoutRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendUpdateApplicationRequest(
  request: Omit<UpdateApplicationRequest, "$typeName" | "$unknown">,
): Promise<void> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        case: "updateApplicationRequest",
        value: create(UpdateApplicationRequestSchema, request),
      },
      (response) => {
        switch (response?.case) {
          case "success":
            resolve();
            break;
          case "error":
            reject(Error(response.value));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.case}' for 'UpdateApplicationRequest'`,
              ),
            );
        }
      },
    );
  });
}

export async function sendDragWindowRequest(
  request: Omit<DragWindowRequest, "$typeName" | "$unknown">,
): Promise<void> {
  return new Promise((resolve, reject) => {
    sendMessage(
      {
        case: "dragWindowRequest",
        value: create(DragWindowRequestSchema, request),
      },
      (response) => {
        switch (response?.case) {
          case "success":
            resolve();
            break;
          case "error":
            reject(Error(response.value));
            break;
          default:
            reject(
              Error(
                `Invalid response '${response?.case}' for 'DragWindowRequest'`,
              ),
            );
        }
      },
    );
  });
}
