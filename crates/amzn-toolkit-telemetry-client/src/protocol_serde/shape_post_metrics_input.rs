// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_post_metrics_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::post_metrics::PostMetricsInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.aws_product {
        object.key("AWSProduct").string(var_1.as_str());
    }
    if let Some(var_2) = &input.aws_product_version {
        object.key("AWSProductVersion").string(var_2.as_str());
    }
    if let Some(var_3) = &input.client_id {
        object.key("ClientID").string(var_3.as_str());
    }
    if let Some(var_4) = &input.metric_data {
        let mut array_5 = object.key("MetricData").start_array();
        for item_6 in var_4 {
            {
                #[allow(unused_mut)]
                let mut object_7 = array_5.value().start_object();
                crate::protocol_serde::shape_metric_datum::ser_metric_datum(&mut object_7, item_6)?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if let Some(var_8) = &input.os {
        object.key("OS").string(var_8.as_str());
    }
    if let Some(var_9) = &input.os_architecture {
        object.key("OSArchitecture").string(var_9.as_str());
    }
    if let Some(var_10) = &input.os_version {
        object.key("OSVersion").string(var_10.as_str());
    }
    if let Some(var_11) = &input.parent_product {
        object.key("ParentProduct").string(var_11.as_str());
    }
    if let Some(var_12) = &input.parent_product_version {
        object.key("ParentProductVersion").string(var_12.as_str());
    }
    Ok(())
}
