// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_send_message_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::send_message::SendMessageInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.origin {
        object.key("origin").string(var_1.as_str());
    }
    if let Some(var_2) = &input.source {
        object.key("source").string(var_2.as_str());
    }
    if let Some(var_3) = &input.utterance {
        object.key("utterance").string(var_3.as_str());
    }
    if let Some(var_4) = &input.user_context {
        #[allow(unused_mut)]
        let mut object_5 = object.key("userContext").start_object();
        crate::protocol_serde::shape_user_context::ser_user_context(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.user_settings {
        #[allow(unused_mut)]
        let mut object_7 = object.key("userSettings").start_object();
        crate::protocol_serde::shape_user_settings::ser_user_settings(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.previous_utterance_id {
        object.key("previousUtteranceId").string(var_8.as_str());
    }
    if let Some(var_9) = &input.conversation_id {
        object.key("conversationId").string(var_9.as_str());
    }
    if let Some(var_10) = &input.conversation_token {
        object.key("conversationToken").string(var_10.as_str());
    }
    if let Some(var_11) = &input.dry_run {
        object.key("dryRun").boolean(*var_11);
    }
    Ok(())
}
