// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_dashboard_metric<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::DashboardMetric>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<
        Item = Result<
            ::aws_smithy_json::deserialize::Token<'a>,
            ::aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::DashboardMetricBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key
                        .to_unescaped()?
                        .as_ref()
                    {
                        "timestamp" => {
                            builder =
                                builder.set_timestamp(::aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                    tokens.next(),
                                    ::aws_smithy_types::date_time::Format::EpochSeconds,
                                )?);
                        },
                        "dimensions" => {
                            builder =
                                builder.set_dimensions(crate::protocol_serde::shape_dimensions::de_dimensions(tokens)?);
                        },
                        "chatMetrics" => {
                            builder = builder
                                .set_chat_metrics(crate::protocol_serde::shape_chat_metrics::de_chat_metrics(tokens)?);
                        },
                        "InlineMetrics" => {
                            builder = builder.set_inline_metrics(
                                crate::protocol_serde::shape_inline_metrics::de_inline_metrics(tokens)?,
                            );
                        },
                        "userActivityMetrics" => {
                            builder = builder.set_user_activity_metrics(
                                crate::protocol_serde::shape_user_activity_metrics::de_user_activity_metrics(tokens)?,
                            );
                        },
                        "devMetrics" => {
                            builder = builder
                                .set_dev_metrics(crate::protocol_serde::shape_dev_metrics::de_dev_metrics(tokens)?);
                        },
                        "transformMetrics" => {
                            builder = builder.set_transform_metrics(
                                crate::protocol_serde::shape_transform_metrics::de_transform_metrics(tokens)?,
                            );
                        },
                        "docMetrics" => {
                            builder = builder
                                .set_doc_metrics(crate::protocol_serde::shape_doc_metrics::de_doc_metrics(tokens)?);
                        },
                        "inlineChatMetrics" => {
                            builder = builder.set_inline_chat_metrics(
                                crate::protocol_serde::shape_inline_chat_metrics::de_inline_chat_metrics(tokens)?,
                            );
                        },
                        "testMetrics" => {
                            builder = builder
                                .set_test_metrics(crate::protocol_serde::shape_test_metrics::de_test_metrics(tokens)?);
                        },
                        "codeFixMetrics" => {
                            builder = builder.set_code_fix_metrics(
                                crate::protocol_serde::shape_code_fix_metrics::de_code_fix_metrics(tokens)?,
                            );
                        },
                        "codeReviewMetrics" => {
                            builder = builder.set_code_review_metrics(
                                crate::protocol_serde::shape_code_review_metrics::de_code_review_metrics(tokens)?,
                            );
                        },
                        "codeCoverageMetrics" => {
                            builder = builder.set_code_coverage_metrics(
                                crate::protocol_serde::shape_code_coverage_metrics::de_code_coverage_metrics(tokens)?,
                            );
                        },
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
                            format!("expected object key or end object, found: {:?}", other),
                        ));
                    },
                }
            }
            Ok(Some(
                crate::serde_util::dashboard_metric_correct_errors(builder)
                    .build()
                    .map_err(|err| {
                        ::aws_smithy_json::deserialize::error::DeserializeError::custom_source(
                            "Response was invalid",
                            err,
                        )
                    })?,
            ))
        },
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
