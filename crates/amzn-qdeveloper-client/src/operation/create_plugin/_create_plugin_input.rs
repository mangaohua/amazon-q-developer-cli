// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreatePluginInput {
    #[allow(missing_docs)] // documentation missing in model
    pub plugin_provider: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub plugin_credential: ::std::option::Option<crate::types::PluginCredential>,
    #[allow(missing_docs)] // documentation missing in model
    pub plugin_properties:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    #[allow(missing_docs)] // documentation missing in model
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    #[allow(missing_docs)] // documentation missing in model
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl CreatePluginInput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn plugin_provider(&self) -> ::std::option::Option<&str> {
        self.plugin_provider.as_deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn plugin_credential(&self) -> ::std::option::Option<&crate::types::PluginCredential> {
        self.plugin_credential.as_ref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn plugin_properties(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.plugin_properties.as_ref()
    }

    #[allow(missing_docs)] // documentation missing in model
    /// If no value was sent for this field, a default will be set. If you want to determine if no
    /// value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl ::std::fmt::Debug for CreatePluginInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreatePluginInput");
        formatter.field("plugin_provider", &self.plugin_provider);
        formatter.field("plugin_credential", &"*** Sensitive Data Redacted ***");
        formatter.field("plugin_properties", &self.plugin_properties);
        formatter.field("tags", &self.tags);
        formatter.field("client_token", &self.client_token);
        formatter.finish()
    }
}
impl CreatePluginInput {
    /// Creates a new builder-style object to manufacture
    /// [`CreatePluginInput`](crate::operation::create_plugin::CreatePluginInput).
    pub fn builder() -> crate::operation::create_plugin::builders::CreatePluginInputBuilder {
        crate::operation::create_plugin::builders::CreatePluginInputBuilder::default()
    }
}

/// A builder for [`CreatePluginInput`](crate::operation::create_plugin::CreatePluginInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CreatePluginInputBuilder {
    pub(crate) plugin_provider: ::std::option::Option<::std::string::String>,
    pub(crate) plugin_credential: ::std::option::Option<crate::types::PluginCredential>,
    pub(crate) plugin_properties:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl CreatePluginInputBuilder {
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn plugin_provider(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.plugin_provider = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_plugin_provider(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.plugin_provider = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_plugin_provider(&self) -> &::std::option::Option<::std::string::String> {
        &self.plugin_provider
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn plugin_credential(mut self, input: crate::types::PluginCredential) -> Self {
        self.plugin_credential = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_plugin_credential(mut self, input: ::std::option::Option<crate::types::PluginCredential>) -> Self {
        self.plugin_credential = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_plugin_credential(&self) -> &::std::option::Option<crate::types::PluginCredential> {
        &self.plugin_credential
    }

    /// Adds a key-value pair to `plugin_properties`.
    ///
    /// To override the contents of this collection use
    /// [`set_plugin_properties`](Self::set_plugin_properties).
    pub fn plugin_properties(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.plugin_properties.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.plugin_properties = ::std::option::Option::Some(hash_map);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_plugin_properties(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.plugin_properties = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_plugin_properties(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.plugin_properties
    }

    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }

    /// Consumes the builder and constructs a
    /// [`CreatePluginInput`](crate::operation::create_plugin::CreatePluginInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_plugin::CreatePluginInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_plugin::CreatePluginInput {
            plugin_provider: self.plugin_provider,
            plugin_credential: self.plugin_credential,
            plugin_properties: self.plugin_properties,
            tags: self.tags,
            client_token: self.client_token,
        })
    }
}
impl ::std::fmt::Debug for CreatePluginInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreatePluginInputBuilder");
        formatter.field("plugin_provider", &self.plugin_provider);
        formatter.field("plugin_credential", &"*** Sensitive Data Redacted ***");
        formatter.field("plugin_properties", &self.plugin_properties);
        formatter.field("tags", &self.tags);
        formatter.field("client_token", &self.client_token);
        formatter.finish()
    }
}
