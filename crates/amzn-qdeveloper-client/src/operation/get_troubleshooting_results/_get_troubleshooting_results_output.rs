// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Structure to represent get troubleshooting results response.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetTroubleshootingResultsOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub status: ::std::option::Option<crate::types::SessionStatus>,
    #[allow(missing_docs)] // documentation missing in model
    pub status_reason: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub error_detail: ::std::option::Option<crate::types::ErrorDetail>,
    #[allow(missing_docs)] // documentation missing in model
    pub analysis: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub resolution_suggestions: ::std::option::Option<::std::vec::Vec<crate::types::ResolutionSuggestion>>,
    #[allow(missing_docs)] // documentation missing in model
    pub troubleshooting_commands: ::std::option::Option<::std::vec::Vec<crate::types::GetTroubleshootingCommand>>,
    _request_id: Option<String>,
}
impl GetTroubleshootingResultsOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn status(&self) -> ::std::option::Option<&crate::types::SessionStatus> {
        self.status.as_ref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn status_reason(&self) -> ::std::option::Option<&str> {
        self.status_reason.as_deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn error_detail(&self) -> ::std::option::Option<&crate::types::ErrorDetail> {
        self.error_detail.as_ref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn analysis(&self) -> ::std::option::Option<&str> {
        self.analysis.as_deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    /// If no value was sent for this field, a default will be set. If you want to determine if no
    /// value was sent, use `.resolution_suggestions.is_none()`.
    pub fn resolution_suggestions(&self) -> &[crate::types::ResolutionSuggestion] {
        self.resolution_suggestions.as_deref().unwrap_or_default()
    }

    #[allow(missing_docs)] // documentation missing in model
    /// If no value was sent for this field, a default will be set. If you want to determine if no
    /// value was sent, use `.troubleshooting_commands.is_none()`.
    pub fn troubleshooting_commands(&self) -> &[crate::types::GetTroubleshootingCommand] {
        self.troubleshooting_commands.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for GetTroubleshootingResultsOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetTroubleshootingResultsOutput");
        formatter.field("status", &self.status);
        formatter.field("status_reason", &self.status_reason);
        formatter.field("error_detail", &self.error_detail);
        formatter.field("analysis", &"*** Sensitive Data Redacted ***");
        formatter.field("resolution_suggestions", &self.resolution_suggestions);
        formatter.field("troubleshooting_commands", &self.troubleshooting_commands);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for GetTroubleshootingResultsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetTroubleshootingResultsOutput {
    /// Creates a new builder-style object to manufacture
    /// [`GetTroubleshootingResultsOutput`](crate::operation::get_troubleshooting_results::GetTroubleshootingResultsOutput).
    pub fn builder() -> crate::operation::get_troubleshooting_results::builders::GetTroubleshootingResultsOutputBuilder
    {
        crate::operation::get_troubleshooting_results::builders::GetTroubleshootingResultsOutputBuilder::default()
    }
}

/// A builder for
/// [`GetTroubleshootingResultsOutput`](crate::operation::get_troubleshooting_results::GetTroubleshootingResultsOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GetTroubleshootingResultsOutputBuilder {
    pub(crate) status: ::std::option::Option<crate::types::SessionStatus>,
    pub(crate) status_reason: ::std::option::Option<::std::string::String>,
    pub(crate) error_detail: ::std::option::Option<crate::types::ErrorDetail>,
    pub(crate) analysis: ::std::option::Option<::std::string::String>,
    pub(crate) resolution_suggestions: ::std::option::Option<::std::vec::Vec<crate::types::ResolutionSuggestion>>,
    pub(crate) troubleshooting_commands:
        ::std::option::Option<::std::vec::Vec<crate::types::GetTroubleshootingCommand>>,
    _request_id: Option<String>,
}
impl GetTroubleshootingResultsOutputBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn status(mut self, input: crate::types::SessionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::SessionStatus>) -> Self {
        self.status = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_status(&self) -> &::std::option::Option<crate::types::SessionStatus> {
        &self.status
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_reason = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_reason = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_reason
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn error_detail(mut self, input: crate::types::ErrorDetail) -> Self {
        self.error_detail = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_error_detail(mut self, input: ::std::option::Option<crate::types::ErrorDetail>) -> Self {
        self.error_detail = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_error_detail(&self) -> &::std::option::Option<crate::types::ErrorDetail> {
        &self.error_detail
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn analysis(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.analysis = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_analysis(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.analysis = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_analysis(&self) -> &::std::option::Option<::std::string::String> {
        &self.analysis
    }

    /// Appends an item to `resolution_suggestions`.
    ///
    /// To override the contents of this collection use
    /// [`set_resolution_suggestions`](Self::set_resolution_suggestions).
    pub fn resolution_suggestions(mut self, input: crate::types::ResolutionSuggestion) -> Self {
        let mut v = self.resolution_suggestions.unwrap_or_default();
        v.push(input);
        self.resolution_suggestions = ::std::option::Option::Some(v);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_resolution_suggestions(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::ResolutionSuggestion>>,
    ) -> Self {
        self.resolution_suggestions = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_resolution_suggestions(
        &self,
    ) -> &::std::option::Option<::std::vec::Vec<crate::types::ResolutionSuggestion>> {
        &self.resolution_suggestions
    }

    /// Appends an item to `troubleshooting_commands`.
    ///
    /// To override the contents of this collection use
    /// [`set_troubleshooting_commands`](Self::set_troubleshooting_commands).
    pub fn troubleshooting_commands(mut self, input: crate::types::GetTroubleshootingCommand) -> Self {
        let mut v = self.troubleshooting_commands.unwrap_or_default();
        v.push(input);
        self.troubleshooting_commands = ::std::option::Option::Some(v);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_troubleshooting_commands(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::GetTroubleshootingCommand>>,
    ) -> Self {
        self.troubleshooting_commands = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_troubleshooting_commands(
        &self,
    ) -> &::std::option::Option<::std::vec::Vec<crate::types::GetTroubleshootingCommand>> {
        &self.troubleshooting_commands
    }

    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }

    /// Consumes the builder and constructs a
    /// [`GetTroubleshootingResultsOutput`](crate::operation::get_troubleshooting_results::GetTroubleshootingResultsOutput).
    pub fn build(self) -> crate::operation::get_troubleshooting_results::GetTroubleshootingResultsOutput {
        crate::operation::get_troubleshooting_results::GetTroubleshootingResultsOutput {
            status: self.status,
            status_reason: self.status_reason,
            error_detail: self.error_detail,
            analysis: self.analysis,
            resolution_suggestions: self.resolution_suggestions,
            troubleshooting_commands: self.troubleshooting_commands,
            _request_id: self._request_id,
        }
    }
}
impl ::std::fmt::Debug for GetTroubleshootingResultsOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetTroubleshootingResultsOutputBuilder");
        formatter.field("status", &self.status);
        formatter.field("status_reason", &self.status_reason);
        formatter.field("error_detail", &self.error_detail);
        formatter.field("analysis", &"*** Sensitive Data Redacted ***");
        formatter.field("resolution_suggestions", &self.resolution_suggestions);
        formatter.field("troubleshooting_commands", &self.troubleshooting_commands);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
