// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UsePluginOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub is_authorized: bool,
    _request_id: Option<String>,
}
impl UsePluginOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn is_authorized(&self) -> bool {
        self.is_authorized
    }
}
impl ::aws_types::request_id::RequestId for UsePluginOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UsePluginOutput {
    /// Creates a new builder-style object to manufacture
    /// [`UsePluginOutput`](crate::operation::use_plugin::UsePluginOutput).
    pub fn builder() -> crate::operation::use_plugin::builders::UsePluginOutputBuilder {
        crate::operation::use_plugin::builders::UsePluginOutputBuilder::default()
    }
}

/// A builder for [`UsePluginOutput`](crate::operation::use_plugin::UsePluginOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UsePluginOutputBuilder {
    pub(crate) is_authorized: ::std::option::Option<bool>,
    _request_id: Option<String>,
}
impl UsePluginOutputBuilder {
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn is_authorized(mut self, input: bool) -> Self {
        self.is_authorized = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_is_authorized(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_authorized = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_is_authorized(&self) -> &::std::option::Option<bool> {
        &self.is_authorized
    }

    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }

    /// Consumes the builder and constructs a
    /// [`UsePluginOutput`](crate::operation::use_plugin::UsePluginOutput). This method will
    /// fail if any of the following fields are not set:
    /// - [`is_authorized`](crate::operation::use_plugin::builders::UsePluginOutputBuilder::is_authorized)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::use_plugin::UsePluginOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::use_plugin::UsePluginOutput {
            is_authorized: self.is_authorized.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "is_authorized",
                    "is_authorized was not specified but it is required when building UsePluginOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
