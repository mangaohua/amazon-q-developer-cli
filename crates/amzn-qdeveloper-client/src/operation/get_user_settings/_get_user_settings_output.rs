// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetUserSettingsOutput {
    /// Value for crossRegionCallsConsent setting
    pub cross_region_calls_consent: ::std::option::Option<crate::types::CrossRegionCallsConsent>,
    _request_id: Option<String>,
}
impl GetUserSettingsOutput {
    /// Value for crossRegionCallsConsent setting
    pub fn cross_region_calls_consent(&self) -> ::std::option::Option<&crate::types::CrossRegionCallsConsent> {
        self.cross_region_calls_consent.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetUserSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetUserSettingsOutput {
    /// Creates a new builder-style object to manufacture
    /// [`GetUserSettingsOutput`](crate::operation::get_user_settings::GetUserSettingsOutput).
    pub fn builder() -> crate::operation::get_user_settings::builders::GetUserSettingsOutputBuilder {
        crate::operation::get_user_settings::builders::GetUserSettingsOutputBuilder::default()
    }
}

/// A builder for
/// [`GetUserSettingsOutput`](crate::operation::get_user_settings::GetUserSettingsOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetUserSettingsOutputBuilder {
    pub(crate) cross_region_calls_consent: ::std::option::Option<crate::types::CrossRegionCallsConsent>,
    _request_id: Option<String>,
}
impl GetUserSettingsOutputBuilder {
    /// Value for crossRegionCallsConsent setting
    pub fn cross_region_calls_consent(mut self, input: crate::types::CrossRegionCallsConsent) -> Self {
        self.cross_region_calls_consent = ::std::option::Option::Some(input);
        self
    }

    /// Value for crossRegionCallsConsent setting
    pub fn set_cross_region_calls_consent(
        mut self,
        input: ::std::option::Option<crate::types::CrossRegionCallsConsent>,
    ) -> Self {
        self.cross_region_calls_consent = input;
        self
    }

    /// Value for crossRegionCallsConsent setting
    pub fn get_cross_region_calls_consent(&self) -> &::std::option::Option<crate::types::CrossRegionCallsConsent> {
        &self.cross_region_calls_consent
    }

    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }

    /// Consumes the builder and constructs a
    /// [`GetUserSettingsOutput`](crate::operation::get_user_settings::GetUserSettingsOutput).
    pub fn build(self) -> crate::operation::get_user_settings::GetUserSettingsOutput {
        crate::operation::get_user_settings::GetUserSettingsOutput {
            cross_region_calls_consent: self.cross_region_calls_consent,
            _request_id: self._request_id,
        }
    }
}
