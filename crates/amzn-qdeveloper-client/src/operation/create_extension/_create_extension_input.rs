// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateExtensionInput {
    #[allow(missing_docs)] // documentation missing in model
    pub extension_provider: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub extension_credential: ::std::option::Option<crate::types::ExtensionCredential>,
    #[allow(missing_docs)] // documentation missing in model
    pub extension_properties:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateExtensionInput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn extension_provider(&self) -> ::std::option::Option<&str> {
        self.extension_provider.as_deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn extension_credential(&self) -> ::std::option::Option<&crate::types::ExtensionCredential> {
        self.extension_credential.as_ref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn extension_properties(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.extension_properties.as_ref()
    }
}
impl ::std::fmt::Debug for CreateExtensionInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateExtensionInput");
        formatter.field("extension_provider", &self.extension_provider);
        formatter.field("extension_credential", &"*** Sensitive Data Redacted ***");
        formatter.field("extension_properties", &self.extension_properties);
        formatter.finish()
    }
}
impl CreateExtensionInput {
    /// Creates a new builder-style object to manufacture
    /// [`CreateExtensionInput`](crate::operation::create_extension::CreateExtensionInput).
    pub fn builder() -> crate::operation::create_extension::builders::CreateExtensionInputBuilder {
        crate::operation::create_extension::builders::CreateExtensionInputBuilder::default()
    }
}

/// A builder for
/// [`CreateExtensionInput`](crate::operation::create_extension::CreateExtensionInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CreateExtensionInputBuilder {
    pub(crate) extension_provider: ::std::option::Option<::std::string::String>,
    pub(crate) extension_credential: ::std::option::Option<crate::types::ExtensionCredential>,
    pub(crate) extension_properties:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateExtensionInputBuilder {
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn extension_provider(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.extension_provider = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_extension_provider(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.extension_provider = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_extension_provider(&self) -> &::std::option::Option<::std::string::String> {
        &self.extension_provider
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn extension_credential(mut self, input: crate::types::ExtensionCredential) -> Self {
        self.extension_credential = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_extension_credential(mut self, input: ::std::option::Option<crate::types::ExtensionCredential>) -> Self {
        self.extension_credential = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_extension_credential(&self) -> &::std::option::Option<crate::types::ExtensionCredential> {
        &self.extension_credential
    }

    /// Adds a key-value pair to `extension_properties`.
    ///
    /// To override the contents of this collection use
    /// [`set_extension_properties`](Self::set_extension_properties).
    pub fn extension_properties(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.extension_properties.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.extension_properties = ::std::option::Option::Some(hash_map);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_extension_properties(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.extension_properties = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_extension_properties(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.extension_properties
    }

    /// Consumes the builder and constructs a
    /// [`CreateExtensionInput`](crate::operation::create_extension::CreateExtensionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_extension::CreateExtensionInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_extension::CreateExtensionInput {
            extension_provider: self.extension_provider,
            extension_credential: self.extension_credential,
            extension_properties: self.extension_properties,
        })
    }
}
impl ::std::fmt::Debug for CreateExtensionInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateExtensionInputBuilder");
        formatter.field("extension_provider", &self.extension_provider);
        formatter.field("extension_credential", &"*** Sensitive Data Redacted ***");
        formatter.field("extension_properties", &self.extension_properties);
        formatter.finish()
    }
}
