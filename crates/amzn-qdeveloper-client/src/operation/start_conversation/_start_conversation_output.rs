// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct StartConversationOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub conversation_id: ::std::string::String,
    #[allow(missing_docs)] // documentation missing in model
    pub conversation_token: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub expiration_time: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl StartConversationOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn conversation_id(&self) -> &str {
        use std::ops::Deref;
        self.conversation_id.deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn conversation_token(&self) -> ::std::option::Option<&str> {
        self.conversation_token.as_deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn expiration_time(&self) -> ::std::option::Option<&str> {
        self.expiration_time.as_deref()
    }
}
impl ::std::fmt::Debug for StartConversationOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("StartConversationOutput");
        formatter.field("conversation_id", &self.conversation_id);
        formatter.field("conversation_token", &"*** Sensitive Data Redacted ***");
        formatter.field("expiration_time", &self.expiration_time);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for StartConversationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StartConversationOutput {
    /// Creates a new builder-style object to manufacture
    /// [`StartConversationOutput`](crate::operation::start_conversation::StartConversationOutput).
    pub fn builder() -> crate::operation::start_conversation::builders::StartConversationOutputBuilder {
        crate::operation::start_conversation::builders::StartConversationOutputBuilder::default()
    }
}

/// A builder for
/// [`StartConversationOutput`](crate::operation::start_conversation::StartConversationOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct StartConversationOutputBuilder {
    pub(crate) conversation_id: ::std::option::Option<::std::string::String>,
    pub(crate) conversation_token: ::std::option::Option<::std::string::String>,
    pub(crate) expiration_time: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl StartConversationOutputBuilder {
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn conversation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.conversation_id = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_conversation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.conversation_id = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_conversation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.conversation_id
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn conversation_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.conversation_token = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_conversation_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.conversation_token = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_conversation_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.conversation_token
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn expiration_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.expiration_time = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_expiration_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.expiration_time = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_expiration_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.expiration_time
    }

    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }

    /// Consumes the builder and constructs a
    /// [`StartConversationOutput`](crate::operation::start_conversation::StartConversationOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`conversation_id`](crate::operation::start_conversation::builders::StartConversationOutputBuilder::conversation_id)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_conversation::StartConversationOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::start_conversation::StartConversationOutput {
            conversation_id: self.conversation_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "conversation_id",
                    "conversation_id was not specified but it is required when building StartConversationOutput",
                )
            })?,
            conversation_token: self.conversation_token,
            expiration_time: self.expiration_time,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for StartConversationOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("StartConversationOutputBuilder");
        formatter.field("conversation_id", &self.conversation_id);
        formatter.field("conversation_token", &"*** Sensitive Data Redacted ***");
        formatter.field("expiration_time", &self.expiration_time);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
