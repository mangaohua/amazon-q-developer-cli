// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListExtensionProvidersOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub extension_providers: ::std::vec::Vec<crate::types::ExtensionProviderMetadata>,
    #[allow(missing_docs)] // documentation missing in model
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListExtensionProvidersOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn extension_providers(&self) -> &[crate::types::ExtensionProviderMetadata] {
        use std::ops::Deref;
        self.extension_providers.deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for ListExtensionProvidersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListExtensionProvidersOutput {
    /// Creates a new builder-style object to manufacture
    /// [`ListExtensionProvidersOutput`](crate::operation::list_extension_providers::ListExtensionProvidersOutput).
    pub fn builder() -> crate::operation::list_extension_providers::builders::ListExtensionProvidersOutputBuilder {
        crate::operation::list_extension_providers::builders::ListExtensionProvidersOutputBuilder::default()
    }
}

/// A builder for
/// [`ListExtensionProvidersOutput`](crate::operation::list_extension_providers::ListExtensionProvidersOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListExtensionProvidersOutputBuilder {
    pub(crate) extension_providers: ::std::option::Option<::std::vec::Vec<crate::types::ExtensionProviderMetadata>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListExtensionProvidersOutputBuilder {
    /// Appends an item to `extension_providers`.
    ///
    /// To override the contents of this collection use
    /// [`set_extension_providers`](Self::set_extension_providers).
    pub fn extension_providers(mut self, input: crate::types::ExtensionProviderMetadata) -> Self {
        let mut v = self.extension_providers.unwrap_or_default();
        v.push(input);
        self.extension_providers = ::std::option::Option::Some(v);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_extension_providers(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::ExtensionProviderMetadata>>,
    ) -> Self {
        self.extension_providers = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_extension_providers(
        &self,
    ) -> &::std::option::Option<::std::vec::Vec<crate::types::ExtensionProviderMetadata>> {
        &self.extension_providers
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }

    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }

    /// Consumes the builder and constructs a
    /// [`ListExtensionProvidersOutput`](crate::operation::list_extension_providers::ListExtensionProvidersOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`extension_providers`](crate::operation::list_extension_providers::builders::ListExtensionProvidersOutputBuilder::extension_providers)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_extension_providers::ListExtensionProvidersOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_extension_providers::ListExtensionProvidersOutput {
            extension_providers: self.extension_providers.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "extension_providers",
                    "extension_providers was not specified but it is required when building ListExtensionProvidersOutput",
                )
            })?,
            next_token: self.next_token,
            _request_id: self._request_id,
        })
    }
}
