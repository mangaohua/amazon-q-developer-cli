// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InvokeTaskInput {
    #[allow(missing_docs)] // documentation missing in model
    pub task_id: ::std::option::Option<::std::string::String>,
    /// Map representing key-value pairs for the payload of a task action.
    pub payload: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl InvokeTaskInput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn task_id(&self) -> ::std::option::Option<&str> {
        self.task_id.as_deref()
    }

    /// Map representing key-value pairs for the payload of a task action.
    pub fn payload(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.payload.as_ref()
    }
}
impl InvokeTaskInput {
    /// Creates a new builder-style object to manufacture
    /// [`InvokeTaskInput`](crate::operation::invoke_task::InvokeTaskInput).
    pub fn builder() -> crate::operation::invoke_task::builders::InvokeTaskInputBuilder {
        crate::operation::invoke_task::builders::InvokeTaskInputBuilder::default()
    }
}

/// A builder for [`InvokeTaskInput`](crate::operation::invoke_task::InvokeTaskInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InvokeTaskInputBuilder {
    pub(crate) task_id: ::std::option::Option<::std::string::String>,
    pub(crate) payload:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl InvokeTaskInputBuilder {
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn task_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.task_id = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_task_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.task_id = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_task_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.task_id
    }

    /// Adds a key-value pair to `payload`.
    ///
    /// To override the contents of this collection use [`set_payload`](Self::set_payload).
    ///
    /// Map representing key-value pairs for the payload of a task action.
    pub fn payload(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.payload.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.payload = ::std::option::Option::Some(hash_map);
        self
    }

    /// Map representing key-value pairs for the payload of a task action.
    pub fn set_payload(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.payload = input;
        self
    }

    /// Map representing key-value pairs for the payload of a task action.
    pub fn get_payload(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.payload
    }

    /// Consumes the builder and constructs a
    /// [`InvokeTaskInput`](crate::operation::invoke_task::InvokeTaskInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::invoke_task::InvokeTaskInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::invoke_task::InvokeTaskInput {
            task_id: self.task_id,
            payload: self.payload,
        })
    }
}
