// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListConversationsInput {
    #[allow(missing_docs)] // documentation missing in model
    pub max_results: ::std::option::Option<i32>,
    #[allow(missing_docs)] // documentation missing in model
    pub origins: ::std::option::Option<::std::vec::Vec<crate::types::Origin>>,
    #[allow(missing_docs)] // documentation missing in model
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListConversationsInput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }

    #[allow(missing_docs)] // documentation missing in model
    /// If no value was sent for this field, a default will be set. If you want to determine if no
    /// value was sent, use `.origins.is_none()`.
    pub fn origins(&self) -> &[crate::types::Origin] {
        self.origins.as_deref().unwrap_or_default()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListConversationsInput {
    /// Creates a new builder-style object to manufacture
    /// [`ListConversationsInput`](crate::operation::list_conversations::ListConversationsInput).
    pub fn builder() -> crate::operation::list_conversations::builders::ListConversationsInputBuilder {
        crate::operation::list_conversations::builders::ListConversationsInputBuilder::default()
    }
}

/// A builder for
/// [`ListConversationsInput`](crate::operation::list_conversations::ListConversationsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListConversationsInputBuilder {
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) origins: ::std::option::Option<::std::vec::Vec<crate::types::Origin>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListConversationsInputBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }

    /// Appends an item to `origins`.
    ///
    /// To override the contents of this collection use [`set_origins`](Self::set_origins).
    pub fn origins(mut self, input: crate::types::Origin) -> Self {
        let mut v = self.origins.unwrap_or_default();
        v.push(input);
        self.origins = ::std::option::Option::Some(v);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_origins(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Origin>>) -> Self {
        self.origins = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_origins(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Origin>> {
        &self.origins
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }

    /// Consumes the builder and constructs a
    /// [`ListConversationsInput`](crate::operation::list_conversations::ListConversationsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_conversations::ListConversationsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_conversations::ListConversationsInput {
            max_results: self.max_results,
            origins: self.origins,
            next_token: self.next_token,
        })
    }
}
