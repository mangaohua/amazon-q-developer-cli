// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct PassRequestOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub encrypted_extension_fas_creds: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub encrypted_tools_fas_creds: ::std::option::Option<::std::vec::Vec<crate::types::EncryptedToolFasCreds>>,
    _request_id: Option<String>,
}
impl PassRequestOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn encrypted_extension_fas_creds(&self) -> ::std::option::Option<&str> {
        self.encrypted_extension_fas_creds.as_deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    /// If no value was sent for this field, a default will be set. If you want to determine if no
    /// value was sent, use `.encrypted_tools_fas_creds.is_none()`.
    pub fn encrypted_tools_fas_creds(&self) -> &[crate::types::EncryptedToolFasCreds] {
        self.encrypted_tools_fas_creds.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for PassRequestOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PassRequestOutput");
        formatter.field("encrypted_extension_fas_creds", &"*** Sensitive Data Redacted ***");
        formatter.field("encrypted_tools_fas_creds", &self.encrypted_tools_fas_creds);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for PassRequestOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl PassRequestOutput {
    /// Creates a new builder-style object to manufacture
    /// [`PassRequestOutput`](crate::operation::pass_request::PassRequestOutput).
    pub fn builder() -> crate::operation::pass_request::builders::PassRequestOutputBuilder {
        crate::operation::pass_request::builders::PassRequestOutputBuilder::default()
    }
}

/// A builder for [`PassRequestOutput`](crate::operation::pass_request::PassRequestOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct PassRequestOutputBuilder {
    pub(crate) encrypted_extension_fas_creds: ::std::option::Option<::std::string::String>,
    pub(crate) encrypted_tools_fas_creds: ::std::option::Option<::std::vec::Vec<crate::types::EncryptedToolFasCreds>>,
    _request_id: Option<String>,
}
impl PassRequestOutputBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn encrypted_extension_fas_creds(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.encrypted_extension_fas_creds = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_encrypted_extension_fas_creds(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.encrypted_extension_fas_creds = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_encrypted_extension_fas_creds(&self) -> &::std::option::Option<::std::string::String> {
        &self.encrypted_extension_fas_creds
    }

    /// Appends an item to `encrypted_tools_fas_creds`.
    ///
    /// To override the contents of this collection use
    /// [`set_encrypted_tools_fas_creds`](Self::set_encrypted_tools_fas_creds).
    pub fn encrypted_tools_fas_creds(mut self, input: crate::types::EncryptedToolFasCreds) -> Self {
        let mut v = self.encrypted_tools_fas_creds.unwrap_or_default();
        v.push(input);
        self.encrypted_tools_fas_creds = ::std::option::Option::Some(v);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_encrypted_tools_fas_creds(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::EncryptedToolFasCreds>>,
    ) -> Self {
        self.encrypted_tools_fas_creds = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_encrypted_tools_fas_creds(
        &self,
    ) -> &::std::option::Option<::std::vec::Vec<crate::types::EncryptedToolFasCreds>> {
        &self.encrypted_tools_fas_creds
    }

    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }

    /// Consumes the builder and constructs a
    /// [`PassRequestOutput`](crate::operation::pass_request::PassRequestOutput).
    pub fn build(self) -> crate::operation::pass_request::PassRequestOutput {
        crate::operation::pass_request::PassRequestOutput {
            encrypted_extension_fas_creds: self.encrypted_extension_fas_creds,
            encrypted_tools_fas_creds: self.encrypted_tools_fas_creds,
            _request_id: self._request_id,
        }
    }
}
impl ::std::fmt::Debug for PassRequestOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PassRequestOutputBuilder");
        formatter.field("encrypted_extension_fas_creds", &"*** Sensitive Data Redacted ***");
        formatter.field("encrypted_tools_fas_creds", &self.encrypted_tools_fas_creds);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
