// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RejectConnectorOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub connector_id: ::std::string::String,
    /// Common non-blank String data type used for multiple parameters with a length restriction
    pub connector_name: ::std::string::String,
    /// Connector types like S3, CodeConnection etc
    pub connector_type: ::std::string::String,
    /// Connector target account information
    pub account_connection: crate::types::AccountConnection,
    _request_id: Option<String>,
}
impl RejectConnectorOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn connector_id(&self) -> &str {
        use std::ops::Deref;
        self.connector_id.deref()
    }

    /// Common non-blank String data type used for multiple parameters with a length restriction
    pub fn connector_name(&self) -> &str {
        use std::ops::Deref;
        self.connector_name.deref()
    }

    /// Connector types like S3, CodeConnection etc
    pub fn connector_type(&self) -> &str {
        use std::ops::Deref;
        self.connector_type.deref()
    }

    /// Connector target account information
    pub fn account_connection(&self) -> &crate::types::AccountConnection {
        &self.account_connection
    }
}
impl ::aws_types::request_id::RequestId for RejectConnectorOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl RejectConnectorOutput {
    /// Creates a new builder-style object to manufacture
    /// [`RejectConnectorOutput`](crate::operation::reject_connector::RejectConnectorOutput).
    pub fn builder() -> crate::operation::reject_connector::builders::RejectConnectorOutputBuilder {
        crate::operation::reject_connector::builders::RejectConnectorOutputBuilder::default()
    }
}

/// A builder for
/// [`RejectConnectorOutput`](crate::operation::reject_connector::RejectConnectorOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RejectConnectorOutputBuilder {
    pub(crate) connector_id: ::std::option::Option<::std::string::String>,
    pub(crate) connector_name: ::std::option::Option<::std::string::String>,
    pub(crate) connector_type: ::std::option::Option<::std::string::String>,
    pub(crate) account_connection: ::std::option::Option<crate::types::AccountConnection>,
    _request_id: Option<String>,
}
impl RejectConnectorOutputBuilder {
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn connector_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connector_id = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_connector_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connector_id = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_connector_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.connector_id
    }

    /// Common non-blank String data type used for multiple parameters with a length restriction
    /// This field is required.
    pub fn connector_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connector_name = ::std::option::Option::Some(input.into());
        self
    }

    /// Common non-blank String data type used for multiple parameters with a length restriction
    pub fn set_connector_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connector_name = input;
        self
    }

    /// Common non-blank String data type used for multiple parameters with a length restriction
    pub fn get_connector_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.connector_name
    }

    /// Connector types like S3, CodeConnection etc
    /// This field is required.
    pub fn connector_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connector_type = ::std::option::Option::Some(input.into());
        self
    }

    /// Connector types like S3, CodeConnection etc
    pub fn set_connector_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connector_type = input;
        self
    }

    /// Connector types like S3, CodeConnection etc
    pub fn get_connector_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.connector_type
    }

    /// Connector target account information
    /// This field is required.
    pub fn account_connection(mut self, input: crate::types::AccountConnection) -> Self {
        self.account_connection = ::std::option::Option::Some(input);
        self
    }

    /// Connector target account information
    pub fn set_account_connection(mut self, input: ::std::option::Option<crate::types::AccountConnection>) -> Self {
        self.account_connection = input;
        self
    }

    /// Connector target account information
    pub fn get_account_connection(&self) -> &::std::option::Option<crate::types::AccountConnection> {
        &self.account_connection
    }

    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }

    /// Consumes the builder and constructs a
    /// [`RejectConnectorOutput`](crate::operation::reject_connector::RejectConnectorOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`connector_id`](crate::operation::reject_connector::builders::RejectConnectorOutputBuilder::connector_id)
    /// - [`connector_name`](crate::operation::reject_connector::builders::RejectConnectorOutputBuilder::connector_name)
    /// - [`connector_type`](crate::operation::reject_connector::builders::RejectConnectorOutputBuilder::connector_type)
    /// - [`account_connection`](crate::operation::reject_connector::builders::RejectConnectorOutputBuilder::account_connection)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::reject_connector::RejectConnectorOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::reject_connector::RejectConnectorOutput {
            connector_id: self.connector_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "connector_id",
                    "connector_id was not specified but it is required when building RejectConnectorOutput",
                )
            })?,
            connector_name: self.connector_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "connector_name",
                    "connector_name was not specified but it is required when building RejectConnectorOutput",
                )
            })?,
            connector_type: self.connector_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "connector_type",
                    "connector_type was not specified but it is required when building RejectConnectorOutput",
                )
            })?,
            account_connection: self.account_connection.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "account_connection",
                    "account_connection was not specified but it is required when building RejectConnectorOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
