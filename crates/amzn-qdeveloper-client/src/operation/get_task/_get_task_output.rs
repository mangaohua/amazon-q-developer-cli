// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetTaskOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub task_id: ::std::string::String,
    #[allow(missing_docs)] // documentation missing in model
    pub state: crate::types::TaskState,
    /// Structure containing details about a task.
    pub task_details: crate::types::TaskDetails,
    #[allow(missing_docs)] // documentation missing in model
    pub refresh_interval_seconds: ::std::option::Option<i32>,
    #[allow(missing_docs)] // documentation missing in model
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    #[allow(missing_docs)] // documentation missing in model
    pub last_updated_at: ::aws_smithy_types::DateTime,
    #[allow(missing_docs)] // documentation missing in model
    pub expires_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetTaskOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn task_id(&self) -> &str {
        use std::ops::Deref;
        self.task_id.deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn state(&self) -> &crate::types::TaskState {
        &self.state
    }

    /// Structure containing details about a task.
    pub fn task_details(&self) -> &crate::types::TaskDetails {
        &self.task_details
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn refresh_interval_seconds(&self) -> ::std::option::Option<i32> {
        self.refresh_interval_seconds
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn last_updated_at(&self) -> &::aws_smithy_types::DateTime {
        &self.last_updated_at
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn expires_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.expires_at.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetTaskOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetTaskOutput {
    /// Creates a new builder-style object to manufacture
    /// [`GetTaskOutput`](crate::operation::get_task::GetTaskOutput).
    pub fn builder() -> crate::operation::get_task::builders::GetTaskOutputBuilder {
        crate::operation::get_task::builders::GetTaskOutputBuilder::default()
    }
}

/// A builder for [`GetTaskOutput`](crate::operation::get_task::GetTaskOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetTaskOutputBuilder {
    pub(crate) task_id: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::TaskState>,
    pub(crate) task_details: ::std::option::Option<crate::types::TaskDetails>,
    pub(crate) refresh_interval_seconds: ::std::option::Option<i32>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) expires_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetTaskOutputBuilder {
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn task_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.task_id = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_task_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.task_id = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_task_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.task_id
    }

    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn state(mut self, input: crate::types::TaskState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::TaskState>) -> Self {
        self.state = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_state(&self) -> &::std::option::Option<crate::types::TaskState> {
        &self.state
    }

    /// Structure containing details about a task.
    /// This field is required.
    pub fn task_details(mut self, input: crate::types::TaskDetails) -> Self {
        self.task_details = ::std::option::Option::Some(input);
        self
    }

    /// Structure containing details about a task.
    pub fn set_task_details(mut self, input: ::std::option::Option<crate::types::TaskDetails>) -> Self {
        self.task_details = input;
        self
    }

    /// Structure containing details about a task.
    pub fn get_task_details(&self) -> &::std::option::Option<crate::types::TaskDetails> {
        &self.task_details
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn refresh_interval_seconds(mut self, input: i32) -> Self {
        self.refresh_interval_seconds = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_refresh_interval_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.refresh_interval_seconds = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_refresh_interval_seconds(&self) -> &::std::option::Option<i32> {
        &self.refresh_interval_seconds
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }

    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn last_updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_at = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_last_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_at = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_last_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_at
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn expires_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.expires_at = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_expires_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.expires_at = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_expires_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.expires_at
    }

    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }

    /// Consumes the builder and constructs a
    /// [`GetTaskOutput`](crate::operation::get_task::GetTaskOutput). This method will fail if
    /// any of the following fields are not set:
    /// - [`task_id`](crate::operation::get_task::builders::GetTaskOutputBuilder::task_id)
    /// - [`state`](crate::operation::get_task::builders::GetTaskOutputBuilder::state)
    /// - [`task_details`](crate::operation::get_task::builders::GetTaskOutputBuilder::task_details)
    /// - [`last_updated_at`](crate::operation::get_task::builders::GetTaskOutputBuilder::last_updated_at)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_task::GetTaskOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_task::GetTaskOutput {
            task_id: self.task_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "task_id",
                    "task_id was not specified but it is required when building GetTaskOutput",
                )
            })?,
            state: self.state.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "state",
                    "state was not specified but it is required when building GetTaskOutput",
                )
            })?,
            task_details: self.task_details.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "task_details",
                    "task_details was not specified but it is required when building GetTaskOutput",
                )
            })?,
            refresh_interval_seconds: self.refresh_interval_seconds,
            created_at: self.created_at,
            last_updated_at: self.last_updated_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_updated_at",
                    "last_updated_at was not specified but it is required when building GetTaskOutput",
                )
            })?,
            expires_at: self.expires_at,
            _request_id: self._request_id,
        })
    }
}
