// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateUserSettingsInput {
    /// Value for crossRegionCallsConsent setting
    pub cross_region_calls_consent: ::std::option::Option<crate::types::CrossRegionCallsConsent>,
}
impl UpdateUserSettingsInput {
    /// Value for crossRegionCallsConsent setting
    pub fn cross_region_calls_consent(&self) -> ::std::option::Option<&crate::types::CrossRegionCallsConsent> {
        self.cross_region_calls_consent.as_ref()
    }
}
impl UpdateUserSettingsInput {
    /// Creates a new builder-style object to manufacture
    /// [`UpdateUserSettingsInput`](crate::operation::update_user_settings::UpdateUserSettingsInput).
    pub fn builder() -> crate::operation::update_user_settings::builders::UpdateUserSettingsInputBuilder {
        crate::operation::update_user_settings::builders::UpdateUserSettingsInputBuilder::default()
    }
}

/// A builder for
/// [`UpdateUserSettingsInput`](crate::operation::update_user_settings::UpdateUserSettingsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateUserSettingsInputBuilder {
    pub(crate) cross_region_calls_consent: ::std::option::Option<crate::types::CrossRegionCallsConsent>,
}
impl UpdateUserSettingsInputBuilder {
    /// Value for crossRegionCallsConsent setting
    pub fn cross_region_calls_consent(mut self, input: crate::types::CrossRegionCallsConsent) -> Self {
        self.cross_region_calls_consent = ::std::option::Option::Some(input);
        self
    }

    /// Value for crossRegionCallsConsent setting
    pub fn set_cross_region_calls_consent(
        mut self,
        input: ::std::option::Option<crate::types::CrossRegionCallsConsent>,
    ) -> Self {
        self.cross_region_calls_consent = input;
        self
    }

    /// Value for crossRegionCallsConsent setting
    pub fn get_cross_region_calls_consent(&self) -> &::std::option::Option<crate::types::CrossRegionCallsConsent> {
        &self.cross_region_calls_consent
    }

    /// Consumes the builder and constructs a
    /// [`UpdateUserSettingsInput`](crate::operation::update_user_settings::UpdateUserSettingsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_user_settings::UpdateUserSettingsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_user_settings::UpdateUserSettingsInput {
            cross_region_calls_consent: self.cross_region_calls_consent,
        })
    }
}
