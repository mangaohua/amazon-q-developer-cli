// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetIdentityMetadataOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub organization: ::std::option::Option<crate::types::OrganizationMetadata>,
    #[allow(missing_docs)] // documentation missing in model
    pub subscription: ::std::option::Option<crate::types::SubscriptionMetadata>,
    _request_id: Option<String>,
}
impl GetIdentityMetadataOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn organization(&self) -> ::std::option::Option<&crate::types::OrganizationMetadata> {
        self.organization.as_ref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn subscription(&self) -> ::std::option::Option<&crate::types::SubscriptionMetadata> {
        self.subscription.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetIdentityMetadataOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetIdentityMetadataOutput {
    /// Creates a new builder-style object to manufacture
    /// [`GetIdentityMetadataOutput`](crate::operation::get_identity_metadata::GetIdentityMetadataOutput).
    pub fn builder() -> crate::operation::get_identity_metadata::builders::GetIdentityMetadataOutputBuilder {
        crate::operation::get_identity_metadata::builders::GetIdentityMetadataOutputBuilder::default()
    }
}

/// A builder for
/// [`GetIdentityMetadataOutput`](crate::operation::get_identity_metadata::GetIdentityMetadataOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetIdentityMetadataOutputBuilder {
    pub(crate) organization: ::std::option::Option<crate::types::OrganizationMetadata>,
    pub(crate) subscription: ::std::option::Option<crate::types::SubscriptionMetadata>,
    _request_id: Option<String>,
}
impl GetIdentityMetadataOutputBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn organization(mut self, input: crate::types::OrganizationMetadata) -> Self {
        self.organization = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_organization(mut self, input: ::std::option::Option<crate::types::OrganizationMetadata>) -> Self {
        self.organization = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_organization(&self) -> &::std::option::Option<crate::types::OrganizationMetadata> {
        &self.organization
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn subscription(mut self, input: crate::types::SubscriptionMetadata) -> Self {
        self.subscription = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_subscription(mut self, input: ::std::option::Option<crate::types::SubscriptionMetadata>) -> Self {
        self.subscription = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_subscription(&self) -> &::std::option::Option<crate::types::SubscriptionMetadata> {
        &self.subscription
    }

    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }

    /// Consumes the builder and constructs a
    /// [`GetIdentityMetadataOutput`](crate::operation::get_identity_metadata::GetIdentityMetadataOutput).
    pub fn build(self) -> crate::operation::get_identity_metadata::GetIdentityMetadataOutput {
        crate::operation::get_identity_metadata::GetIdentityMetadataOutput {
            organization: self.organization,
            subscription: self.subscription,
            _request_id: self._request_id,
        }
    }
}
