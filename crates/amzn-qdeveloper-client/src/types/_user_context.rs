// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UserContext {
    #[allow(missing_docs)] // documentation missing in model
    pub console: ::std::option::Option<crate::types::ConsoleContext>,
}
impl UserContext {
    #[allow(missing_docs)] // documentation missing in model
    pub fn console(&self) -> ::std::option::Option<&crate::types::ConsoleContext> {
        self.console.as_ref()
    }
}
impl UserContext {
    /// Creates a new builder-style object to manufacture
    /// [`UserContext`](crate::types::UserContext).
    pub fn builder() -> crate::types::builders::UserContextBuilder {
        crate::types::builders::UserContextBuilder::default()
    }
}

/// A builder for [`UserContext`](crate::types::UserContext).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UserContextBuilder {
    pub(crate) console: ::std::option::Option<crate::types::ConsoleContext>,
}
impl UserContextBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn console(mut self, input: crate::types::ConsoleContext) -> Self {
        self.console = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_console(mut self, input: ::std::option::Option<crate::types::ConsoleContext>) -> Self {
        self.console = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_console(&self) -> &::std::option::Option<crate::types::ConsoleContext> {
        &self.console
    }

    /// Consumes the builder and constructs a [`UserContext`](crate::types::UserContext).
    pub fn build(self) -> crate::types::UserContext {
        crate::types::UserContext { console: self.console }
    }
}
