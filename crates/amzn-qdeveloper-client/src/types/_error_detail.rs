// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ErrorDetail {
    #[allow(missing_docs)] // documentation missing in model
    pub error_text: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub context: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl ErrorDetail {
    #[allow(missing_docs)] // documentation missing in model
    pub fn error_text(&self) -> ::std::option::Option<&str> {
        self.error_text.as_deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn context(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.context.as_ref()
    }
}
impl ::std::fmt::Debug for ErrorDetail {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ErrorDetail");
        formatter.field("error_text", &"*** Sensitive Data Redacted ***");
        formatter.field("context", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl ErrorDetail {
    /// Creates a new builder-style object to manufacture
    /// [`ErrorDetail`](crate::types::ErrorDetail).
    pub fn builder() -> crate::types::builders::ErrorDetailBuilder {
        crate::types::builders::ErrorDetailBuilder::default()
    }
}

/// A builder for [`ErrorDetail`](crate::types::ErrorDetail).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ErrorDetailBuilder {
    pub(crate) error_text: ::std::option::Option<::std::string::String>,
    pub(crate) context:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl ErrorDetailBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn error_text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_text = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_error_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_text = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_error_text(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_text
    }

    /// Adds a key-value pair to `context`.
    ///
    /// To override the contents of this collection use [`set_context`](Self::set_context).
    pub fn context(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.context.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.context = ::std::option::Option::Some(hash_map);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_context(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.context = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_context(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.context
    }

    /// Consumes the builder and constructs a [`ErrorDetail`](crate::types::ErrorDetail).
    pub fn build(self) -> crate::types::ErrorDetail {
        crate::types::ErrorDetail {
            error_text: self.error_text,
            context: self.context,
        }
    }
}
impl ::std::fmt::Debug for ErrorDetailBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ErrorDetailBuilder");
        formatter.field("error_text", &"*** Sensitive Data Redacted ***");
        formatter.field("context", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
