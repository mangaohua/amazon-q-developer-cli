// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ExtensionCredential {
    #[allow(missing_docs)] // documentation missing in model
    pub secret_arn: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub secret_access_role_arn: ::std::option::Option<::std::string::String>,
}
impl ExtensionCredential {
    #[allow(missing_docs)] // documentation missing in model
    pub fn secret_arn(&self) -> ::std::option::Option<&str> {
        self.secret_arn.as_deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn secret_access_role_arn(&self) -> ::std::option::Option<&str> {
        self.secret_access_role_arn.as_deref()
    }
}
impl ::std::fmt::Debug for ExtensionCredential {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ExtensionCredential");
        formatter.field("secret_arn", &"*** Sensitive Data Redacted ***");
        formatter.field("secret_access_role_arn", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl ExtensionCredential {
    /// Creates a new builder-style object to manufacture
    /// [`ExtensionCredential`](crate::types::ExtensionCredential).
    pub fn builder() -> crate::types::builders::ExtensionCredentialBuilder {
        crate::types::builders::ExtensionCredentialBuilder::default()
    }
}

/// A builder for [`ExtensionCredential`](crate::types::ExtensionCredential).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ExtensionCredentialBuilder {
    pub(crate) secret_arn: ::std::option::Option<::std::string::String>,
    pub(crate) secret_access_role_arn: ::std::option::Option<::std::string::String>,
}
impl ExtensionCredentialBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn secret_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.secret_arn = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_secret_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.secret_arn = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_secret_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.secret_arn
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn secret_access_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.secret_access_role_arn = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_secret_access_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.secret_access_role_arn = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_secret_access_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.secret_access_role_arn
    }

    /// Consumes the builder and constructs a
    /// [`ExtensionCredential`](crate::types::ExtensionCredential).
    pub fn build(self) -> crate::types::ExtensionCredential {
        crate::types::ExtensionCredential {
            secret_arn: self.secret_arn,
            secret_access_role_arn: self.secret_access_role_arn,
        }
    }
}
impl ::std::fmt::Debug for ExtensionCredentialBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ExtensionCredentialBuilder");
        formatter.field("secret_arn", &"*** Sensitive Data Redacted ***");
        formatter.field("secret_access_role_arn", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
