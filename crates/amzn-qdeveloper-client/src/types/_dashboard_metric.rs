// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DashboardMetric {
    #[allow(missing_docs)] // documentation missing in model
    pub timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    #[allow(missing_docs)] // documentation missing in model
    pub dimensions: crate::types::Dimensions,
    #[allow(missing_docs)] // documentation missing in model
    pub chat_metrics: ::std::option::Option<crate::types::ChatMetrics>,
    #[allow(missing_docs)] // documentation missing in model
    pub inline_metrics: ::std::option::Option<crate::types::InlineMetrics>,
    #[allow(missing_docs)] // documentation missing in model
    pub user_activity_metrics: ::std::option::Option<crate::types::UserActivityMetrics>,
    #[allow(missing_docs)] // documentation missing in model
    pub dev_metrics: ::std::option::Option<crate::types::DevMetrics>,
    #[allow(missing_docs)] // documentation missing in model
    pub transform_metrics: ::std::option::Option<crate::types::TransformMetrics>,
    #[allow(missing_docs)] // documentation missing in model
    pub doc_metrics: ::std::option::Option<crate::types::DocMetrics>,
    #[allow(missing_docs)] // documentation missing in model
    pub inline_chat_metrics: ::std::option::Option<crate::types::InlineChatMetrics>,
    #[allow(missing_docs)] // documentation missing in model
    pub test_metrics: ::std::option::Option<crate::types::TestMetrics>,
    #[allow(missing_docs)] // documentation missing in model
    pub code_fix_metrics: ::std::option::Option<crate::types::CodeFixMetrics>,
    #[allow(missing_docs)] // documentation missing in model
    pub code_review_metrics: ::std::option::Option<crate::types::CodeReviewMetrics>,
    #[allow(missing_docs)] // documentation missing in model
    pub code_coverage_metrics: ::std::option::Option<crate::types::CodeCoverageMetrics>,
}
impl DashboardMetric {
    #[allow(missing_docs)] // documentation missing in model
    pub fn timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.timestamp.as_ref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn dimensions(&self) -> &crate::types::Dimensions {
        &self.dimensions
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn chat_metrics(&self) -> ::std::option::Option<&crate::types::ChatMetrics> {
        self.chat_metrics.as_ref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn inline_metrics(&self) -> ::std::option::Option<&crate::types::InlineMetrics> {
        self.inline_metrics.as_ref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn user_activity_metrics(&self) -> ::std::option::Option<&crate::types::UserActivityMetrics> {
        self.user_activity_metrics.as_ref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn dev_metrics(&self) -> ::std::option::Option<&crate::types::DevMetrics> {
        self.dev_metrics.as_ref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn transform_metrics(&self) -> ::std::option::Option<&crate::types::TransformMetrics> {
        self.transform_metrics.as_ref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn doc_metrics(&self) -> ::std::option::Option<&crate::types::DocMetrics> {
        self.doc_metrics.as_ref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn inline_chat_metrics(&self) -> ::std::option::Option<&crate::types::InlineChatMetrics> {
        self.inline_chat_metrics.as_ref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn test_metrics(&self) -> ::std::option::Option<&crate::types::TestMetrics> {
        self.test_metrics.as_ref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn code_fix_metrics(&self) -> ::std::option::Option<&crate::types::CodeFixMetrics> {
        self.code_fix_metrics.as_ref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn code_review_metrics(&self) -> ::std::option::Option<&crate::types::CodeReviewMetrics> {
        self.code_review_metrics.as_ref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn code_coverage_metrics(&self) -> ::std::option::Option<&crate::types::CodeCoverageMetrics> {
        self.code_coverage_metrics.as_ref()
    }
}
impl DashboardMetric {
    /// Creates a new builder-style object to manufacture
    /// [`DashboardMetric`](crate::types::DashboardMetric).
    pub fn builder() -> crate::types::builders::DashboardMetricBuilder {
        crate::types::builders::DashboardMetricBuilder::default()
    }
}

/// A builder for [`DashboardMetric`](crate::types::DashboardMetric).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DashboardMetricBuilder {
    pub(crate) timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) dimensions: ::std::option::Option<crate::types::Dimensions>,
    pub(crate) chat_metrics: ::std::option::Option<crate::types::ChatMetrics>,
    pub(crate) inline_metrics: ::std::option::Option<crate::types::InlineMetrics>,
    pub(crate) user_activity_metrics: ::std::option::Option<crate::types::UserActivityMetrics>,
    pub(crate) dev_metrics: ::std::option::Option<crate::types::DevMetrics>,
    pub(crate) transform_metrics: ::std::option::Option<crate::types::TransformMetrics>,
    pub(crate) doc_metrics: ::std::option::Option<crate::types::DocMetrics>,
    pub(crate) inline_chat_metrics: ::std::option::Option<crate::types::InlineChatMetrics>,
    pub(crate) test_metrics: ::std::option::Option<crate::types::TestMetrics>,
    pub(crate) code_fix_metrics: ::std::option::Option<crate::types::CodeFixMetrics>,
    pub(crate) code_review_metrics: ::std::option::Option<crate::types::CodeReviewMetrics>,
    pub(crate) code_coverage_metrics: ::std::option::Option<crate::types::CodeCoverageMetrics>,
}
impl DashboardMetricBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.timestamp = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.timestamp = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.timestamp
    }

    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn dimensions(mut self, input: crate::types::Dimensions) -> Self {
        self.dimensions = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_dimensions(mut self, input: ::std::option::Option<crate::types::Dimensions>) -> Self {
        self.dimensions = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_dimensions(&self) -> &::std::option::Option<crate::types::Dimensions> {
        &self.dimensions
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn chat_metrics(mut self, input: crate::types::ChatMetrics) -> Self {
        self.chat_metrics = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_chat_metrics(mut self, input: ::std::option::Option<crate::types::ChatMetrics>) -> Self {
        self.chat_metrics = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_chat_metrics(&self) -> &::std::option::Option<crate::types::ChatMetrics> {
        &self.chat_metrics
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn inline_metrics(mut self, input: crate::types::InlineMetrics) -> Self {
        self.inline_metrics = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_inline_metrics(mut self, input: ::std::option::Option<crate::types::InlineMetrics>) -> Self {
        self.inline_metrics = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_inline_metrics(&self) -> &::std::option::Option<crate::types::InlineMetrics> {
        &self.inline_metrics
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn user_activity_metrics(mut self, input: crate::types::UserActivityMetrics) -> Self {
        self.user_activity_metrics = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_user_activity_metrics(
        mut self,
        input: ::std::option::Option<crate::types::UserActivityMetrics>,
    ) -> Self {
        self.user_activity_metrics = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_user_activity_metrics(&self) -> &::std::option::Option<crate::types::UserActivityMetrics> {
        &self.user_activity_metrics
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn dev_metrics(mut self, input: crate::types::DevMetrics) -> Self {
        self.dev_metrics = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_dev_metrics(mut self, input: ::std::option::Option<crate::types::DevMetrics>) -> Self {
        self.dev_metrics = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_dev_metrics(&self) -> &::std::option::Option<crate::types::DevMetrics> {
        &self.dev_metrics
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn transform_metrics(mut self, input: crate::types::TransformMetrics) -> Self {
        self.transform_metrics = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_transform_metrics(mut self, input: ::std::option::Option<crate::types::TransformMetrics>) -> Self {
        self.transform_metrics = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_transform_metrics(&self) -> &::std::option::Option<crate::types::TransformMetrics> {
        &self.transform_metrics
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn doc_metrics(mut self, input: crate::types::DocMetrics) -> Self {
        self.doc_metrics = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_doc_metrics(mut self, input: ::std::option::Option<crate::types::DocMetrics>) -> Self {
        self.doc_metrics = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_doc_metrics(&self) -> &::std::option::Option<crate::types::DocMetrics> {
        &self.doc_metrics
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn inline_chat_metrics(mut self, input: crate::types::InlineChatMetrics) -> Self {
        self.inline_chat_metrics = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_inline_chat_metrics(mut self, input: ::std::option::Option<crate::types::InlineChatMetrics>) -> Self {
        self.inline_chat_metrics = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_inline_chat_metrics(&self) -> &::std::option::Option<crate::types::InlineChatMetrics> {
        &self.inline_chat_metrics
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn test_metrics(mut self, input: crate::types::TestMetrics) -> Self {
        self.test_metrics = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_test_metrics(mut self, input: ::std::option::Option<crate::types::TestMetrics>) -> Self {
        self.test_metrics = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_test_metrics(&self) -> &::std::option::Option<crate::types::TestMetrics> {
        &self.test_metrics
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn code_fix_metrics(mut self, input: crate::types::CodeFixMetrics) -> Self {
        self.code_fix_metrics = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_code_fix_metrics(mut self, input: ::std::option::Option<crate::types::CodeFixMetrics>) -> Self {
        self.code_fix_metrics = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_code_fix_metrics(&self) -> &::std::option::Option<crate::types::CodeFixMetrics> {
        &self.code_fix_metrics
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn code_review_metrics(mut self, input: crate::types::CodeReviewMetrics) -> Self {
        self.code_review_metrics = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_code_review_metrics(mut self, input: ::std::option::Option<crate::types::CodeReviewMetrics>) -> Self {
        self.code_review_metrics = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_code_review_metrics(&self) -> &::std::option::Option<crate::types::CodeReviewMetrics> {
        &self.code_review_metrics
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn code_coverage_metrics(mut self, input: crate::types::CodeCoverageMetrics) -> Self {
        self.code_coverage_metrics = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_code_coverage_metrics(
        mut self,
        input: ::std::option::Option<crate::types::CodeCoverageMetrics>,
    ) -> Self {
        self.code_coverage_metrics = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_code_coverage_metrics(&self) -> &::std::option::Option<crate::types::CodeCoverageMetrics> {
        &self.code_coverage_metrics
    }

    /// Consumes the builder and constructs a [`DashboardMetric`](crate::types::DashboardMetric).
    /// This method will fail if any of the following fields are not set:
    /// - [`dimensions`](crate::types::builders::DashboardMetricBuilder::dimensions)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::DashboardMetric, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DashboardMetric {
            timestamp: self.timestamp,
            dimensions: self.dimensions.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "dimensions",
                    "dimensions was not specified but it is required when building DashboardMetric",
                )
            })?,
            chat_metrics: self.chat_metrics,
            inline_metrics: self.inline_metrics,
            user_activity_metrics: self.user_activity_metrics,
            dev_metrics: self.dev_metrics,
            transform_metrics: self.transform_metrics,
            doc_metrics: self.doc_metrics,
            inline_chat_metrics: self.inline_chat_metrics,
            test_metrics: self.test_metrics,
            code_fix_metrics: self.code_fix_metrics,
            code_review_metrics: self.code_review_metrics,
            code_coverage_metrics: self.code_coverage_metrics,
        })
    }
}
