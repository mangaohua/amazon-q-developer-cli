// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ManualResolution {
    #[allow(missing_docs)] // documentation missing in model
    pub resolution: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub status: ::std::option::Option<crate::types::StepStatus>,
}
impl ManualResolution {
    #[allow(missing_docs)] // documentation missing in model
    pub fn resolution(&self) -> ::std::option::Option<&str> {
        self.resolution.as_deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn status(&self) -> ::std::option::Option<&crate::types::StepStatus> {
        self.status.as_ref()
    }
}
impl ::std::fmt::Debug for ManualResolution {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ManualResolution");
        formatter.field("resolution", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &self.status);
        formatter.finish()
    }
}
impl ManualResolution {
    /// Creates a new builder-style object to manufacture
    /// [`ManualResolution`](crate::types::ManualResolution).
    pub fn builder() -> crate::types::builders::ManualResolutionBuilder {
        crate::types::builders::ManualResolutionBuilder::default()
    }
}

/// A builder for [`ManualResolution`](crate::types::ManualResolution).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ManualResolutionBuilder {
    pub(crate) resolution: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::StepStatus>,
}
impl ManualResolutionBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn resolution(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resolution = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_resolution(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resolution = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_resolution(&self) -> &::std::option::Option<::std::string::String> {
        &self.resolution
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn status(mut self, input: crate::types::StepStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::StepStatus>) -> Self {
        self.status = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_status(&self) -> &::std::option::Option<crate::types::StepStatus> {
        &self.status
    }

    /// Consumes the builder and constructs a [`ManualResolution`](crate::types::ManualResolution).
    pub fn build(self) -> crate::types::ManualResolution {
        crate::types::ManualResolution {
            resolution: self.resolution,
            status: self.status,
        }
    }
}
impl ::std::fmt::Debug for ManualResolutionBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ManualResolutionBuilder");
        formatter.field("resolution", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &self.status);
        formatter.finish()
    }
}
