// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Structure representing a note associated with a task action.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct TaskActionNote {
    /// Content of the note, which may include sensitive information.
    pub content: ::std::string::String,
    /// Enum defining the types of notes that can be associated with a task action.
    pub r#type: ::std::option::Option<crate::types::TaskActionNoteType>,
}
impl TaskActionNote {
    /// Content of the note, which may include sensitive information.
    pub fn content(&self) -> &str {
        use std::ops::Deref;
        self.content.deref()
    }

    /// Enum defining the types of notes that can be associated with a task action.
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::TaskActionNoteType> {
        self.r#type.as_ref()
    }
}
impl ::std::fmt::Debug for TaskActionNote {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TaskActionNote");
        formatter.field("content", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &self.r#type);
        formatter.finish()
    }
}
impl TaskActionNote {
    /// Creates a new builder-style object to manufacture
    /// [`TaskActionNote`](crate::types::TaskActionNote).
    pub fn builder() -> crate::types::builders::TaskActionNoteBuilder {
        crate::types::builders::TaskActionNoteBuilder::default()
    }
}

/// A builder for [`TaskActionNote`](crate::types::TaskActionNote).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct TaskActionNoteBuilder {
    pub(crate) content: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::TaskActionNoteType>,
}
impl TaskActionNoteBuilder {
    /// Content of the note, which may include sensitive information.
    /// This field is required.
    pub fn content(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content = ::std::option::Option::Some(input.into());
        self
    }

    /// Content of the note, which may include sensitive information.
    pub fn set_content(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content = input;
        self
    }

    /// Content of the note, which may include sensitive information.
    pub fn get_content(&self) -> &::std::option::Option<::std::string::String> {
        &self.content
    }

    /// Enum defining the types of notes that can be associated with a task action.
    pub fn r#type(mut self, input: crate::types::TaskActionNoteType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }

    /// Enum defining the types of notes that can be associated with a task action.
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::TaskActionNoteType>) -> Self {
        self.r#type = input;
        self
    }

    /// Enum defining the types of notes that can be associated with a task action.
    pub fn get_type(&self) -> &::std::option::Option<crate::types::TaskActionNoteType> {
        &self.r#type
    }

    /// Consumes the builder and constructs a [`TaskActionNote`](crate::types::TaskActionNote).
    /// This method will fail if any of the following fields are not set:
    /// - [`content`](crate::types::builders::TaskActionNoteBuilder::content)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::TaskActionNote, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TaskActionNote {
            content: self.content.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "content",
                    "content was not specified but it is required when building TaskActionNote",
                )
            })?,
            r#type: self.r#type,
        })
    }
}
impl ::std::fmt::Debug for TaskActionNoteBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TaskActionNoteBuilder");
        formatter.field("content", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &self.r#type);
        formatter.finish()
    }
}
