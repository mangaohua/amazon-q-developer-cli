// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetSessionCommandParameter {
    #[allow(missing_docs)] // documentation missing in model
    pub name: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub r#type: ::std::option::Option<crate::types::ParameterValueType>,
    #[allow(missing_docs)] // documentation missing in model
    pub value: ::std::option::Option<::std::string::String>,
}
impl GetSessionCommandParameter {
    #[allow(missing_docs)] // documentation missing in model
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::ParameterValueType> {
        self.r#type.as_ref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn value(&self) -> ::std::option::Option<&str> {
        self.value.as_deref()
    }
}
impl ::std::fmt::Debug for GetSessionCommandParameter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetSessionCommandParameter");
        formatter.field("name", &self.name);
        formatter.field("r#type", &self.r#type);
        formatter.field("value", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl GetSessionCommandParameter {
    /// Creates a new builder-style object to manufacture
    /// [`GetSessionCommandParameter`](crate::types::GetSessionCommandParameter).
    pub fn builder() -> crate::types::builders::GetSessionCommandParameterBuilder {
        crate::types::builders::GetSessionCommandParameterBuilder::default()
    }
}

/// A builder for [`GetSessionCommandParameter`](crate::types::GetSessionCommandParameter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GetSessionCommandParameterBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::ParameterValueType>,
    pub(crate) value: ::std::option::Option<::std::string::String>,
}
impl GetSessionCommandParameterBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn r#type(mut self, input: crate::types::ParameterValueType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::ParameterValueType>) -> Self {
        self.r#type = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_type(&self) -> &::std::option::Option<crate::types::ParameterValueType> {
        &self.r#type
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }

    /// Consumes the builder and constructs a
    /// [`GetSessionCommandParameter`](crate::types::GetSessionCommandParameter).
    pub fn build(self) -> crate::types::GetSessionCommandParameter {
        crate::types::GetSessionCommandParameter {
            name: self.name,
            r#type: self.r#type,
            value: self.value,
        }
    }
}
impl ::std::fmt::Debug for GetSessionCommandParameterBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetSessionCommandParameterBuilder");
        formatter.field("name", &self.name);
        formatter.field("r#type", &self.r#type);
        formatter.field("value", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
