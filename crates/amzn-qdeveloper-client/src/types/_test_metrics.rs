// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TestMetrics {
    #[allow(missing_docs)] // documentation missing in model
    pub lines_of_code_accepted: ::std::option::Option<i64>,
    #[allow(missing_docs)] // documentation missing in model
    pub lines_of_code_generated: ::std::option::Option<i64>,
    #[allow(missing_docs)] // documentation missing in model
    pub characters_of_code_accepted: i32,
    #[allow(missing_docs)] // documentation missing in model
    pub characters_of_code_generated: i32,
    #[allow(missing_docs)] // documentation missing in model
    pub number_of_unit_test_cases_accepted: ::std::option::Option<i64>,
    #[allow(missing_docs)] // documentation missing in model
    pub number_of_unit_test_cases_generated: ::std::option::Option<i64>,
}
impl TestMetrics {
    #[allow(missing_docs)] // documentation missing in model
    pub fn lines_of_code_accepted(&self) -> ::std::option::Option<i64> {
        self.lines_of_code_accepted
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn lines_of_code_generated(&self) -> ::std::option::Option<i64> {
        self.lines_of_code_generated
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn characters_of_code_accepted(&self) -> i32 {
        self.characters_of_code_accepted
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn characters_of_code_generated(&self) -> i32 {
        self.characters_of_code_generated
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn number_of_unit_test_cases_accepted(&self) -> ::std::option::Option<i64> {
        self.number_of_unit_test_cases_accepted
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn number_of_unit_test_cases_generated(&self) -> ::std::option::Option<i64> {
        self.number_of_unit_test_cases_generated
    }
}
impl TestMetrics {
    /// Creates a new builder-style object to manufacture
    /// [`TestMetrics`](crate::types::TestMetrics).
    pub fn builder() -> crate::types::builders::TestMetricsBuilder {
        crate::types::builders::TestMetricsBuilder::default()
    }
}

/// A builder for [`TestMetrics`](crate::types::TestMetrics).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TestMetricsBuilder {
    pub(crate) lines_of_code_accepted: ::std::option::Option<i64>,
    pub(crate) lines_of_code_generated: ::std::option::Option<i64>,
    pub(crate) characters_of_code_accepted: ::std::option::Option<i32>,
    pub(crate) characters_of_code_generated: ::std::option::Option<i32>,
    pub(crate) number_of_unit_test_cases_accepted: ::std::option::Option<i64>,
    pub(crate) number_of_unit_test_cases_generated: ::std::option::Option<i64>,
}
impl TestMetricsBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn lines_of_code_accepted(mut self, input: i64) -> Self {
        self.lines_of_code_accepted = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_lines_of_code_accepted(mut self, input: ::std::option::Option<i64>) -> Self {
        self.lines_of_code_accepted = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_lines_of_code_accepted(&self) -> &::std::option::Option<i64> {
        &self.lines_of_code_accepted
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn lines_of_code_generated(mut self, input: i64) -> Self {
        self.lines_of_code_generated = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_lines_of_code_generated(mut self, input: ::std::option::Option<i64>) -> Self {
        self.lines_of_code_generated = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_lines_of_code_generated(&self) -> &::std::option::Option<i64> {
        &self.lines_of_code_generated
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn characters_of_code_accepted(mut self, input: i32) -> Self {
        self.characters_of_code_accepted = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_characters_of_code_accepted(mut self, input: ::std::option::Option<i32>) -> Self {
        self.characters_of_code_accepted = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_characters_of_code_accepted(&self) -> &::std::option::Option<i32> {
        &self.characters_of_code_accepted
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn characters_of_code_generated(mut self, input: i32) -> Self {
        self.characters_of_code_generated = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_characters_of_code_generated(mut self, input: ::std::option::Option<i32>) -> Self {
        self.characters_of_code_generated = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_characters_of_code_generated(&self) -> &::std::option::Option<i32> {
        &self.characters_of_code_generated
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn number_of_unit_test_cases_accepted(mut self, input: i64) -> Self {
        self.number_of_unit_test_cases_accepted = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_number_of_unit_test_cases_accepted(mut self, input: ::std::option::Option<i64>) -> Self {
        self.number_of_unit_test_cases_accepted = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_number_of_unit_test_cases_accepted(&self) -> &::std::option::Option<i64> {
        &self.number_of_unit_test_cases_accepted
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn number_of_unit_test_cases_generated(mut self, input: i64) -> Self {
        self.number_of_unit_test_cases_generated = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_number_of_unit_test_cases_generated(mut self, input: ::std::option::Option<i64>) -> Self {
        self.number_of_unit_test_cases_generated = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_number_of_unit_test_cases_generated(&self) -> &::std::option::Option<i64> {
        &self.number_of_unit_test_cases_generated
    }

    /// Consumes the builder and constructs a [`TestMetrics`](crate::types::TestMetrics).
    pub fn build(self) -> crate::types::TestMetrics {
        crate::types::TestMetrics {
            lines_of_code_accepted: self.lines_of_code_accepted,
            lines_of_code_generated: self.lines_of_code_generated,
            characters_of_code_accepted: self.characters_of_code_accepted.unwrap_or_default(),
            characters_of_code_generated: self.characters_of_code_generated.unwrap_or_default(),
            number_of_unit_test_cases_accepted: self.number_of_unit_test_cases_accepted,
            number_of_unit_test_cases_generated: self.number_of_unit_test_cases_generated,
        }
    }
}
