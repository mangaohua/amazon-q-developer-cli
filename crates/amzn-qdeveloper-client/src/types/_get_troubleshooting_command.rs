// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetTroubleshootingCommand {
    #[allow(missing_docs)] // documentation missing in model
    pub command_id: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub status: ::std::option::Option<crate::types::CommandExecutionStatus>,
    #[allow(missing_docs)] // documentation missing in model
    pub client: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub command: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub parameters: ::std::option::Option<::std::vec::Vec<crate::types::GetSessionCommandParameter>>,
    #[allow(missing_docs)] // documentation missing in model
    pub result: ::std::option::Option<::std::string::String>,
}
impl GetTroubleshootingCommand {
    #[allow(missing_docs)] // documentation missing in model
    pub fn command_id(&self) -> ::std::option::Option<&str> {
        self.command_id.as_deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn status(&self) -> ::std::option::Option<&crate::types::CommandExecutionStatus> {
        self.status.as_ref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn client(&self) -> ::std::option::Option<&str> {
        self.client.as_deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn command(&self) -> ::std::option::Option<&str> {
        self.command.as_deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    /// If no value was sent for this field, a default will be set. If you want to determine if no
    /// value was sent, use `.parameters.is_none()`.
    pub fn parameters(&self) -> &[crate::types::GetSessionCommandParameter] {
        self.parameters.as_deref().unwrap_or_default()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn result(&self) -> ::std::option::Option<&str> {
        self.result.as_deref()
    }
}
impl ::std::fmt::Debug for GetTroubleshootingCommand {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetTroubleshootingCommand");
        formatter.field("command_id", &self.command_id);
        formatter.field("status", &self.status);
        formatter.field("client", &self.client);
        formatter.field("command", &self.command);
        formatter.field("parameters", &self.parameters);
        formatter.field("result", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl GetTroubleshootingCommand {
    /// Creates a new builder-style object to manufacture
    /// [`GetTroubleshootingCommand`](crate::types::GetTroubleshootingCommand).
    pub fn builder() -> crate::types::builders::GetTroubleshootingCommandBuilder {
        crate::types::builders::GetTroubleshootingCommandBuilder::default()
    }
}

/// A builder for [`GetTroubleshootingCommand`](crate::types::GetTroubleshootingCommand).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GetTroubleshootingCommandBuilder {
    pub(crate) command_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::CommandExecutionStatus>,
    pub(crate) client: ::std::option::Option<::std::string::String>,
    pub(crate) command: ::std::option::Option<::std::string::String>,
    pub(crate) parameters: ::std::option::Option<::std::vec::Vec<crate::types::GetSessionCommandParameter>>,
    pub(crate) result: ::std::option::Option<::std::string::String>,
}
impl GetTroubleshootingCommandBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn command_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.command_id = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_command_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.command_id = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_command_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.command_id
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn status(mut self, input: crate::types::CommandExecutionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::CommandExecutionStatus>) -> Self {
        self.status = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_status(&self) -> &::std::option::Option<crate::types::CommandExecutionStatus> {
        &self.status
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn client(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_client(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_client(&self) -> &::std::option::Option<::std::string::String> {
        &self.client
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn command(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.command = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_command(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.command = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_command(&self) -> &::std::option::Option<::std::string::String> {
        &self.command
    }

    /// Appends an item to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    pub fn parameters(mut self, input: crate::types::GetSessionCommandParameter) -> Self {
        let mut v = self.parameters.unwrap_or_default();
        v.push(input);
        self.parameters = ::std::option::Option::Some(v);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_parameters(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::GetSessionCommandParameter>>,
    ) -> Self {
        self.parameters = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_parameters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GetSessionCommandParameter>> {
        &self.parameters
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn result(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.result = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_result(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.result = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_result(&self) -> &::std::option::Option<::std::string::String> {
        &self.result
    }

    /// Consumes the builder and constructs a
    /// [`GetTroubleshootingCommand`](crate::types::GetTroubleshootingCommand).
    pub fn build(self) -> crate::types::GetTroubleshootingCommand {
        crate::types::GetTroubleshootingCommand {
            command_id: self.command_id,
            status: self.status,
            client: self.client,
            command: self.command,
            parameters: self.parameters,
            result: self.result,
        }
    }
}
impl ::std::fmt::Debug for GetTroubleshootingCommandBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetTroubleshootingCommandBuilder");
        formatter.field("command_id", &self.command_id);
        formatter.field("status", &self.status);
        formatter.field("client", &self.client);
        formatter.field("command", &self.command);
        formatter.field("parameters", &self.parameters);
        formatter.field("result", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
