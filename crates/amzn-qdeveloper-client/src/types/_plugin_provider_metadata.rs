// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PluginProviderMetadata {
    #[allow(missing_docs)] // documentation missing in model
    pub plugin_provider: ::std::string::String,
    #[allow(missing_docs)] // documentation missing in model
    pub description: ::std::option::Option<::std::string::String>,
}
impl PluginProviderMetadata {
    #[allow(missing_docs)] // documentation missing in model
    pub fn plugin_provider(&self) -> &str {
        use std::ops::Deref;
        self.plugin_provider.deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl PluginProviderMetadata {
    /// Creates a new builder-style object to manufacture
    /// [`PluginProviderMetadata`](crate::types::PluginProviderMetadata).
    pub fn builder() -> crate::types::builders::PluginProviderMetadataBuilder {
        crate::types::builders::PluginProviderMetadataBuilder::default()
    }
}

/// A builder for [`PluginProviderMetadata`](crate::types::PluginProviderMetadata).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PluginProviderMetadataBuilder {
    pub(crate) plugin_provider: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
}
impl PluginProviderMetadataBuilder {
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn plugin_provider(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.plugin_provider = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_plugin_provider(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.plugin_provider = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_plugin_provider(&self) -> &::std::option::Option<::std::string::String> {
        &self.plugin_provider
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }

    /// Consumes the builder and constructs a
    /// [`PluginProviderMetadata`](crate::types::PluginProviderMetadata). This method will fail
    /// if any of the following fields are not set:
    /// - [`plugin_provider`](crate::types::builders::PluginProviderMetadataBuilder::plugin_provider)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::PluginProviderMetadata, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::types::PluginProviderMetadata {
            plugin_provider: self.plugin_provider.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "plugin_provider",
                    "plugin_provider was not specified but it is required when building PluginProviderMetadata",
                )
            })?,
            description: self.description,
        })
    }
}
