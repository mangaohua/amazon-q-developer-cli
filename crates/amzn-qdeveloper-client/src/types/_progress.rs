// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Structure representing a collection of steps in a process.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Progress {
    /// A collection of steps that make up a process. Each step is detailed using the Step
    /// structure.
    pub content: ::std::vec::Vec<crate::types::ProgressComponent>,
}
impl Progress {
    /// A collection of steps that make up a process. Each step is detailed using the Step
    /// structure.
    pub fn content(&self) -> &[crate::types::ProgressComponent] {
        use std::ops::Deref;
        self.content.deref()
    }
}
impl Progress {
    /// Creates a new builder-style object to manufacture [`Progress`](crate::types::Progress).
    pub fn builder() -> crate::types::builders::ProgressBuilder {
        crate::types::builders::ProgressBuilder::default()
    }
}

/// A builder for [`Progress`](crate::types::Progress).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ProgressBuilder {
    pub(crate) content: ::std::option::Option<::std::vec::Vec<crate::types::ProgressComponent>>,
}
impl ProgressBuilder {
    /// Appends an item to `content`.
    ///
    /// To override the contents of this collection use [`set_content`](Self::set_content).
    ///
    /// A collection of steps that make up a process. Each step is detailed using the Step
    /// structure.
    pub fn content(mut self, input: crate::types::ProgressComponent) -> Self {
        let mut v = self.content.unwrap_or_default();
        v.push(input);
        self.content = ::std::option::Option::Some(v);
        self
    }

    /// A collection of steps that make up a process. Each step is detailed using the Step
    /// structure.
    pub fn set_content(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::ProgressComponent>>,
    ) -> Self {
        self.content = input;
        self
    }

    /// A collection of steps that make up a process. Each step is detailed using the Step
    /// structure.
    pub fn get_content(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ProgressComponent>> {
        &self.content
    }

    /// Consumes the builder and constructs a [`Progress`](crate::types::Progress).
    /// This method will fail if any of the following fields are not set:
    /// - [`content`](crate::types::builders::ProgressBuilder::content)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::Progress, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Progress {
            content: self.content.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "content",
                    "content was not specified but it is required when building Progress",
                )
            })?,
        })
    }
}
