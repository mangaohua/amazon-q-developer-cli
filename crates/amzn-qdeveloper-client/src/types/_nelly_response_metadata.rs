// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct NellyResponseMetadata {
    #[allow(missing_docs)] // documentation missing in model
    pub conversation_id: ::std::string::String,
    #[allow(missing_docs)] // documentation missing in model
    pub utterance_id: ::std::string::String,
    #[allow(missing_docs)] // documentation missing in model
    pub conversation_token: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub conversation_expiration_time: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub configuration_id: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl NellyResponseMetadata {
    #[allow(missing_docs)] // documentation missing in model
    pub fn conversation_id(&self) -> &str {
        use std::ops::Deref;
        self.conversation_id.deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn utterance_id(&self) -> &str {
        use std::ops::Deref;
        self.utterance_id.deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn conversation_token(&self) -> ::std::option::Option<&str> {
        self.conversation_token.as_deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn conversation_expiration_time(&self) -> ::std::option::Option<&str> {
        self.conversation_expiration_time.as_deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    /// If no value was sent for this field, a default will be set. If you want to determine if no
    /// value was sent, use `.configuration_id.is_none()`.
    pub fn configuration_id(&self) -> &[::std::string::String] {
        self.configuration_id.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for NellyResponseMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("NellyResponseMetadata");
        formatter.field("conversation_id", &self.conversation_id);
        formatter.field("utterance_id", &self.utterance_id);
        formatter.field("conversation_token", &"*** Sensitive Data Redacted ***");
        formatter.field("conversation_expiration_time", &self.conversation_expiration_time);
        formatter.field("configuration_id", &self.configuration_id);
        formatter.finish()
    }
}
impl NellyResponseMetadata {
    /// Creates a new builder-style object to manufacture
    /// [`NellyResponseMetadata`](crate::types::NellyResponseMetadata).
    pub fn builder() -> crate::types::builders::NellyResponseMetadataBuilder {
        crate::types::builders::NellyResponseMetadataBuilder::default()
    }
}

/// A builder for [`NellyResponseMetadata`](crate::types::NellyResponseMetadata).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct NellyResponseMetadataBuilder {
    pub(crate) conversation_id: ::std::option::Option<::std::string::String>,
    pub(crate) utterance_id: ::std::option::Option<::std::string::String>,
    pub(crate) conversation_token: ::std::option::Option<::std::string::String>,
    pub(crate) conversation_expiration_time: ::std::option::Option<::std::string::String>,
    pub(crate) configuration_id: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl NellyResponseMetadataBuilder {
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn conversation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.conversation_id = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_conversation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.conversation_id = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_conversation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.conversation_id
    }

    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn utterance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.utterance_id = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_utterance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.utterance_id = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_utterance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.utterance_id
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn conversation_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.conversation_token = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_conversation_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.conversation_token = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_conversation_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.conversation_token
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn conversation_expiration_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.conversation_expiration_time = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_conversation_expiration_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.conversation_expiration_time = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_conversation_expiration_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.conversation_expiration_time
    }

    /// Appends an item to `configuration_id`.
    ///
    /// To override the contents of this collection use
    /// [`set_configuration_id`](Self::set_configuration_id).
    pub fn configuration_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.configuration_id.unwrap_or_default();
        v.push(input.into());
        self.configuration_id = ::std::option::Option::Some(v);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_configuration_id(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    ) -> Self {
        self.configuration_id = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_configuration_id(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.configuration_id
    }

    /// Consumes the builder and constructs a
    /// [`NellyResponseMetadata`](crate::types::NellyResponseMetadata). This method will fail if
    /// any of the following fields are not set:
    /// - [`conversation_id`](crate::types::builders::NellyResponseMetadataBuilder::conversation_id)
    /// - [`utterance_id`](crate::types::builders::NellyResponseMetadataBuilder::utterance_id)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::NellyResponseMetadata, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::types::NellyResponseMetadata {
            conversation_id: self.conversation_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "conversation_id",
                    "conversation_id was not specified but it is required when building NellyResponseMetadata",
                )
            })?,
            utterance_id: self.utterance_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "utterance_id",
                    "utterance_id was not specified but it is required when building NellyResponseMetadata",
                )
            })?,
            conversation_token: self.conversation_token,
            conversation_expiration_time: self.conversation_expiration_time,
            configuration_id: self.configuration_id,
        })
    }
}
impl ::std::fmt::Debug for NellyResponseMetadataBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("NellyResponseMetadataBuilder");
        formatter.field("conversation_id", &self.conversation_id);
        formatter.field("utterance_id", &self.utterance_id);
        formatter.field("conversation_token", &"*** Sensitive Data Redacted ***");
        formatter.field("conversation_expiration_time", &self.conversation_expiration_time);
        formatter.field("configuration_id", &self.configuration_id);
        formatter.finish()
    }
}
