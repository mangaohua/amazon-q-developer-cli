// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Message {
    #[allow(missing_docs)] // documentation missing in model
    pub utterance_id: ::std::string::String,
    /// Enumeration of the possible values for nelly chat response text
    pub r#type: crate::types::ResultType,
    #[allow(missing_docs)] // documentation missing in model
    pub format: crate::types::ResultFormat,
    #[allow(missing_docs)] // documentation missing in model
    pub content: crate::types::NellyContent,
    #[allow(missing_docs)] // documentation missing in model
    pub from: crate::types::MessageFromType,
    #[allow(missing_docs)] // documentation missing in model
    pub timestamp: ::aws_smithy_types::DateTime,
    #[allow(missing_docs)] // documentation missing in model
    pub intents: ::std::option::Option<
        ::std::collections::HashMap<
            crate::types::IntentType,
            ::std::collections::HashMap<::std::string::String, crate::types::IntentDataType>,
        >,
    >,
    /// List of interaction components.
    pub interaction_components: ::std::option::Option<::std::vec::Vec<crate::types::InteractionComponent>>,
}
impl Message {
    #[allow(missing_docs)] // documentation missing in model
    pub fn utterance_id(&self) -> &str {
        use std::ops::Deref;
        self.utterance_id.deref()
    }

    /// Enumeration of the possible values for nelly chat response text
    pub fn r#type(&self) -> &crate::types::ResultType {
        &self.r#type
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn format(&self) -> &crate::types::ResultFormat {
        &self.format
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn content(&self) -> &crate::types::NellyContent {
        &self.content
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn from(&self) -> &crate::types::MessageFromType {
        &self.from
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn timestamp(&self) -> &::aws_smithy_types::DateTime {
        &self.timestamp
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn intents(
        &self,
    ) -> ::std::option::Option<
        &::std::collections::HashMap<
            crate::types::IntentType,
            ::std::collections::HashMap<::std::string::String, crate::types::IntentDataType>,
        >,
    > {
        self.intents.as_ref()
    }

    /// List of interaction components.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no
    /// value was sent, use `.interaction_components.is_none()`.
    pub fn interaction_components(&self) -> &[crate::types::InteractionComponent] {
        self.interaction_components.as_deref().unwrap_or_default()
    }
}
impl Message {
    /// Creates a new builder-style object to manufacture [`Message`](crate::types::Message).
    pub fn builder() -> crate::types::builders::MessageBuilder {
        crate::types::builders::MessageBuilder::default()
    }
}

/// A builder for [`Message`](crate::types::Message).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MessageBuilder {
    pub(crate) utterance_id: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::ResultType>,
    pub(crate) format: ::std::option::Option<crate::types::ResultFormat>,
    pub(crate) content: ::std::option::Option<crate::types::NellyContent>,
    pub(crate) from: ::std::option::Option<crate::types::MessageFromType>,
    pub(crate) timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) intents: ::std::option::Option<
        ::std::collections::HashMap<
            crate::types::IntentType,
            ::std::collections::HashMap<::std::string::String, crate::types::IntentDataType>,
        >,
    >,
    pub(crate) interaction_components: ::std::option::Option<::std::vec::Vec<crate::types::InteractionComponent>>,
}
impl MessageBuilder {
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn utterance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.utterance_id = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_utterance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.utterance_id = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_utterance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.utterance_id
    }

    /// Enumeration of the possible values for nelly chat response text
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::ResultType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }

    /// Enumeration of the possible values for nelly chat response text
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::ResultType>) -> Self {
        self.r#type = input;
        self
    }

    /// Enumeration of the possible values for nelly chat response text
    pub fn get_type(&self) -> &::std::option::Option<crate::types::ResultType> {
        &self.r#type
    }

    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn format(mut self, input: crate::types::ResultFormat) -> Self {
        self.format = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_format(mut self, input: ::std::option::Option<crate::types::ResultFormat>) -> Self {
        self.format = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_format(&self) -> &::std::option::Option<crate::types::ResultFormat> {
        &self.format
    }

    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn content(mut self, input: crate::types::NellyContent) -> Self {
        self.content = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_content(mut self, input: ::std::option::Option<crate::types::NellyContent>) -> Self {
        self.content = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_content(&self) -> &::std::option::Option<crate::types::NellyContent> {
        &self.content
    }

    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn from(mut self, input: crate::types::MessageFromType) -> Self {
        self.from = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_from(mut self, input: ::std::option::Option<crate::types::MessageFromType>) -> Self {
        self.from = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_from(&self) -> &::std::option::Option<crate::types::MessageFromType> {
        &self.from
    }

    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.timestamp = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.timestamp = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.timestamp
    }

    /// Adds a key-value pair to `intents`.
    ///
    /// To override the contents of this collection use [`set_intents`](Self::set_intents).
    pub fn intents(
        mut self,
        k: crate::types::IntentType,
        v: ::std::collections::HashMap<::std::string::String, crate::types::IntentDataType>,
    ) -> Self {
        let mut hash_map = self.intents.unwrap_or_default();
        hash_map.insert(k, v);
        self.intents = ::std::option::Option::Some(hash_map);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_intents(
        mut self,
        input: ::std::option::Option<
            ::std::collections::HashMap<
                crate::types::IntentType,
                ::std::collections::HashMap<::std::string::String, crate::types::IntentDataType>,
            >,
        >,
    ) -> Self {
        self.intents = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_intents(
        &self,
    ) -> &::std::option::Option<
        ::std::collections::HashMap<
            crate::types::IntentType,
            ::std::collections::HashMap<::std::string::String, crate::types::IntentDataType>,
        >,
    > {
        &self.intents
    }

    /// Appends an item to `interaction_components`.
    ///
    /// To override the contents of this collection use
    /// [`set_interaction_components`](Self::set_interaction_components).
    ///
    /// List of interaction components.
    pub fn interaction_components(mut self, input: crate::types::InteractionComponent) -> Self {
        let mut v = self.interaction_components.unwrap_or_default();
        v.push(input);
        self.interaction_components = ::std::option::Option::Some(v);
        self
    }

    /// List of interaction components.
    pub fn set_interaction_components(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::InteractionComponent>>,
    ) -> Self {
        self.interaction_components = input;
        self
    }

    /// List of interaction components.
    pub fn get_interaction_components(
        &self,
    ) -> &::std::option::Option<::std::vec::Vec<crate::types::InteractionComponent>> {
        &self.interaction_components
    }

    /// Consumes the builder and constructs a [`Message`](crate::types::Message).
    /// This method will fail if any of the following fields are not set:
    /// - [`utterance_id`](crate::types::builders::MessageBuilder::utterance_id)
    /// - [`r#type`](crate::types::builders::MessageBuilder::type)
    /// - [`format`](crate::types::builders::MessageBuilder::format)
    /// - [`content`](crate::types::builders::MessageBuilder::content)
    /// - [`from`](crate::types::builders::MessageBuilder::from)
    /// - [`timestamp`](crate::types::builders::MessageBuilder::timestamp)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::Message, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Message {
            utterance_id: self.utterance_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "utterance_id",
                    "utterance_id was not specified but it is required when building Message",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building Message",
                )
            })?,
            format: self.format.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "format",
                    "format was not specified but it is required when building Message",
                )
            })?,
            content: self.content.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "content",
                    "content was not specified but it is required when building Message",
                )
            })?,
            from: self.from.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "from",
                    "from was not specified but it is required when building Message",
                )
            })?,
            timestamp: self.timestamp.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "timestamp",
                    "timestamp was not specified but it is required when building Message",
                )
            })?,
            intents: self.intents,
            interaction_components: self.interaction_components,
        })
    }
}
