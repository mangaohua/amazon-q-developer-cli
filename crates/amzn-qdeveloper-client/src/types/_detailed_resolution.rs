// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DetailedResolution {
    #[allow(missing_docs)] // documentation missing in model
    pub resolution: ::std::option::Option<crate::types::Resolutions>,
}
impl DetailedResolution {
    #[allow(missing_docs)] // documentation missing in model
    pub fn resolution(&self) -> ::std::option::Option<&crate::types::Resolutions> {
        self.resolution.as_ref()
    }
}
impl DetailedResolution {
    /// Creates a new builder-style object to manufacture
    /// [`DetailedResolution`](crate::types::DetailedResolution).
    pub fn builder() -> crate::types::builders::DetailedResolutionBuilder {
        crate::types::builders::DetailedResolutionBuilder::default()
    }
}

/// A builder for [`DetailedResolution`](crate::types::DetailedResolution).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DetailedResolutionBuilder {
    pub(crate) resolution: ::std::option::Option<crate::types::Resolutions>,
}
impl DetailedResolutionBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn resolution(mut self, input: crate::types::Resolutions) -> Self {
        self.resolution = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_resolution(mut self, input: ::std::option::Option<crate::types::Resolutions>) -> Self {
        self.resolution = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_resolution(&self) -> &::std::option::Option<crate::types::Resolutions> {
        &self.resolution
    }

    /// Consumes the builder and constructs a
    /// [`DetailedResolution`](crate::types::DetailedResolution).
    pub fn build(self) -> crate::types::DetailedResolution {
        crate::types::DetailedResolution {
            resolution: self.resolution,
        }
    }
}
