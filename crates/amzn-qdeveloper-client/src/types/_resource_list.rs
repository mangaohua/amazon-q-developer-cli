// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Structure representing a list of Items
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResourceList {
    /// Action associated with the list
    pub action: ::std::option::Option<crate::types::Action>,
    /// List of resources
    pub items: ::std::vec::Vec<crate::types::Resource>,
}
impl ResourceList {
    /// Action associated with the list
    pub fn action(&self) -> ::std::option::Option<&crate::types::Action> {
        self.action.as_ref()
    }

    /// List of resources
    pub fn items(&self) -> &[crate::types::Resource] {
        use std::ops::Deref;
        self.items.deref()
    }
}
impl ResourceList {
    /// Creates a new builder-style object to manufacture
    /// [`ResourceList`](crate::types::ResourceList).
    pub fn builder() -> crate::types::builders::ResourceListBuilder {
        crate::types::builders::ResourceListBuilder::default()
    }
}

/// A builder for [`ResourceList`](crate::types::ResourceList).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ResourceListBuilder {
    pub(crate) action: ::std::option::Option<crate::types::Action>,
    pub(crate) items: ::std::option::Option<::std::vec::Vec<crate::types::Resource>>,
}
impl ResourceListBuilder {
    /// Action associated with the list
    pub fn action(mut self, input: crate::types::Action) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }

    /// Action associated with the list
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::Action>) -> Self {
        self.action = input;
        self
    }

    /// Action associated with the list
    pub fn get_action(&self) -> &::std::option::Option<crate::types::Action> {
        &self.action
    }

    /// Appends an item to `items`.
    ///
    /// To override the contents of this collection use [`set_items`](Self::set_items).
    ///
    /// List of resources
    pub fn items(mut self, input: crate::types::Resource) -> Self {
        let mut v = self.items.unwrap_or_default();
        v.push(input);
        self.items = ::std::option::Option::Some(v);
        self
    }

    /// List of resources
    pub fn set_items(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Resource>>) -> Self {
        self.items = input;
        self
    }

    /// List of resources
    pub fn get_items(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Resource>> {
        &self.items
    }

    /// Consumes the builder and constructs a [`ResourceList`](crate::types::ResourceList).
    /// This method will fail if any of the following fields are not set:
    /// - [`items`](crate::types::builders::ResourceListBuilder::items)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::ResourceList, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ResourceList {
            action: self.action,
            items: self.items.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "items",
                    "items was not specified but it is required when building ResourceList",
                )
            })?,
        })
    }
}
