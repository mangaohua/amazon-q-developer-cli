// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Plugin {
    #[allow(missing_docs)] // documentation missing in model
    pub plugin_provider: ::std::string::String,
    #[allow(missing_docs)] // documentation missing in model
    pub plugin_id: ::std::string::String,
}
impl Plugin {
    #[allow(missing_docs)] // documentation missing in model
    pub fn plugin_provider(&self) -> &str {
        use std::ops::Deref;
        self.plugin_provider.deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn plugin_id(&self) -> &str {
        use std::ops::Deref;
        self.plugin_id.deref()
    }
}
impl Plugin {
    /// Creates a new builder-style object to manufacture [`Plugin`](crate::types::Plugin).
    pub fn builder() -> crate::types::builders::PluginBuilder {
        crate::types::builders::PluginBuilder::default()
    }
}

/// A builder for [`Plugin`](crate::types::Plugin).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PluginBuilder {
    pub(crate) plugin_provider: ::std::option::Option<::std::string::String>,
    pub(crate) plugin_id: ::std::option::Option<::std::string::String>,
}
impl PluginBuilder {
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn plugin_provider(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.plugin_provider = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_plugin_provider(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.plugin_provider = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_plugin_provider(&self) -> &::std::option::Option<::std::string::String> {
        &self.plugin_provider
    }

    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn plugin_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.plugin_id = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_plugin_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.plugin_id = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_plugin_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.plugin_id
    }

    /// Consumes the builder and constructs a [`Plugin`](crate::types::Plugin).
    /// This method will fail if any of the following fields are not set:
    /// - [`plugin_provider`](crate::types::builders::PluginBuilder::plugin_provider)
    /// - [`plugin_id`](crate::types::builders::PluginBuilder::plugin_id)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::Plugin, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Plugin {
            plugin_provider: self.plugin_provider.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "plugin_provider",
                    "plugin_provider was not specified but it is required when building Plugin",
                )
            })?,
            plugin_id: self.plugin_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "plugin_id",
                    "plugin_id was not specified but it is required when building Plugin",
                )
            })?,
        })
    }
}
