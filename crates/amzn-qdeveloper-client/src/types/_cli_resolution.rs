// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CliResolution {
    #[allow(missing_docs)] // documentation missing in model
    pub commands: ::std::option::Option<::std::vec::Vec<crate::types::CliCommand>>,
    #[allow(missing_docs)] // documentation missing in model
    pub status: ::std::option::Option<crate::types::StepStatus>,
}
impl CliResolution {
    #[allow(missing_docs)] // documentation missing in model
    /// If no value was sent for this field, a default will be set. If you want to determine if no
    /// value was sent, use `.commands.is_none()`.
    pub fn commands(&self) -> &[crate::types::CliCommand] {
        self.commands.as_deref().unwrap_or_default()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn status(&self) -> ::std::option::Option<&crate::types::StepStatus> {
        self.status.as_ref()
    }
}
impl CliResolution {
    /// Creates a new builder-style object to manufacture
    /// [`CliResolution`](crate::types::CliResolution).
    pub fn builder() -> crate::types::builders::CliResolutionBuilder {
        crate::types::builders::CliResolutionBuilder::default()
    }
}

/// A builder for [`CliResolution`](crate::types::CliResolution).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CliResolutionBuilder {
    pub(crate) commands: ::std::option::Option<::std::vec::Vec<crate::types::CliCommand>>,
    pub(crate) status: ::std::option::Option<crate::types::StepStatus>,
}
impl CliResolutionBuilder {
    /// Appends an item to `commands`.
    ///
    /// To override the contents of this collection use [`set_commands`](Self::set_commands).
    pub fn commands(mut self, input: crate::types::CliCommand) -> Self {
        let mut v = self.commands.unwrap_or_default();
        v.push(input);
        self.commands = ::std::option::Option::Some(v);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_commands(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CliCommand>>) -> Self {
        self.commands = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_commands(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CliCommand>> {
        &self.commands
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn status(mut self, input: crate::types::StepStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::StepStatus>) -> Self {
        self.status = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_status(&self) -> &::std::option::Option<crate::types::StepStatus> {
        &self.status
    }

    /// Consumes the builder and constructs a [`CliResolution`](crate::types::CliResolution).
    pub fn build(self) -> crate::types::CliResolution {
        crate::types::CliResolution {
            commands: self.commands,
            status: self.status,
        }
    }
}
