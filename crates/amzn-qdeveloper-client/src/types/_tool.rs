// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct Tool {
    #[allow(missing_docs)] // documentation missing in model
    pub tool_id: crate::types::ToolId,
    #[allow(missing_docs)] // documentation missing in model
    pub tool_fas_policy_path: ::std::string::String,
    #[allow(missing_docs)] // documentation missing in model
    pub tool_kms_key_arn: ::std::string::String,
}
impl Tool {
    #[allow(missing_docs)] // documentation missing in model
    pub fn tool_id(&self) -> &crate::types::ToolId {
        &self.tool_id
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn tool_fas_policy_path(&self) -> &str {
        use std::ops::Deref;
        self.tool_fas_policy_path.deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn tool_kms_key_arn(&self) -> &str {
        use std::ops::Deref;
        self.tool_kms_key_arn.deref()
    }
}
impl ::std::fmt::Debug for Tool {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("Tool");
        formatter.field("tool_id", &self.tool_id);
        formatter.field("tool_fas_policy_path", &"*** Sensitive Data Redacted ***");
        formatter.field("tool_kms_key_arn", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl Tool {
    /// Creates a new builder-style object to manufacture [`Tool`](crate::types::Tool).
    pub fn builder() -> crate::types::builders::ToolBuilder {
        crate::types::builders::ToolBuilder::default()
    }
}

/// A builder for [`Tool`](crate::types::Tool).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ToolBuilder {
    pub(crate) tool_id: ::std::option::Option<crate::types::ToolId>,
    pub(crate) tool_fas_policy_path: ::std::option::Option<::std::string::String>,
    pub(crate) tool_kms_key_arn: ::std::option::Option<::std::string::String>,
}
impl ToolBuilder {
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn tool_id(mut self, input: crate::types::ToolId) -> Self {
        self.tool_id = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_tool_id(mut self, input: ::std::option::Option<crate::types::ToolId>) -> Self {
        self.tool_id = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_tool_id(&self) -> &::std::option::Option<crate::types::ToolId> {
        &self.tool_id
    }

    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn tool_fas_policy_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tool_fas_policy_path = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_tool_fas_policy_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tool_fas_policy_path = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_tool_fas_policy_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.tool_fas_policy_path
    }

    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn tool_kms_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tool_kms_key_arn = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_tool_kms_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tool_kms_key_arn = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_tool_kms_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.tool_kms_key_arn
    }

    /// Consumes the builder and constructs a [`Tool`](crate::types::Tool).
    /// This method will fail if any of the following fields are not set:
    /// - [`tool_id`](crate::types::builders::ToolBuilder::tool_id)
    /// - [`tool_fas_policy_path`](crate::types::builders::ToolBuilder::tool_fas_policy_path)
    /// - [`tool_kms_key_arn`](crate::types::builders::ToolBuilder::tool_kms_key_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::Tool, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Tool {
            tool_id: self.tool_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "tool_id",
                    "tool_id was not specified but it is required when building Tool",
                )
            })?,
            tool_fas_policy_path: self.tool_fas_policy_path.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "tool_fas_policy_path",
                    "tool_fas_policy_path was not specified but it is required when building Tool",
                )
            })?,
            tool_kms_key_arn: self.tool_kms_key_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "tool_kms_key_arn",
                    "tool_kms_key_arn was not specified but it is required when building Tool",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for ToolBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ToolBuilder");
        formatter.field("tool_id", &self.tool_id);
        formatter.field("tool_fas_policy_path", &"*** Sensitive Data Redacted ***");
        formatter.field("tool_kms_key_arn", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
