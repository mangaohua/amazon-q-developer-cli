// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Resolutions {
    #[allow(missing_docs)] // documentation missing in model
    pub cli: ::std::option::Option<crate::types::CliResolution>,
    #[allow(missing_docs)] // documentation missing in model
    pub cdk: ::std::option::Option<crate::types::CdkResolution>,
    #[allow(missing_docs)] // documentation missing in model
    pub python: ::std::option::Option<crate::types::PythonResolution>,
    #[allow(missing_docs)] // documentation missing in model
    pub manual: ::std::option::Option<::std::vec::Vec<crate::types::ManualResolution>>,
}
impl Resolutions {
    #[allow(missing_docs)] // documentation missing in model
    pub fn cli(&self) -> ::std::option::Option<&crate::types::CliResolution> {
        self.cli.as_ref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn cdk(&self) -> ::std::option::Option<&crate::types::CdkResolution> {
        self.cdk.as_ref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn python(&self) -> ::std::option::Option<&crate::types::PythonResolution> {
        self.python.as_ref()
    }

    #[allow(missing_docs)] // documentation missing in model
    /// If no value was sent for this field, a default will be set. If you want to determine if no
    /// value was sent, use `.manual.is_none()`.
    pub fn manual(&self) -> &[crate::types::ManualResolution] {
        self.manual.as_deref().unwrap_or_default()
    }
}
impl Resolutions {
    /// Creates a new builder-style object to manufacture
    /// [`Resolutions`](crate::types::Resolutions).
    pub fn builder() -> crate::types::builders::ResolutionsBuilder {
        crate::types::builders::ResolutionsBuilder::default()
    }
}

/// A builder for [`Resolutions`](crate::types::Resolutions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ResolutionsBuilder {
    pub(crate) cli: ::std::option::Option<crate::types::CliResolution>,
    pub(crate) cdk: ::std::option::Option<crate::types::CdkResolution>,
    pub(crate) python: ::std::option::Option<crate::types::PythonResolution>,
    pub(crate) manual: ::std::option::Option<::std::vec::Vec<crate::types::ManualResolution>>,
}
impl ResolutionsBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn cli(mut self, input: crate::types::CliResolution) -> Self {
        self.cli = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_cli(mut self, input: ::std::option::Option<crate::types::CliResolution>) -> Self {
        self.cli = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_cli(&self) -> &::std::option::Option<crate::types::CliResolution> {
        &self.cli
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn cdk(mut self, input: crate::types::CdkResolution) -> Self {
        self.cdk = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_cdk(mut self, input: ::std::option::Option<crate::types::CdkResolution>) -> Self {
        self.cdk = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_cdk(&self) -> &::std::option::Option<crate::types::CdkResolution> {
        &self.cdk
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn python(mut self, input: crate::types::PythonResolution) -> Self {
        self.python = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_python(mut self, input: ::std::option::Option<crate::types::PythonResolution>) -> Self {
        self.python = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_python(&self) -> &::std::option::Option<crate::types::PythonResolution> {
        &self.python
    }

    /// Appends an item to `manual`.
    ///
    /// To override the contents of this collection use [`set_manual`](Self::set_manual).
    pub fn manual(mut self, input: crate::types::ManualResolution) -> Self {
        let mut v = self.manual.unwrap_or_default();
        v.push(input);
        self.manual = ::std::option::Option::Some(v);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_manual(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ManualResolution>>) -> Self {
        self.manual = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_manual(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ManualResolution>> {
        &self.manual
    }

    /// Consumes the builder and constructs a [`Resolutions`](crate::types::Resolutions).
    pub fn build(self) -> crate::types::Resolutions {
        crate::types::Resolutions {
            cli: self.cli,
            cdk: self.cdk,
            python: self.python,
            manual: self.manual,
        }
    }
}
