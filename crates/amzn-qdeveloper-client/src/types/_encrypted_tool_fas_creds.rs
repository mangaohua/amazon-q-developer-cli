// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct EncryptedToolFasCreds {
    #[allow(missing_docs)] // documentation missing in model
    pub tool_id: crate::types::ToolId,
    #[allow(missing_docs)] // documentation missing in model
    pub encrypted_tool_fas_creds: ::std::string::String,
}
impl EncryptedToolFasCreds {
    #[allow(missing_docs)] // documentation missing in model
    pub fn tool_id(&self) -> &crate::types::ToolId {
        &self.tool_id
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn encrypted_tool_fas_creds(&self) -> &str {
        use std::ops::Deref;
        self.encrypted_tool_fas_creds.deref()
    }
}
impl ::std::fmt::Debug for EncryptedToolFasCreds {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EncryptedToolFasCreds");
        formatter.field("tool_id", &self.tool_id);
        formatter.field("encrypted_tool_fas_creds", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl EncryptedToolFasCreds {
    /// Creates a new builder-style object to manufacture
    /// [`EncryptedToolFasCreds`](crate::types::EncryptedToolFasCreds).
    pub fn builder() -> crate::types::builders::EncryptedToolFasCredsBuilder {
        crate::types::builders::EncryptedToolFasCredsBuilder::default()
    }
}

/// A builder for [`EncryptedToolFasCreds`](crate::types::EncryptedToolFasCreds).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct EncryptedToolFasCredsBuilder {
    pub(crate) tool_id: ::std::option::Option<crate::types::ToolId>,
    pub(crate) encrypted_tool_fas_creds: ::std::option::Option<::std::string::String>,
}
impl EncryptedToolFasCredsBuilder {
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn tool_id(mut self, input: crate::types::ToolId) -> Self {
        self.tool_id = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_tool_id(mut self, input: ::std::option::Option<crate::types::ToolId>) -> Self {
        self.tool_id = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_tool_id(&self) -> &::std::option::Option<crate::types::ToolId> {
        &self.tool_id
    }

    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn encrypted_tool_fas_creds(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.encrypted_tool_fas_creds = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_encrypted_tool_fas_creds(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.encrypted_tool_fas_creds = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_encrypted_tool_fas_creds(&self) -> &::std::option::Option<::std::string::String> {
        &self.encrypted_tool_fas_creds
    }

    /// Consumes the builder and constructs a
    /// [`EncryptedToolFasCreds`](crate::types::EncryptedToolFasCreds). This method will fail if
    /// any of the following fields are not set:
    /// - [`tool_id`](crate::types::builders::EncryptedToolFasCredsBuilder::tool_id)
    /// - [`encrypted_tool_fas_creds`](crate::types::builders::EncryptedToolFasCredsBuilder::encrypted_tool_fas_creds)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::EncryptedToolFasCreds, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::types::EncryptedToolFasCreds {
            tool_id: self.tool_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "tool_id",
                    "tool_id was not specified but it is required when building EncryptedToolFasCreds",
                )
            })?,
            encrypted_tool_fas_creds: self.encrypted_tool_fas_creds.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "encrypted_tool_fas_creds",
                    "encrypted_tool_fas_creds was not specified but it is required when building EncryptedToolFasCreds",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for EncryptedToolFasCredsBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EncryptedToolFasCredsBuilder");
        formatter.field("tool_id", &self.tool_id);
        formatter.field("encrypted_tool_fas_creds", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
