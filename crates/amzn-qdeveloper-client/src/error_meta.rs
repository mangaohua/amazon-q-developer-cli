// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// This exception is thrown when the user does not have sufficient access to perform this
    /// action.
    AccessDeniedError(crate::types::error::AccessDeniedError),
    /// This exception is thrown when the action to perform could not be completed because the
    /// resource is in a conflicting state.
    ConflictError(crate::types::error::ConflictError),
    #[allow(missing_docs)] // documentation missing in model
    DryRunOperationError(crate::types::error::DryRunOperationError),
    /// This exception is thrown when an unexpected error occurred during the processing of a
    /// request.
    InternalServerError(crate::types::error::InternalServerError),
    /// This exception is thrown when describing a resource that does not exist.
    ResourceNotFoundError(crate::types::error::ResourceNotFoundError),
    #[allow(missing_docs)] // documentation missing in model
    ServiceQuotaExceededError(crate::types::error::ServiceQuotaExceededError),
    /// This exception is thrown when request was denied due to request throttling.
    ThrottlingError(crate::types::error::ThrottlingError),
    /// This exception is thrown when the input fails to satisfy the constraints specified by the
    /// service.
    ValidationError(crate::types::error::ValidationError),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error
    /// code).
    #[deprecated(
        note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
    variable wildcard pattern and check `.code()`:
     \
    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
     \
    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-Error) for what information is available for the error."
    )]
    Unhandled(crate::error::sealed_unhandled::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedError(inner) => inner.fmt(f),
            Error::ConflictError(inner) => inner.fmt(f),
            Error::DryRunOperationError(inner) => inner.fmt(f),
            Error::InternalServerError(inner) => inner.fmt(f),
            Error::ResourceNotFoundError(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededError(inner) => inner.fmt(f),
            Error::ThrottlingError(inner) => inner.fmt(f),
            Error::ValidationError(inner) => inner.fmt(f),
            Error::Unhandled(_) => {
                if let ::std::option::Option::Some(code) =
                    ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
                {
                    write!(f, "unhandled error ({code})")
                } else {
                    f.write_str("unhandled error")
                }
            },
        }
    }
}
impl From<::aws_smithy_types::error::operation::BuildError> for Error {
    fn from(value: ::aws_smithy_types::error::operation::BuildError) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source: value.into(),
            meta: ::std::default::Default::default(),
        })
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for Error {
    fn meta(&self) -> &::aws_smithy_types::error::metadata::ErrorMetadata {
        match self {
            Self::AccessDeniedError(inner) => inner.meta(),
            Self::ConflictError(inner) => inner.meta(),
            Self::DryRunOperationError(inner) => inner.meta(),
            Self::InternalServerError(inner) => inner.meta(),
            Self::ResourceNotFoundError(inner) => inner.meta(),
            Self::ServiceQuotaExceededError(inner) => inner.meta(),
            Self::ThrottlingError(inner) => inner.meta(),
            Self::ValidationError(inner) => inner.meta(),
            Self::Unhandled(inner) => &inner.meta,
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_assignment::CreateAssignmentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_assignment::CreateAssignmentError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_assignment::CreateAssignmentError> for Error {
    fn from(err: crate::operation::create_assignment::CreateAssignmentError) -> Self {
        match err {
            crate::operation::create_assignment::CreateAssignmentError::ResourceNotFoundError(inner) => {
                Error::ResourceNotFoundError(inner)
            },
            crate::operation::create_assignment::CreateAssignmentError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            },
            crate::operation::create_assignment::CreateAssignmentError::AccessDeniedError(inner) => {
                Error::AccessDeniedError(inner)
            },
            crate::operation::create_assignment::CreateAssignmentError::ConflictError(inner) => {
                Error::ConflictError(inner)
            },
            crate::operation::create_assignment::CreateAssignmentError::ValidationError(inner) => {
                Error::ValidationError(inner)
            },
            crate::operation::create_assignment::CreateAssignmentError::ThrottlingError(inner) => {
                Error::ThrottlingError(inner)
            },
            crate::operation::create_assignment::CreateAssignmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_extension::CreateExtensionError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_extension::CreateExtensionError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_extension::CreateExtensionError> for Error {
    fn from(err: crate::operation::create_extension::CreateExtensionError) -> Self {
        match err {
            crate::operation::create_extension::CreateExtensionError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            },
            crate::operation::create_extension::CreateExtensionError::AccessDeniedError(inner) => {
                Error::AccessDeniedError(inner)
            },
            crate::operation::create_extension::CreateExtensionError::ConflictError(inner) => {
                Error::ConflictError(inner)
            },
            crate::operation::create_extension::CreateExtensionError::ValidationError(inner) => {
                Error::ValidationError(inner)
            },
            crate::operation::create_extension::CreateExtensionError::ThrottlingError(inner) => {
                Error::ThrottlingError(inner)
            },
            crate::operation::create_extension::CreateExtensionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_resolution::CreateResolutionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_resolution::CreateResolutionError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_resolution::CreateResolutionError> for Error {
    fn from(err: crate::operation::create_resolution::CreateResolutionError) -> Self {
        match err {
            crate::operation::create_resolution::CreateResolutionError::ResourceNotFoundError(inner) => {
                Error::ResourceNotFoundError(inner)
            },
            crate::operation::create_resolution::CreateResolutionError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            },
            crate::operation::create_resolution::CreateResolutionError::AccessDeniedError(inner) => {
                Error::AccessDeniedError(inner)
            },
            crate::operation::create_resolution::CreateResolutionError::ConflictError(inner) => {
                Error::ConflictError(inner)
            },
            crate::operation::create_resolution::CreateResolutionError::ValidationError(inner) => {
                Error::ValidationError(inner)
            },
            crate::operation::create_resolution::CreateResolutionError::ServiceQuotaExceededError(inner) => {
                Error::ServiceQuotaExceededError(inner)
            },
            crate::operation::create_resolution::CreateResolutionError::ThrottlingError(inner) => {
                Error::ThrottlingError(inner)
            },
            crate::operation::create_resolution::CreateResolutionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_assignment::DeleteAssignmentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_assignment::DeleteAssignmentError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_assignment::DeleteAssignmentError> for Error {
    fn from(err: crate::operation::delete_assignment::DeleteAssignmentError) -> Self {
        match err {
            crate::operation::delete_assignment::DeleteAssignmentError::ResourceNotFoundError(inner) => {
                Error::ResourceNotFoundError(inner)
            },
            crate::operation::delete_assignment::DeleteAssignmentError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            },
            crate::operation::delete_assignment::DeleteAssignmentError::AccessDeniedError(inner) => {
                Error::AccessDeniedError(inner)
            },
            crate::operation::delete_assignment::DeleteAssignmentError::ConflictError(inner) => {
                Error::ConflictError(inner)
            },
            crate::operation::delete_assignment::DeleteAssignmentError::ValidationError(inner) => {
                Error::ValidationError(inner)
            },
            crate::operation::delete_assignment::DeleteAssignmentError::ThrottlingError(inner) => {
                Error::ThrottlingError(inner)
            },
            crate::operation::delete_assignment::DeleteAssignmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_extension::DeleteExtensionError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_extension::DeleteExtensionError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_extension::DeleteExtensionError> for Error {
    fn from(err: crate::operation::delete_extension::DeleteExtensionError) -> Self {
        match err {
            crate::operation::delete_extension::DeleteExtensionError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            },
            crate::operation::delete_extension::DeleteExtensionError::AccessDeniedError(inner) => {
                Error::AccessDeniedError(inner)
            },
            crate::operation::delete_extension::DeleteExtensionError::ValidationError(inner) => {
                Error::ValidationError(inner)
            },
            crate::operation::delete_extension::DeleteExtensionError::ThrottlingError(inner) => {
                Error::ThrottlingError(inner)
            },
            crate::operation::delete_extension::DeleteExtensionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_conversation::GetConversationError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_conversation::GetConversationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_conversation::GetConversationError> for Error {
    fn from(err: crate::operation::get_conversation::GetConversationError) -> Self {
        match err {
            crate::operation::get_conversation::GetConversationError::ResourceNotFoundError(inner) => {
                Error::ResourceNotFoundError(inner)
            },
            crate::operation::get_conversation::GetConversationError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            },
            crate::operation::get_conversation::GetConversationError::AccessDeniedError(inner) => {
                Error::AccessDeniedError(inner)
            },
            crate::operation::get_conversation::GetConversationError::ConflictError(inner) => {
                Error::ConflictError(inner)
            },
            crate::operation::get_conversation::GetConversationError::ValidationError(inner) => {
                Error::ValidationError(inner)
            },
            crate::operation::get_conversation::GetConversationError::ServiceQuotaExceededError(inner) => {
                Error::ServiceQuotaExceededError(inner)
            },
            crate::operation::get_conversation::GetConversationError::ThrottlingError(inner) => {
                Error::ThrottlingError(inner)
            },
            crate::operation::get_conversation::GetConversationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_extension::GetExtensionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_extension::GetExtensionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_extension::GetExtensionError> for Error {
    fn from(err: crate::operation::get_extension::GetExtensionError) -> Self {
        match err {
            crate::operation::get_extension::GetExtensionError::ResourceNotFoundError(inner) => {
                Error::ResourceNotFoundError(inner)
            },
            crate::operation::get_extension::GetExtensionError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            },
            crate::operation::get_extension::GetExtensionError::AccessDeniedError(inner) => {
                Error::AccessDeniedError(inner)
            },
            crate::operation::get_extension::GetExtensionError::ValidationError(inner) => Error::ValidationError(inner),
            crate::operation::get_extension::GetExtensionError::ThrottlingError(inner) => Error::ThrottlingError(inner),
            crate::operation::get_extension::GetExtensionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_identity_metadata::GetIdentityMetadataError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_identity_metadata::GetIdentityMetadataError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_identity_metadata::GetIdentityMetadataError> for Error {
    fn from(err: crate::operation::get_identity_metadata::GetIdentityMetadataError) -> Self {
        match err {
            crate::operation::get_identity_metadata::GetIdentityMetadataError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            },
            crate::operation::get_identity_metadata::GetIdentityMetadataError::AccessDeniedError(inner) => {
                Error::AccessDeniedError(inner)
            },
            crate::operation::get_identity_metadata::GetIdentityMetadataError::ValidationError(inner) => {
                Error::ValidationError(inner)
            },
            crate::operation::get_identity_metadata::GetIdentityMetadataError::ThrottlingError(inner) => {
                Error::ThrottlingError(inner)
            },
            crate::operation::get_identity_metadata::GetIdentityMetadataError::Unhandled(inner) => {
                Error::Unhandled(inner)
            },
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_troubleshooting_results::GetTroubleshootingResultsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_troubleshooting_results::GetTroubleshootingResultsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_troubleshooting_results::GetTroubleshootingResultsError> for Error {
    fn from(err: crate::operation::get_troubleshooting_results::GetTroubleshootingResultsError) -> Self {
        match err {
            crate::operation::get_troubleshooting_results::GetTroubleshootingResultsError::ResourceNotFoundError(inner) => {
                Error::ResourceNotFoundError(inner)
            }
            crate::operation::get_troubleshooting_results::GetTroubleshootingResultsError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::operation::get_troubleshooting_results::GetTroubleshootingResultsError::AccessDeniedError(inner) => {
                Error::AccessDeniedError(inner)
            }
            crate::operation::get_troubleshooting_results::GetTroubleshootingResultsError::ValidationError(inner) => Error::ValidationError(inner),
            crate::operation::get_troubleshooting_results::GetTroubleshootingResultsError::ServiceQuotaExceededError(inner) => {
                Error::ServiceQuotaExceededError(inner)
            }
            crate::operation::get_troubleshooting_results::GetTroubleshootingResultsError::ThrottlingError(inner) => Error::ThrottlingError(inner),
            crate::operation::get_troubleshooting_results::GetTroubleshootingResultsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_conversations::ListConversationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_conversations::ListConversationsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_conversations::ListConversationsError> for Error {
    fn from(err: crate::operation::list_conversations::ListConversationsError) -> Self {
        match err {
            crate::operation::list_conversations::ListConversationsError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            },
            crate::operation::list_conversations::ListConversationsError::AccessDeniedError(inner) => {
                Error::AccessDeniedError(inner)
            },
            crate::operation::list_conversations::ListConversationsError::ValidationError(inner) => {
                Error::ValidationError(inner)
            },
            crate::operation::list_conversations::ListConversationsError::ServiceQuotaExceededError(inner) => {
                Error::ServiceQuotaExceededError(inner)
            },
            crate::operation::list_conversations::ListConversationsError::ThrottlingError(inner) => {
                Error::ThrottlingError(inner)
            },
            crate::operation::list_conversations::ListConversationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_extension_providers::ListExtensionProvidersError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_extension_providers::ListExtensionProvidersError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_extension_providers::ListExtensionProvidersError> for Error {
    fn from(err: crate::operation::list_extension_providers::ListExtensionProvidersError) -> Self {
        match err {
            crate::operation::list_extension_providers::ListExtensionProvidersError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            },
            crate::operation::list_extension_providers::ListExtensionProvidersError::AccessDeniedError(inner) => {
                Error::AccessDeniedError(inner)
            },
            crate::operation::list_extension_providers::ListExtensionProvidersError::ValidationError(inner) => {
                Error::ValidationError(inner)
            },
            crate::operation::list_extension_providers::ListExtensionProvidersError::ThrottlingError(inner) => {
                Error::ThrottlingError(inner)
            },
            crate::operation::list_extension_providers::ListExtensionProvidersError::Unhandled(inner) => {
                Error::Unhandled(inner)
            },
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_extensions::ListExtensionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_extensions::ListExtensionsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_extensions::ListExtensionsError> for Error {
    fn from(err: crate::operation::list_extensions::ListExtensionsError) -> Self {
        match err {
            crate::operation::list_extensions::ListExtensionsError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            },
            crate::operation::list_extensions::ListExtensionsError::AccessDeniedError(inner) => {
                Error::AccessDeniedError(inner)
            },
            crate::operation::list_extensions::ListExtensionsError::ValidationError(inner) => {
                Error::ValidationError(inner)
            },
            crate::operation::list_extensions::ListExtensionsError::ThrottlingError(inner) => {
                Error::ThrottlingError(inner)
            },
            crate::operation::list_extensions::ListExtensionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::pass_request::PassRequestError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::pass_request::PassRequestError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::pass_request::PassRequestError> for Error {
    fn from(err: crate::operation::pass_request::PassRequestError) -> Self {
        match err {
            crate::operation::pass_request::PassRequestError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            },
            crate::operation::pass_request::PassRequestError::AccessDeniedError(inner) => {
                Error::AccessDeniedError(inner)
            },
            crate::operation::pass_request::PassRequestError::ValidationError(inner) => Error::ValidationError(inner),
            crate::operation::pass_request::PassRequestError::ServiceQuotaExceededError(inner) => {
                Error::ServiceQuotaExceededError(inner)
            },
            crate::operation::pass_request::PassRequestError::ThrottlingError(inner) => Error::ThrottlingError(inner),
            crate::operation::pass_request::PassRequestError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::send_message::SendMessageError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::send_message::SendMessageError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::send_message::SendMessageError> for Error {
    fn from(err: crate::operation::send_message::SendMessageError) -> Self {
        match err {
            crate::operation::send_message::SendMessageError::ResourceNotFoundError(inner) => {
                Error::ResourceNotFoundError(inner)
            },
            crate::operation::send_message::SendMessageError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            },
            crate::operation::send_message::SendMessageError::AccessDeniedError(inner) => {
                Error::AccessDeniedError(inner)
            },
            crate::operation::send_message::SendMessageError::ConflictError(inner) => Error::ConflictError(inner),
            crate::operation::send_message::SendMessageError::ValidationError(inner) => Error::ValidationError(inner),
            crate::operation::send_message::SendMessageError::ServiceQuotaExceededError(inner) => {
                Error::ServiceQuotaExceededError(inner)
            },
            crate::operation::send_message::SendMessageError::DryRunOperationError(inner) => {
                Error::DryRunOperationError(inner)
            },
            crate::operation::send_message::SendMessageError::ThrottlingError(inner) => Error::ThrottlingError(inner),
            crate::operation::send_message::SendMessageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_conversation::StartConversationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_conversation::StartConversationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::start_conversation::StartConversationError> for Error {
    fn from(err: crate::operation::start_conversation::StartConversationError) -> Self {
        match err {
            crate::operation::start_conversation::StartConversationError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            },
            crate::operation::start_conversation::StartConversationError::AccessDeniedError(inner) => {
                Error::AccessDeniedError(inner)
            },
            crate::operation::start_conversation::StartConversationError::ConflictError(inner) => {
                Error::ConflictError(inner)
            },
            crate::operation::start_conversation::StartConversationError::ValidationError(inner) => {
                Error::ValidationError(inner)
            },
            crate::operation::start_conversation::StartConversationError::ServiceQuotaExceededError(inner) => {
                Error::ServiceQuotaExceededError(inner)
            },
            crate::operation::start_conversation::StartConversationError::ThrottlingError(inner) => {
                Error::ThrottlingError(inner)
            },
            crate::operation::start_conversation::StartConversationError::DryRunOperationError(inner) => {
                Error::DryRunOperationError(inner)
            },
            crate::operation::start_conversation::StartConversationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_troubleshooting_analysis::StartTroubleshootingAnalysisError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_troubleshooting_analysis::StartTroubleshootingAnalysisError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::start_troubleshooting_analysis::StartTroubleshootingAnalysisError> for Error {
    fn from(err: crate::operation::start_troubleshooting_analysis::StartTroubleshootingAnalysisError) -> Self {
        match err {
            crate::operation::start_troubleshooting_analysis::StartTroubleshootingAnalysisError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::operation::start_troubleshooting_analysis::StartTroubleshootingAnalysisError::AccessDeniedError(inner) => {
                Error::AccessDeniedError(inner)
            }
            crate::operation::start_troubleshooting_analysis::StartTroubleshootingAnalysisError::ValidationError(inner) => {
                Error::ValidationError(inner)
            }
            crate::operation::start_troubleshooting_analysis::StartTroubleshootingAnalysisError::ServiceQuotaExceededError(inner) => {
                Error::ServiceQuotaExceededError(inner)
            }
            crate::operation::start_troubleshooting_analysis::StartTroubleshootingAnalysisError::ThrottlingError(inner) => {
                Error::ThrottlingError(inner)
            }
            crate::operation::start_troubleshooting_analysis::StartTroubleshootingAnalysisError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_troubleshooting_resolution_explanation::StartTroubleshootingResolutionExplanationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_troubleshooting_resolution_explanation::StartTroubleshootingResolutionExplanationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl
    From<crate::operation::start_troubleshooting_resolution_explanation::StartTroubleshootingResolutionExplanationError>
    for Error
{
    fn from(
        err: crate::operation::start_troubleshooting_resolution_explanation::StartTroubleshootingResolutionExplanationError,
    ) -> Self {
        match err {
            crate::operation::start_troubleshooting_resolution_explanation::StartTroubleshootingResolutionExplanationError::ResourceNotFoundError(inner) => Error::ResourceNotFoundError(inner),
            crate::operation::start_troubleshooting_resolution_explanation::StartTroubleshootingResolutionExplanationError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::start_troubleshooting_resolution_explanation::StartTroubleshootingResolutionExplanationError::AccessDeniedError(inner) => Error::AccessDeniedError(inner),
            crate::operation::start_troubleshooting_resolution_explanation::StartTroubleshootingResolutionExplanationError::ConflictError(inner) => Error::ConflictError(inner),
            crate::operation::start_troubleshooting_resolution_explanation::StartTroubleshootingResolutionExplanationError::ValidationError(inner) => Error::ValidationError(inner),
            crate::operation::start_troubleshooting_resolution_explanation::StartTroubleshootingResolutionExplanationError::ServiceQuotaExceededError(inner) => Error::ServiceQuotaExceededError(inner),
            crate::operation::start_troubleshooting_resolution_explanation::StartTroubleshootingResolutionExplanationError::ThrottlingError(inner) => Error::ThrottlingError(inner),
            crate::operation::start_troubleshooting_resolution_explanation::StartTroubleshootingResolutionExplanationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_troubleshooting_command_result::UpdateTroubleshootingCommandResultError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_troubleshooting_command_result::UpdateTroubleshootingCommandResultError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_troubleshooting_command_result::UpdateTroubleshootingCommandResultError> for Error {
    fn from(
        err: crate::operation::update_troubleshooting_command_result::UpdateTroubleshootingCommandResultError,
    ) -> Self {
        match err {
            crate::operation::update_troubleshooting_command_result::UpdateTroubleshootingCommandResultError::ResourceNotFoundError(inner) => {
                Error::ResourceNotFoundError(inner)
            }
            crate::operation::update_troubleshooting_command_result::UpdateTroubleshootingCommandResultError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::operation::update_troubleshooting_command_result::UpdateTroubleshootingCommandResultError::AccessDeniedError(inner) => {
                Error::AccessDeniedError(inner)
            }
            crate::operation::update_troubleshooting_command_result::UpdateTroubleshootingCommandResultError::ValidationError(inner) => {
                Error::ValidationError(inner)
            }
            crate::operation::update_troubleshooting_command_result::UpdateTroubleshootingCommandResultError::ServiceQuotaExceededError(inner) => {
                Error::ServiceQuotaExceededError(inner)
            }
            crate::operation::update_troubleshooting_command_result::UpdateTroubleshootingCommandResultError::ThrottlingError(inner) => {
                Error::ThrottlingError(inner)
            }
            crate::operation::update_troubleshooting_command_result::UpdateTroubleshootingCommandResultError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedError(inner) => inner.source(),
            Error::ConflictError(inner) => inner.source(),
            Error::DryRunOperationError(inner) => inner.source(),
            Error::InternalServerError(inner) => inner.source(),
            Error::ResourceNotFoundError(inner) => inner.source(),
            Error::ServiceQuotaExceededError(inner) => inner.source(),
            Error::ThrottlingError(inner) => inner.source(),
            Error::ValidationError(inner) => inner.source(),
            Error::Unhandled(inner) => ::std::option::Option::Some(&*inner.source),
        }
    }
}
impl ::aws_types::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedError(e) => e.request_id(),
            Self::ConflictError(e) => e.request_id(),
            Self::DryRunOperationError(e) => e.request_id(),
            Self::InternalServerError(e) => e.request_id(),
            Self::ResourceNotFoundError(e) => e.request_id(),
            Self::ServiceQuotaExceededError(e) => e.request_id(),
            Self::ThrottlingError(e) => e.request_id(),
            Self::ValidationError(e) => e.request_id(),
            Self::Unhandled(e) => e.meta.request_id(),
        }
    }
}
