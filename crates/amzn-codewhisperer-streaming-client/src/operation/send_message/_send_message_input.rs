// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Structure to represent a SendMessage request.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SendMessageInput {
    /// Structure to represent the current state of a chat conversation.
    pub conversation_state: ::std::option::Option<crate::types::ConversationState>,
    #[allow(missing_docs)] // documentation missing in model
    pub profile_arn: ::std::option::Option<::std::string::String>,
    /// The origin of the caller
    pub source: ::std::option::Option<crate::types::Origin>,
    #[allow(missing_docs)] // documentation missing in model
    pub dry_run: ::std::option::Option<bool>,
}
impl SendMessageInput {
    /// Structure to represent the current state of a chat conversation.
    pub fn conversation_state(&self) -> ::std::option::Option<&crate::types::ConversationState> {
        self.conversation_state.as_ref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn profile_arn(&self) -> ::std::option::Option<&str> {
        self.profile_arn.as_deref()
    }

    /// The origin of the caller
    pub fn source(&self) -> ::std::option::Option<&crate::types::Origin> {
        self.source.as_ref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
}
impl SendMessageInput {
    /// Creates a new builder-style object to manufacture
    /// [`SendMessageInput`](crate::operation::send_message::SendMessageInput).
    pub fn builder() -> crate::operation::send_message::builders::SendMessageInputBuilder {
        crate::operation::send_message::builders::SendMessageInputBuilder::default()
    }
}

/// A builder for [`SendMessageInput`](crate::operation::send_message::SendMessageInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SendMessageInputBuilder {
    pub(crate) conversation_state: ::std::option::Option<crate::types::ConversationState>,
    pub(crate) profile_arn: ::std::option::Option<::std::string::String>,
    pub(crate) source: ::std::option::Option<crate::types::Origin>,
    pub(crate) dry_run: ::std::option::Option<bool>,
}
impl SendMessageInputBuilder {
    /// Structure to represent the current state of a chat conversation.
    /// This field is required.
    pub fn conversation_state(mut self, input: crate::types::ConversationState) -> Self {
        self.conversation_state = ::std::option::Option::Some(input);
        self
    }

    /// Structure to represent the current state of a chat conversation.
    pub fn set_conversation_state(mut self, input: ::std::option::Option<crate::types::ConversationState>) -> Self {
        self.conversation_state = input;
        self
    }

    /// Structure to represent the current state of a chat conversation.
    pub fn get_conversation_state(&self) -> &::std::option::Option<crate::types::ConversationState> {
        &self.conversation_state
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn profile_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.profile_arn = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_profile_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.profile_arn = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_profile_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.profile_arn
    }

    /// The origin of the caller
    pub fn source(mut self, input: crate::types::Origin) -> Self {
        self.source = ::std::option::Option::Some(input);
        self
    }

    /// The origin of the caller
    pub fn set_source(mut self, input: ::std::option::Option<crate::types::Origin>) -> Self {
        self.source = input;
        self
    }

    /// The origin of the caller
    pub fn get_source(&self) -> &::std::option::Option<crate::types::Origin> {
        &self.source
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }

    /// Consumes the builder and constructs a
    /// [`SendMessageInput`](crate::operation::send_message::SendMessageInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::send_message::SendMessageInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::send_message::SendMessageInput {
            conversation_state: self.conversation_state,
            profile_arn: self.profile_arn,
            source: self.source,
            dry_run: self.dry_run,
        })
    }
}
