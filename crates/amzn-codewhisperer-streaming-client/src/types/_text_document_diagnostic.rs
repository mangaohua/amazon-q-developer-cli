// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Structure to represent metadata about a TextDocument Diagnostic
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct TextDocumentDiagnostic {
    /// Represents a Text Document associated with Diagnostic
    pub document: crate::types::TextDocument,
    /// The range at which the message applies.
    pub range: crate::types::Range,
    /// A human-readable string describing the source of the diagnostic
    pub source: ::std::string::String,
    /// Diagnostic Error type
    pub severity: crate::types::DiagnosticSeverity,
    /// The diagnostic's message.
    pub message: ::std::string::String,
    /// The diagnostic's code, which might appear in the user interface.
    pub code: ::std::option::Option<::std::string::String>,
    /// An optional property to describe the error code.
    pub code_description: ::std::option::Option<crate::types::CodeDescription>,
    /// Additional metadata about the diagnostic.
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::DiagnosticTag>>,
    /// an array of related diagnostic information, e.g. when symbol-names within a scope collide
    /// all definitions can be marked via this property.
    pub related_information: ::std::option::Option<::std::vec::Vec<crate::types::DiagnosticRelatedInformation>>,
    /// A data entry field that is preserved between a `textDocument/publishDiagnostics`
    /// notification and `textDocument/codeAction` request.
    pub data: ::std::option::Option<::std::string::String>,
}
impl TextDocumentDiagnostic {
    /// Represents a Text Document associated with Diagnostic
    pub fn document(&self) -> &crate::types::TextDocument {
        &self.document
    }

    /// The range at which the message applies.
    pub fn range(&self) -> &crate::types::Range {
        &self.range
    }

    /// A human-readable string describing the source of the diagnostic
    pub fn source(&self) -> &str {
        use std::ops::Deref;
        self.source.deref()
    }

    /// Diagnostic Error type
    pub fn severity(&self) -> &crate::types::DiagnosticSeverity {
        &self.severity
    }

    /// The diagnostic's message.
    pub fn message(&self) -> &str {
        use std::ops::Deref;
        self.message.deref()
    }

    /// The diagnostic's code, which might appear in the user interface.
    pub fn code(&self) -> ::std::option::Option<&str> {
        self.code.as_deref()
    }

    /// An optional property to describe the error code.
    pub fn code_description(&self) -> ::std::option::Option<&crate::types::CodeDescription> {
        self.code_description.as_ref()
    }

    /// Additional metadata about the diagnostic.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no
    /// value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::DiagnosticTag] {
        self.tags.as_deref().unwrap_or_default()
    }

    /// an array of related diagnostic information, e.g. when symbol-names within a scope collide
    /// all definitions can be marked via this property.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no
    /// value was sent, use `.related_information.is_none()`.
    pub fn related_information(&self) -> &[crate::types::DiagnosticRelatedInformation] {
        self.related_information.as_deref().unwrap_or_default()
    }

    /// A data entry field that is preserved between a `textDocument/publishDiagnostics`
    /// notification and `textDocument/codeAction` request.
    pub fn data(&self) -> ::std::option::Option<&str> {
        self.data.as_deref()
    }
}
impl ::std::fmt::Debug for TextDocumentDiagnostic {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TextDocumentDiagnostic");
        formatter.field("document", &self.document);
        formatter.field("range", &self.range);
        formatter.field("source", &"*** Sensitive Data Redacted ***");
        formatter.field("severity", &self.severity);
        formatter.field("message", &"*** Sensitive Data Redacted ***");
        formatter.field("code", &"*** Sensitive Data Redacted ***");
        formatter.field("code_description", &self.code_description);
        formatter.field("tags", &self.tags);
        formatter.field("related_information", &self.related_information);
        formatter.field("data", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl TextDocumentDiagnostic {
    /// Creates a new builder-style object to manufacture
    /// [`TextDocumentDiagnostic`](crate::types::TextDocumentDiagnostic).
    pub fn builder() -> crate::types::builders::TextDocumentDiagnosticBuilder {
        crate::types::builders::TextDocumentDiagnosticBuilder::default()
    }
}

/// A builder for [`TextDocumentDiagnostic`](crate::types::TextDocumentDiagnostic).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct TextDocumentDiagnosticBuilder {
    pub(crate) document: ::std::option::Option<crate::types::TextDocument>,
    pub(crate) range: ::std::option::Option<crate::types::Range>,
    pub(crate) source: ::std::option::Option<::std::string::String>,
    pub(crate) severity: ::std::option::Option<crate::types::DiagnosticSeverity>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
    pub(crate) code: ::std::option::Option<::std::string::String>,
    pub(crate) code_description: ::std::option::Option<crate::types::CodeDescription>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::DiagnosticTag>>,
    pub(crate) related_information: ::std::option::Option<::std::vec::Vec<crate::types::DiagnosticRelatedInformation>>,
    pub(crate) data: ::std::option::Option<::std::string::String>,
}
impl TextDocumentDiagnosticBuilder {
    /// Represents a Text Document associated with Diagnostic
    /// This field is required.
    pub fn document(mut self, input: crate::types::TextDocument) -> Self {
        self.document = ::std::option::Option::Some(input);
        self
    }

    /// Represents a Text Document associated with Diagnostic
    pub fn set_document(mut self, input: ::std::option::Option<crate::types::TextDocument>) -> Self {
        self.document = input;
        self
    }

    /// Represents a Text Document associated with Diagnostic
    pub fn get_document(&self) -> &::std::option::Option<crate::types::TextDocument> {
        &self.document
    }

    /// The range at which the message applies.
    /// This field is required.
    pub fn range(mut self, input: crate::types::Range) -> Self {
        self.range = ::std::option::Option::Some(input);
        self
    }

    /// The range at which the message applies.
    pub fn set_range(mut self, input: ::std::option::Option<crate::types::Range>) -> Self {
        self.range = input;
        self
    }

    /// The range at which the message applies.
    pub fn get_range(&self) -> &::std::option::Option<crate::types::Range> {
        &self.range
    }

    /// A human-readable string describing the source of the diagnostic
    /// This field is required.
    pub fn source(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source = ::std::option::Option::Some(input.into());
        self
    }

    /// A human-readable string describing the source of the diagnostic
    pub fn set_source(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source = input;
        self
    }

    /// A human-readable string describing the source of the diagnostic
    pub fn get_source(&self) -> &::std::option::Option<::std::string::String> {
        &self.source
    }

    /// Diagnostic Error type
    /// This field is required.
    pub fn severity(mut self, input: crate::types::DiagnosticSeverity) -> Self {
        self.severity = ::std::option::Option::Some(input);
        self
    }

    /// Diagnostic Error type
    pub fn set_severity(mut self, input: ::std::option::Option<crate::types::DiagnosticSeverity>) -> Self {
        self.severity = input;
        self
    }

    /// Diagnostic Error type
    pub fn get_severity(&self) -> &::std::option::Option<crate::types::DiagnosticSeverity> {
        &self.severity
    }

    /// The diagnostic's message.
    /// This field is required.
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }

    /// The diagnostic's message.
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }

    /// The diagnostic's message.
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }

    /// The diagnostic's code, which might appear in the user interface.
    pub fn code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.code = ::std::option::Option::Some(input.into());
        self
    }

    /// The diagnostic's code, which might appear in the user interface.
    pub fn set_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.code = input;
        self
    }

    /// The diagnostic's code, which might appear in the user interface.
    pub fn get_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.code
    }

    /// An optional property to describe the error code.
    pub fn code_description(mut self, input: crate::types::CodeDescription) -> Self {
        self.code_description = ::std::option::Option::Some(input);
        self
    }

    /// An optional property to describe the error code.
    pub fn set_code_description(mut self, input: ::std::option::Option<crate::types::CodeDescription>) -> Self {
        self.code_description = input;
        self
    }

    /// An optional property to describe the error code.
    pub fn get_code_description(&self) -> &::std::option::Option<crate::types::CodeDescription> {
        &self.code_description
    }

    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// Additional metadata about the diagnostic.
    pub fn tags(mut self, input: crate::types::DiagnosticTag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }

    /// Additional metadata about the diagnostic.
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DiagnosticTag>>) -> Self {
        self.tags = input;
        self
    }

    /// Additional metadata about the diagnostic.
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DiagnosticTag>> {
        &self.tags
    }

    /// Appends an item to `related_information`.
    ///
    /// To override the contents of this collection use
    /// [`set_related_information`](Self::set_related_information).
    ///
    /// an array of related diagnostic information, e.g. when symbol-names within a scope collide
    /// all definitions can be marked via this property.
    pub fn related_information(mut self, input: crate::types::DiagnosticRelatedInformation) -> Self {
        let mut v = self.related_information.unwrap_or_default();
        v.push(input);
        self.related_information = ::std::option::Option::Some(v);
        self
    }

    /// an array of related diagnostic information, e.g. when symbol-names within a scope collide
    /// all definitions can be marked via this property.
    pub fn set_related_information(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::DiagnosticRelatedInformation>>,
    ) -> Self {
        self.related_information = input;
        self
    }

    /// an array of related diagnostic information, e.g. when symbol-names within a scope collide
    /// all definitions can be marked via this property.
    pub fn get_related_information(
        &self,
    ) -> &::std::option::Option<::std::vec::Vec<crate::types::DiagnosticRelatedInformation>> {
        &self.related_information
    }

    /// A data entry field that is preserved between a `textDocument/publishDiagnostics`
    /// notification and `textDocument/codeAction` request.
    pub fn data(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data = ::std::option::Option::Some(input.into());
        self
    }

    /// A data entry field that is preserved between a `textDocument/publishDiagnostics`
    /// notification and `textDocument/codeAction` request.
    pub fn set_data(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data = input;
        self
    }

    /// A data entry field that is preserved between a `textDocument/publishDiagnostics`
    /// notification and `textDocument/codeAction` request.
    pub fn get_data(&self) -> &::std::option::Option<::std::string::String> {
        &self.data
    }

    /// Consumes the builder and constructs a
    /// [`TextDocumentDiagnostic`](crate::types::TextDocumentDiagnostic). This method will fail
    /// if any of the following fields are not set:
    /// - [`document`](crate::types::builders::TextDocumentDiagnosticBuilder::document)
    /// - [`range`](crate::types::builders::TextDocumentDiagnosticBuilder::range)
    /// - [`source`](crate::types::builders::TextDocumentDiagnosticBuilder::source)
    /// - [`severity`](crate::types::builders::TextDocumentDiagnosticBuilder::severity)
    /// - [`message`](crate::types::builders::TextDocumentDiagnosticBuilder::message)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::TextDocumentDiagnostic, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::types::TextDocumentDiagnostic {
            document: self.document.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "document",
                    "document was not specified but it is required when building TextDocumentDiagnostic",
                )
            })?,
            range: self.range.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "range",
                    "range was not specified but it is required when building TextDocumentDiagnostic",
                )
            })?,
            source: self.source.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "source",
                    "source was not specified but it is required when building TextDocumentDiagnostic",
                )
            })?,
            severity: self.severity.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "severity",
                    "severity was not specified but it is required when building TextDocumentDiagnostic",
                )
            })?,
            message: self.message.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "message",
                    "message was not specified but it is required when building TextDocumentDiagnostic",
                )
            })?,
            code: self.code,
            code_description: self.code_description,
            tags: self.tags,
            related_information: self.related_information,
            data: self.data,
        })
    }
}
impl ::std::fmt::Debug for TextDocumentDiagnosticBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TextDocumentDiagnosticBuilder");
        formatter.field("document", &self.document);
        formatter.field("range", &self.range);
        formatter.field("source", &"*** Sensitive Data Redacted ***");
        formatter.field("severity", &self.severity);
        formatter.field("message", &"*** Sensitive Data Redacted ***");
        formatter.field("code", &"*** Sensitive Data Redacted ***");
        formatter.field("code_description", &self.code_description);
        formatter.field("tags", &self.tags);
        formatter.field("related_information", &self.related_information);
        formatter.field("data", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
