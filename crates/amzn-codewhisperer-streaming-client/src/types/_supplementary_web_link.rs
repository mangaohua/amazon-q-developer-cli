// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Represents an additional reference link retured with the Chat message
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct SupplementaryWebLink {
    /// URL of the web reference link.
    pub url: ::std::string::String,
    /// Title of the web reference link.
    pub title: ::std::string::String,
    /// Relevant text snippet from the link.
    pub snippet: ::std::option::Option<::std::string::String>,
}
impl SupplementaryWebLink {
    /// URL of the web reference link.
    pub fn url(&self) -> &str {
        use std::ops::Deref;
        self.url.deref()
    }

    /// Title of the web reference link.
    pub fn title(&self) -> &str {
        use std::ops::Deref;
        self.title.deref()
    }

    /// Relevant text snippet from the link.
    pub fn snippet(&self) -> ::std::option::Option<&str> {
        self.snippet.as_deref()
    }
}
impl ::std::fmt::Debug for SupplementaryWebLink {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SupplementaryWebLink");
        formatter.field("url", &"*** Sensitive Data Redacted ***");
        formatter.field("title", &"*** Sensitive Data Redacted ***");
        formatter.field("snippet", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl SupplementaryWebLink {
    /// Creates a new builder-style object to manufacture
    /// [`SupplementaryWebLink`](crate::types::SupplementaryWebLink).
    pub fn builder() -> crate::types::builders::SupplementaryWebLinkBuilder {
        crate::types::builders::SupplementaryWebLinkBuilder::default()
    }
}

/// A builder for [`SupplementaryWebLink`](crate::types::SupplementaryWebLink).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct SupplementaryWebLinkBuilder {
    pub(crate) url: ::std::option::Option<::std::string::String>,
    pub(crate) title: ::std::option::Option<::std::string::String>,
    pub(crate) snippet: ::std::option::Option<::std::string::String>,
}
impl SupplementaryWebLinkBuilder {
    /// URL of the web reference link.
    /// This field is required.
    pub fn url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.url = ::std::option::Option::Some(input.into());
        self
    }

    /// URL of the web reference link.
    pub fn set_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.url = input;
        self
    }

    /// URL of the web reference link.
    pub fn get_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.url
    }

    /// Title of the web reference link.
    /// This field is required.
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }

    /// Title of the web reference link.
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }

    /// Title of the web reference link.
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }

    /// Relevant text snippet from the link.
    pub fn snippet(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.snippet = ::std::option::Option::Some(input.into());
        self
    }

    /// Relevant text snippet from the link.
    pub fn set_snippet(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.snippet = input;
        self
    }

    /// Relevant text snippet from the link.
    pub fn get_snippet(&self) -> &::std::option::Option<::std::string::String> {
        &self.snippet
    }

    /// Consumes the builder and constructs a
    /// [`SupplementaryWebLink`](crate::types::SupplementaryWebLink). This method will fail if
    /// any of the following fields are not set:
    /// - [`url`](crate::types::builders::SupplementaryWebLinkBuilder::url)
    /// - [`title`](crate::types::builders::SupplementaryWebLinkBuilder::title)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::SupplementaryWebLink, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::types::SupplementaryWebLink {
            url: self.url.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "url",
                    "url was not specified but it is required when building SupplementaryWebLink",
                )
            })?,
            title: self.title.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "title",
                    "title was not specified but it is required when building SupplementaryWebLink",
                )
            })?,
            snippet: self.snippet,
        })
    }
}
impl ::std::fmt::Debug for SupplementaryWebLinkBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SupplementaryWebLinkBuilder");
        formatter.field("url", &"*** Sensitive Data Redacted ***");
        formatter.field("title", &"*** Sensitive Data Redacted ***");
        formatter.field("snippet", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
