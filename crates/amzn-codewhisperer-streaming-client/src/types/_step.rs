// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Structure representing an individual step in a process.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct Step {
    /// A unique identifier for the step. It must be a non-negative integer to ensure each step is
    /// distinct.
    pub id: i32,
    /// Enum representing all possible step states, combining terminal and non-terminal states.
    pub state: crate::types::StepState,
    /// A label for the step, providing a concise description.
    pub label: ::std::string::String,
    /// Optional content providing additional details about the step.
    pub content: ::std::option::Option<::std::vec::Vec<crate::types::StepComponent>>,
}
impl Step {
    /// A unique identifier for the step. It must be a non-negative integer to ensure each step is
    /// distinct.
    pub fn id(&self) -> i32 {
        self.id
    }

    /// Enum representing all possible step states, combining terminal and non-terminal states.
    pub fn state(&self) -> &crate::types::StepState {
        &self.state
    }

    /// A label for the step, providing a concise description.
    pub fn label(&self) -> &str {
        use std::ops::Deref;
        self.label.deref()
    }

    /// Optional content providing additional details about the step.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no
    /// value was sent, use `.content.is_none()`.
    pub fn content(&self) -> &[crate::types::StepComponent] {
        self.content.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for Step {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("Step");
        formatter.field("id", &self.id);
        formatter.field("state", &self.state);
        formatter.field("label", &"*** Sensitive Data Redacted ***");
        formatter.field("content", &self.content);
        formatter.finish()
    }
}
impl Step {
    /// Creates a new builder-style object to manufacture [`Step`](crate::types::Step).
    pub fn builder() -> crate::types::builders::StepBuilder {
        crate::types::builders::StepBuilder::default()
    }
}

/// A builder for [`Step`](crate::types::Step).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct StepBuilder {
    pub(crate) id: ::std::option::Option<i32>,
    pub(crate) state: ::std::option::Option<crate::types::StepState>,
    pub(crate) label: ::std::option::Option<::std::string::String>,
    pub(crate) content: ::std::option::Option<::std::vec::Vec<crate::types::StepComponent>>,
}
impl StepBuilder {
    /// A unique identifier for the step. It must be a non-negative integer to ensure each step is
    /// distinct. This field is required.
    pub fn id(mut self, input: i32) -> Self {
        self.id = ::std::option::Option::Some(input);
        self
    }

    /// A unique identifier for the step. It must be a non-negative integer to ensure each step is
    /// distinct.
    pub fn set_id(mut self, input: ::std::option::Option<i32>) -> Self {
        self.id = input;
        self
    }

    /// A unique identifier for the step. It must be a non-negative integer to ensure each step is
    /// distinct.
    pub fn get_id(&self) -> &::std::option::Option<i32> {
        &self.id
    }

    /// Enum representing all possible step states, combining terminal and non-terminal states.
    /// This field is required.
    pub fn state(mut self, input: crate::types::StepState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }

    /// Enum representing all possible step states, combining terminal and non-terminal states.
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::StepState>) -> Self {
        self.state = input;
        self
    }

    /// Enum representing all possible step states, combining terminal and non-terminal states.
    pub fn get_state(&self) -> &::std::option::Option<crate::types::StepState> {
        &self.state
    }

    /// A label for the step, providing a concise description.
    /// This field is required.
    pub fn label(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.label = ::std::option::Option::Some(input.into());
        self
    }

    /// A label for the step, providing a concise description.
    pub fn set_label(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.label = input;
        self
    }

    /// A label for the step, providing a concise description.
    pub fn get_label(&self) -> &::std::option::Option<::std::string::String> {
        &self.label
    }

    /// Appends an item to `content`.
    ///
    /// To override the contents of this collection use [`set_content`](Self::set_content).
    ///
    /// Optional content providing additional details about the step.
    pub fn content(mut self, input: crate::types::StepComponent) -> Self {
        let mut v = self.content.unwrap_or_default();
        v.push(input);
        self.content = ::std::option::Option::Some(v);
        self
    }

    /// Optional content providing additional details about the step.
    pub fn set_content(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StepComponent>>) -> Self {
        self.content = input;
        self
    }

    /// Optional content providing additional details about the step.
    pub fn get_content(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StepComponent>> {
        &self.content
    }

    /// Consumes the builder and constructs a [`Step`](crate::types::Step).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::StepBuilder::id)
    /// - [`state`](crate::types::builders::StepBuilder::state)
    /// - [`label`](crate::types::builders::StepBuilder::label)
    pub fn build(self) -> ::std::result::Result<crate::types::Step, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Step {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building Step",
                )
            })?,
            state: self.state.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "state",
                    "state was not specified but it is required when building Step",
                )
            })?,
            label: self.label.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "label",
                    "label was not specified but it is required when building Step",
                )
            })?,
            content: self.content,
        })
    }
}
impl ::std::fmt::Debug for StepBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("StepBuilder");
        formatter.field("id", &self.id);
        formatter.field("state", &self.state);
        formatter.field("label", &"*** Sensitive Data Redacted ***");
        formatter.field("content", &self.content);
        formatter.finish()
    }
}
