// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Indicates Range / Span in a Text Document
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Range {
    /// The range's start position.
    pub start: crate::types::Position,
    /// The range's end position.
    pub end: crate::types::Position,
}
impl Range {
    /// The range's start position.
    pub fn start(&self) -> &crate::types::Position {
        &self.start
    }

    /// The range's end position.
    pub fn end(&self) -> &crate::types::Position {
        &self.end
    }
}
impl Range {
    /// Creates a new builder-style object to manufacture [`Range`](crate::types::Range).
    pub fn builder() -> crate::types::builders::RangeBuilder {
        crate::types::builders::RangeBuilder::default()
    }
}

/// A builder for [`Range`](crate::types::Range).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RangeBuilder {
    pub(crate) start: ::std::option::Option<crate::types::Position>,
    pub(crate) end: ::std::option::Option<crate::types::Position>,
}
impl RangeBuilder {
    /// The range's start position.
    /// This field is required.
    pub fn start(mut self, input: crate::types::Position) -> Self {
        self.start = ::std::option::Option::Some(input);
        self
    }

    /// The range's start position.
    pub fn set_start(mut self, input: ::std::option::Option<crate::types::Position>) -> Self {
        self.start = input;
        self
    }

    /// The range's start position.
    pub fn get_start(&self) -> &::std::option::Option<crate::types::Position> {
        &self.start
    }

    /// The range's end position.
    /// This field is required.
    pub fn end(mut self, input: crate::types::Position) -> Self {
        self.end = ::std::option::Option::Some(input);
        self
    }

    /// The range's end position.
    pub fn set_end(mut self, input: ::std::option::Option<crate::types::Position>) -> Self {
        self.end = input;
        self
    }

    /// The range's end position.
    pub fn get_end(&self) -> &::std::option::Option<crate::types::Position> {
        &self.end
    }

    /// Consumes the builder and constructs a [`Range`](crate::types::Range).
    /// This method will fail if any of the following fields are not set:
    /// - [`start`](crate::types::builders::RangeBuilder::start)
    /// - [`end`](crate::types::builders::RangeBuilder::end)
    pub fn build(self) -> ::std::result::Result<crate::types::Range, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Range {
            start: self.start.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "start",
                    "start was not specified but it is required when building Range",
                )
            })?,
            end: self.end.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "end",
                    "end was not specified but it is required when building Range",
                )
            })?,
        })
    }
}
