// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Payload Part
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct BinaryPayloadEvent {
    /// Payload Part's body
    pub bytes: ::std::option::Option<::aws_smithy_types::Blob>,
}
impl BinaryPayloadEvent {
    /// Payload Part's body
    pub fn bytes(&self) -> ::std::option::Option<&::aws_smithy_types::Blob> {
        self.bytes.as_ref()
    }
}
impl ::std::fmt::Debug for BinaryPayloadEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("BinaryPayloadEvent");
        formatter.field("bytes", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl BinaryPayloadEvent {
    /// Creates a new builder-style object to manufacture
    /// [`BinaryPayloadEvent`](crate::types::BinaryPayloadEvent).
    pub fn builder() -> crate::types::builders::BinaryPayloadEventBuilder {
        crate::types::builders::BinaryPayloadEventBuilder::default()
    }
}

/// A builder for [`BinaryPayloadEvent`](crate::types::BinaryPayloadEvent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct BinaryPayloadEventBuilder {
    pub(crate) bytes: ::std::option::Option<::aws_smithy_types::Blob>,
}
impl BinaryPayloadEventBuilder {
    /// Payload Part's body
    pub fn bytes(mut self, input: ::aws_smithy_types::Blob) -> Self {
        self.bytes = ::std::option::Option::Some(input);
        self
    }

    /// Payload Part's body
    pub fn set_bytes(mut self, input: ::std::option::Option<::aws_smithy_types::Blob>) -> Self {
        self.bytes = input;
        self
    }

    /// Payload Part's body
    pub fn get_bytes(&self) -> &::std::option::Option<::aws_smithy_types::Blob> {
        &self.bytes
    }

    /// Consumes the builder and constructs a
    /// [`BinaryPayloadEvent`](crate::types::BinaryPayloadEvent).
    pub fn build(self) -> crate::types::BinaryPayloadEvent {
        crate::types::BinaryPayloadEvent { bytes: self.bytes }
    }
}
impl ::std::fmt::Debug for BinaryPayloadEventBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("BinaryPayloadEventBuilder");
        formatter.field("bytes", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
