// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Represents the state of the Cursor in an Editor
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum CursorState {
    /// Represents a cursor position in a Text Document
    Position(crate::types::Position),
    /// Represents a text selection in a Text Document
    Range(crate::types::Range),
    /// The `Unknown` variant represents cases where new union variant was received. Consider
    /// upgrading the SDK to the latest available version. An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has
    /// not been updated. To investigate this, consider turning on debug logging to print the
    /// raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl CursorState {
    /// Tries to convert the enum instance into [`Position`](crate::types::CursorState::Position),
    /// extracting the inner [`Position`](crate::types::Position). Returns `Err(&Self)` if it
    /// can't be converted.
    pub fn as_position(&self) -> ::std::result::Result<&crate::types::Position, &Self> {
        if let CursorState::Position(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }

    /// Returns true if this is a [`Position`](crate::types::CursorState::Position).
    pub fn is_position(&self) -> bool {
        self.as_position().is_ok()
    }

    /// Tries to convert the enum instance into [`Range`](crate::types::CursorState::Range),
    /// extracting the inner [`Range`](crate::types::Range). Returns `Err(&Self)` if it can't be
    /// converted.
    pub fn as_range(&self) -> ::std::result::Result<&crate::types::Range, &Self> {
        if let CursorState::Range(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }

    /// Returns true if this is a [`Range`](crate::types::CursorState::Range).
    pub fn is_range(&self) -> bool {
        self.as_range().is_ok()
    }

    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
