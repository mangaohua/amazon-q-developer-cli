// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Indicates Cursor postion in a Text Document
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Position {
    /// Line position in a document.
    pub line: i32,
    /// Character offset on a line in a document (zero-based)
    pub character: i32,
}
impl Position {
    /// Line position in a document.
    pub fn line(&self) -> i32 {
        self.line
    }

    /// Character offset on a line in a document (zero-based)
    pub fn character(&self) -> i32 {
        self.character
    }
}
impl Position {
    /// Creates a new builder-style object to manufacture [`Position`](crate::types::Position).
    pub fn builder() -> crate::types::builders::PositionBuilder {
        crate::types::builders::PositionBuilder::default()
    }
}

/// A builder for [`Position`](crate::types::Position).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PositionBuilder {
    pub(crate) line: ::std::option::Option<i32>,
    pub(crate) character: ::std::option::Option<i32>,
}
impl PositionBuilder {
    /// Line position in a document.
    /// This field is required.
    pub fn line(mut self, input: i32) -> Self {
        self.line = ::std::option::Option::Some(input);
        self
    }

    /// Line position in a document.
    pub fn set_line(mut self, input: ::std::option::Option<i32>) -> Self {
        self.line = input;
        self
    }

    /// Line position in a document.
    pub fn get_line(&self) -> &::std::option::Option<i32> {
        &self.line
    }

    /// Character offset on a line in a document (zero-based)
    /// This field is required.
    pub fn character(mut self, input: i32) -> Self {
        self.character = ::std::option::Option::Some(input);
        self
    }

    /// Character offset on a line in a document (zero-based)
    pub fn set_character(mut self, input: ::std::option::Option<i32>) -> Self {
        self.character = input;
        self
    }

    /// Character offset on a line in a document (zero-based)
    pub fn get_character(&self) -> &::std::option::Option<i32> {
        &self.character
    }

    /// Consumes the builder and constructs a [`Position`](crate::types::Position).
    /// This method will fail if any of the following fields are not set:
    /// - [`line`](crate::types::builders::PositionBuilder::line)
    /// - [`character`](crate::types::builders::PositionBuilder::character)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::Position, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Position {
            line: self.line.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "line",
                    "line was not specified but it is required when building Position",
                )
            })?,
            character: self.character.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "character",
                    "character was not specified but it is required when building Position",
                )
            })?,
        })
    }
}
