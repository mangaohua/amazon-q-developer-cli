// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Event for a ToolUse request. Multiple ToolUse requests can be returned from a single request, so
/// each ToolUse has a unique 'toolUseId'.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ToolUseEvent {
    /// The ID for the tool request.
    pub tool_use_id: ::std::string::String,
    /// The name for the tool.
    pub name: ::std::string::String,
    /// Represents the serialized json input for the ToolUse request. This field should be
    /// concatenated until 'stop' is true.
    pub input: ::std::option::Option<::std::string::String>,
    /// This field is true when all of the serialized input for this ToolUse request has been sent.
    pub stop: ::std::option::Option<bool>,
}
impl ToolUseEvent {
    /// The ID for the tool request.
    pub fn tool_use_id(&self) -> &str {
        use std::ops::Deref;
        self.tool_use_id.deref()
    }

    /// The name for the tool.
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }

    /// Represents the serialized json input for the ToolUse request. This field should be
    /// concatenated until 'stop' is true.
    pub fn input(&self) -> ::std::option::Option<&str> {
        self.input.as_deref()
    }

    /// This field is true when all of the serialized input for this ToolUse request has been sent.
    pub fn stop(&self) -> ::std::option::Option<bool> {
        self.stop
    }
}
impl ::std::fmt::Debug for ToolUseEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ToolUseEvent");
        formatter.field("tool_use_id", &self.tool_use_id);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("input", &"*** Sensitive Data Redacted ***");
        formatter.field("stop", &self.stop);
        formatter.finish()
    }
}
impl ToolUseEvent {
    /// Creates a new builder-style object to manufacture
    /// [`ToolUseEvent`](crate::types::ToolUseEvent).
    pub fn builder() -> crate::types::builders::ToolUseEventBuilder {
        crate::types::builders::ToolUseEventBuilder::default()
    }
}

/// A builder for [`ToolUseEvent`](crate::types::ToolUseEvent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ToolUseEventBuilder {
    pub(crate) tool_use_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) input: ::std::option::Option<::std::string::String>,
    pub(crate) stop: ::std::option::Option<bool>,
}
impl ToolUseEventBuilder {
    /// The ID for the tool request.
    /// This field is required.
    pub fn tool_use_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tool_use_id = ::std::option::Option::Some(input.into());
        self
    }

    /// The ID for the tool request.
    pub fn set_tool_use_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tool_use_id = input;
        self
    }

    /// The ID for the tool request.
    pub fn get_tool_use_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.tool_use_id
    }

    /// The name for the tool.
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }

    /// The name for the tool.
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }

    /// The name for the tool.
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }

    /// Represents the serialized json input for the ToolUse request. This field should be
    /// concatenated until 'stop' is true.
    pub fn input(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.input = ::std::option::Option::Some(input.into());
        self
    }

    /// Represents the serialized json input for the ToolUse request. This field should be
    /// concatenated until 'stop' is true.
    pub fn set_input(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.input = input;
        self
    }

    /// Represents the serialized json input for the ToolUse request. This field should be
    /// concatenated until 'stop' is true.
    pub fn get_input(&self) -> &::std::option::Option<::std::string::String> {
        &self.input
    }

    /// This field is true when all of the serialized input for this ToolUse request has been sent.
    pub fn stop(mut self, input: bool) -> Self {
        self.stop = ::std::option::Option::Some(input);
        self
    }

    /// This field is true when all of the serialized input for this ToolUse request has been sent.
    pub fn set_stop(mut self, input: ::std::option::Option<bool>) -> Self {
        self.stop = input;
        self
    }

    /// This field is true when all of the serialized input for this ToolUse request has been sent.
    pub fn get_stop(&self) -> &::std::option::Option<bool> {
        &self.stop
    }

    /// Consumes the builder and constructs a [`ToolUseEvent`](crate::types::ToolUseEvent).
    /// This method will fail if any of the following fields are not set:
    /// - [`tool_use_id`](crate::types::builders::ToolUseEventBuilder::tool_use_id)
    /// - [`name`](crate::types::builders::ToolUseEventBuilder::name)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::ToolUseEvent, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ToolUseEvent {
            tool_use_id: self.tool_use_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "tool_use_id",
                    "tool_use_id was not specified but it is required when building ToolUseEvent",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building ToolUseEvent",
                )
            })?,
            input: self.input,
            stop: self.stop,
        })
    }
}
impl ::std::fmt::Debug for ToolUseEventBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ToolUseEventBuilder");
        formatter.field("tool_use_id", &self.tool_use_id);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("input", &"*** Sensitive Data Redacted ***");
        formatter.field("stop", &self.stop);
        formatter.finish()
    }
}
