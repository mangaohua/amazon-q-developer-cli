// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// An environment variable
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct EnvironmentVariable {
    /// The key of an environment variable
    pub key: ::std::option::Option<::std::string::String>,
    /// The value of an environment variable
    pub value: ::std::option::Option<::std::string::String>,
}
impl EnvironmentVariable {
    /// The key of an environment variable
    pub fn key(&self) -> ::std::option::Option<&str> {
        self.key.as_deref()
    }

    /// The value of an environment variable
    pub fn value(&self) -> ::std::option::Option<&str> {
        self.value.as_deref()
    }
}
impl ::std::fmt::Debug for EnvironmentVariable {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EnvironmentVariable");
        formatter.field("key", &"*** Sensitive Data Redacted ***");
        formatter.field("value", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl EnvironmentVariable {
    /// Creates a new builder-style object to manufacture
    /// [`EnvironmentVariable`](crate::types::EnvironmentVariable).
    pub fn builder() -> crate::types::builders::EnvironmentVariableBuilder {
        crate::types::builders::EnvironmentVariableBuilder::default()
    }
}

/// A builder for [`EnvironmentVariable`](crate::types::EnvironmentVariable).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct EnvironmentVariableBuilder {
    pub(crate) key: ::std::option::Option<::std::string::String>,
    pub(crate) value: ::std::option::Option<::std::string::String>,
}
impl EnvironmentVariableBuilder {
    /// The key of an environment variable
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key = ::std::option::Option::Some(input.into());
        self
    }

    /// The key of an environment variable
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key = input;
        self
    }

    /// The key of an environment variable
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.key
    }

    /// The value of an environment variable
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }

    /// The value of an environment variable
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }

    /// The value of an environment variable
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }

    /// Consumes the builder and constructs a
    /// [`EnvironmentVariable`](crate::types::EnvironmentVariable).
    pub fn build(self) -> crate::types::EnvironmentVariable {
        crate::types::EnvironmentVariable {
            key: self.key,
            value: self.value,
        }
    }
}
impl ::std::fmt::Debug for EnvironmentVariableBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EnvironmentVariableBuilder");
        formatter.field("key", &"*** Sensitive Data Redacted ***");
        formatter.field("value", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
