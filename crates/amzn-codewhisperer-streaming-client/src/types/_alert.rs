// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Structure representing an alert with a type and content.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Alert {
    /// Enum defining types of alerts that can be issued.
    pub r#type: crate::types::AlertType,
    /// Contains the content of the alert, which may include sensitive information.
    pub content: ::std::vec::Vec<crate::types::AlertComponent>,
}
impl Alert {
    /// Enum defining types of alerts that can be issued.
    pub fn r#type(&self) -> &crate::types::AlertType {
        &self.r#type
    }

    /// Contains the content of the alert, which may include sensitive information.
    pub fn content(&self) -> &[crate::types::AlertComponent] {
        use std::ops::Deref;
        self.content.deref()
    }
}
impl Alert {
    /// Creates a new builder-style object to manufacture [`Alert`](crate::types::Alert).
    pub fn builder() -> crate::types::builders::AlertBuilder {
        crate::types::builders::AlertBuilder::default()
    }
}

/// A builder for [`Alert`](crate::types::Alert).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AlertBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::AlertType>,
    pub(crate) content: ::std::option::Option<::std::vec::Vec<crate::types::AlertComponent>>,
}
impl AlertBuilder {
    /// Enum defining types of alerts that can be issued.
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::AlertType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }

    /// Enum defining types of alerts that can be issued.
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::AlertType>) -> Self {
        self.r#type = input;
        self
    }

    /// Enum defining types of alerts that can be issued.
    pub fn get_type(&self) -> &::std::option::Option<crate::types::AlertType> {
        &self.r#type
    }

    /// Appends an item to `content`.
    ///
    /// To override the contents of this collection use [`set_content`](Self::set_content).
    ///
    /// Contains the content of the alert, which may include sensitive information.
    pub fn content(mut self, input: crate::types::AlertComponent) -> Self {
        let mut v = self.content.unwrap_or_default();
        v.push(input);
        self.content = ::std::option::Option::Some(v);
        self
    }

    /// Contains the content of the alert, which may include sensitive information.
    pub fn set_content(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AlertComponent>>) -> Self {
        self.content = input;
        self
    }

    /// Contains the content of the alert, which may include sensitive information.
    pub fn get_content(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AlertComponent>> {
        &self.content
    }

    /// Consumes the builder and constructs a [`Alert`](crate::types::Alert).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::AlertBuilder::type)
    /// - [`content`](crate::types::builders::AlertBuilder::content)
    pub fn build(self) -> ::std::result::Result<crate::types::Alert, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Alert {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building Alert",
                )
            })?,
            content: self.content.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "content",
                    "content was not specified but it is required when building Alert",
                )
            })?,
        })
    }
}
