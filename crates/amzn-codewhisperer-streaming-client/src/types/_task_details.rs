// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Structure containing details about a task.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TaskDetails {
    /// Structure representing an overview of a task, including a label and description.
    pub overview: crate::types::TaskOverview,
    /// Lists the components that can be used to form the task's content.
    pub content: ::std::vec::Vec<crate::types::TaskComponent>,
    /// Optional list of actions associated with the task.
    pub actions: ::std::option::Option<::std::vec::Vec<crate::types::TaskAction>>,
}
impl TaskDetails {
    /// Structure representing an overview of a task, including a label and description.
    pub fn overview(&self) -> &crate::types::TaskOverview {
        &self.overview
    }

    /// Lists the components that can be used to form the task's content.
    pub fn content(&self) -> &[crate::types::TaskComponent] {
        use std::ops::Deref;
        self.content.deref()
    }

    /// Optional list of actions associated with the task.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no
    /// value was sent, use `.actions.is_none()`.
    pub fn actions(&self) -> &[crate::types::TaskAction] {
        self.actions.as_deref().unwrap_or_default()
    }
}
impl TaskDetails {
    /// Creates a new builder-style object to manufacture
    /// [`TaskDetails`](crate::types::TaskDetails).
    pub fn builder() -> crate::types::builders::TaskDetailsBuilder {
        crate::types::builders::TaskDetailsBuilder::default()
    }
}

/// A builder for [`TaskDetails`](crate::types::TaskDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TaskDetailsBuilder {
    pub(crate) overview: ::std::option::Option<crate::types::TaskOverview>,
    pub(crate) content: ::std::option::Option<::std::vec::Vec<crate::types::TaskComponent>>,
    pub(crate) actions: ::std::option::Option<::std::vec::Vec<crate::types::TaskAction>>,
}
impl TaskDetailsBuilder {
    /// Structure representing an overview of a task, including a label and description.
    /// This field is required.
    pub fn overview(mut self, input: crate::types::TaskOverview) -> Self {
        self.overview = ::std::option::Option::Some(input);
        self
    }

    /// Structure representing an overview of a task, including a label and description.
    pub fn set_overview(mut self, input: ::std::option::Option<crate::types::TaskOverview>) -> Self {
        self.overview = input;
        self
    }

    /// Structure representing an overview of a task, including a label and description.
    pub fn get_overview(&self) -> &::std::option::Option<crate::types::TaskOverview> {
        &self.overview
    }

    /// Appends an item to `content`.
    ///
    /// To override the contents of this collection use [`set_content`](Self::set_content).
    ///
    /// Lists the components that can be used to form the task's content.
    pub fn content(mut self, input: crate::types::TaskComponent) -> Self {
        let mut v = self.content.unwrap_or_default();
        v.push(input);
        self.content = ::std::option::Option::Some(v);
        self
    }

    /// Lists the components that can be used to form the task's content.
    pub fn set_content(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TaskComponent>>) -> Self {
        self.content = input;
        self
    }

    /// Lists the components that can be used to form the task's content.
    pub fn get_content(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TaskComponent>> {
        &self.content
    }

    /// Appends an item to `actions`.
    ///
    /// To override the contents of this collection use [`set_actions`](Self::set_actions).
    ///
    /// Optional list of actions associated with the task.
    pub fn actions(mut self, input: crate::types::TaskAction) -> Self {
        let mut v = self.actions.unwrap_or_default();
        v.push(input);
        self.actions = ::std::option::Option::Some(v);
        self
    }

    /// Optional list of actions associated with the task.
    pub fn set_actions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TaskAction>>) -> Self {
        self.actions = input;
        self
    }

    /// Optional list of actions associated with the task.
    pub fn get_actions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TaskAction>> {
        &self.actions
    }

    /// Consumes the builder and constructs a [`TaskDetails`](crate::types::TaskDetails).
    /// This method will fail if any of the following fields are not set:
    /// - [`overview`](crate::types::builders::TaskDetailsBuilder::overview)
    /// - [`content`](crate::types::builders::TaskDetailsBuilder::content)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::TaskDetails, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TaskDetails {
            overview: self.overview.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "overview",
                    "overview was not specified but it is required when building TaskDetails",
                )
            })?,
            content: self.content.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "content",
                    "content was not specified but it is required when building TaskDetails",
                )
            })?,
            actions: self.actions,
        })
    }
}
