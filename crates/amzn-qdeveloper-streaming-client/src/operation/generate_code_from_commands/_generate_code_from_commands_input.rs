// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GenerateCodeFromCommandsInput {
    /// Format of the output - language/format eg. typescript/cdk
    pub output_format: ::std::option::Option<crate::types::OutputFormat>,
    /// CommandInput can be extended to either a list of strings or a single string.
    pub commands: ::std::option::Option<crate::types::CommandInput>,
}
impl GenerateCodeFromCommandsInput {
    /// Format of the output - language/format eg. typescript/cdk
    pub fn output_format(&self) -> ::std::option::Option<&crate::types::OutputFormat> {
        self.output_format.as_ref()
    }

    /// CommandInput can be extended to either a list of strings or a single string.
    pub fn commands(&self) -> ::std::option::Option<&crate::types::CommandInput> {
        self.commands.as_ref()
    }
}
impl GenerateCodeFromCommandsInput {
    /// Creates a new builder-style object to manufacture
    /// [`GenerateCodeFromCommandsInput`](crate::operation::generate_code_from_commands::GenerateCodeFromCommandsInput).
    pub fn builder() -> crate::operation::generate_code_from_commands::builders::GenerateCodeFromCommandsInputBuilder {
        crate::operation::generate_code_from_commands::builders::GenerateCodeFromCommandsInputBuilder::default()
    }
}

/// A builder for
/// [`GenerateCodeFromCommandsInput`](crate::operation::generate_code_from_commands::GenerateCodeFromCommandsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GenerateCodeFromCommandsInputBuilder {
    pub(crate) output_format: ::std::option::Option<crate::types::OutputFormat>,
    pub(crate) commands: ::std::option::Option<crate::types::CommandInput>,
}
impl GenerateCodeFromCommandsInputBuilder {
    /// Format of the output - language/format eg. typescript/cdk
    /// This field is required.
    pub fn output_format(mut self, input: crate::types::OutputFormat) -> Self {
        self.output_format = ::std::option::Option::Some(input);
        self
    }

    /// Format of the output - language/format eg. typescript/cdk
    pub fn set_output_format(mut self, input: ::std::option::Option<crate::types::OutputFormat>) -> Self {
        self.output_format = input;
        self
    }

    /// Format of the output - language/format eg. typescript/cdk
    pub fn get_output_format(&self) -> &::std::option::Option<crate::types::OutputFormat> {
        &self.output_format
    }

    /// CommandInput can be extended to either a list of strings or a single string.
    /// This field is required.
    pub fn commands(mut self, input: crate::types::CommandInput) -> Self {
        self.commands = ::std::option::Option::Some(input);
        self
    }

    /// CommandInput can be extended to either a list of strings or a single string.
    pub fn set_commands(mut self, input: ::std::option::Option<crate::types::CommandInput>) -> Self {
        self.commands = input;
        self
    }

    /// CommandInput can be extended to either a list of strings or a single string.
    pub fn get_commands(&self) -> &::std::option::Option<crate::types::CommandInput> {
        &self.commands
    }

    /// Consumes the builder and constructs a
    /// [`GenerateCodeFromCommandsInput`](crate::operation::generate_code_from_commands::GenerateCodeFromCommandsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::generate_code_from_commands::GenerateCodeFromCommandsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::generate_code_from_commands::GenerateCodeFromCommandsInput {
                output_format: self.output_format,
                commands: self.commands,
            },
        )
    }
}
