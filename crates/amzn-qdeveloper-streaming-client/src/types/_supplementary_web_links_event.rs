// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Streaming Response Event for SupplementaryWebLinks
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SupplementaryWebLinksEvent {
    /// Web References for Assistant Response Message
    pub supplementary_web_links: ::std::option::Option<::std::vec::Vec<crate::types::SupplementaryWebLink>>,
}
impl SupplementaryWebLinksEvent {
    /// Web References for Assistant Response Message
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no
    /// value was sent, use `.supplementary_web_links.is_none()`.
    pub fn supplementary_web_links(&self) -> &[crate::types::SupplementaryWebLink] {
        self.supplementary_web_links.as_deref().unwrap_or_default()
    }
}
impl SupplementaryWebLinksEvent {
    /// Creates a new builder-style object to manufacture
    /// [`SupplementaryWebLinksEvent`](crate::types::SupplementaryWebLinksEvent).
    pub fn builder() -> crate::types::builders::SupplementaryWebLinksEventBuilder {
        crate::types::builders::SupplementaryWebLinksEventBuilder::default()
    }
}

/// A builder for [`SupplementaryWebLinksEvent`](crate::types::SupplementaryWebLinksEvent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SupplementaryWebLinksEventBuilder {
    pub(crate) supplementary_web_links: ::std::option::Option<::std::vec::Vec<crate::types::SupplementaryWebLink>>,
}
impl SupplementaryWebLinksEventBuilder {
    /// Appends an item to `supplementary_web_links`.
    ///
    /// To override the contents of this collection use
    /// [`set_supplementary_web_links`](Self::set_supplementary_web_links).
    ///
    /// Web References for Assistant Response Message
    pub fn supplementary_web_links(mut self, input: crate::types::SupplementaryWebLink) -> Self {
        let mut v = self.supplementary_web_links.unwrap_or_default();
        v.push(input);
        self.supplementary_web_links = ::std::option::Option::Some(v);
        self
    }

    /// Web References for Assistant Response Message
    pub fn set_supplementary_web_links(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::SupplementaryWebLink>>,
    ) -> Self {
        self.supplementary_web_links = input;
        self
    }

    /// Web References for Assistant Response Message
    pub fn get_supplementary_web_links(
        &self,
    ) -> &::std::option::Option<::std::vec::Vec<crate::types::SupplementaryWebLink>> {
        &self.supplementary_web_links
    }

    /// Consumes the builder and constructs a
    /// [`SupplementaryWebLinksEvent`](crate::types::SupplementaryWebLinksEvent).
    pub fn build(self) -> crate::types::SupplementaryWebLinksEvent {
        crate::types::SupplementaryWebLinksEvent {
            supplementary_web_links: self.supplementary_web_links,
        }
    }
}
