// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// A tool result that contains the results for a tool request that was previously made.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ToolResult {
    /// The ID for the tool request.
    pub tool_use_id: ::std::string::String,
    /// Content of the tool result.
    pub content: ::std::vec::Vec<crate::types::ToolResultContentBlock>,
    /// Status of the tools result.
    pub status: ::std::option::Option<crate::types::ToolResultStatus>,
}
impl ToolResult {
    /// The ID for the tool request.
    pub fn tool_use_id(&self) -> &str {
        use std::ops::Deref;
        self.tool_use_id.deref()
    }

    /// Content of the tool result.
    pub fn content(&self) -> &[crate::types::ToolResultContentBlock] {
        use std::ops::Deref;
        self.content.deref()
    }

    /// Status of the tools result.
    pub fn status(&self) -> ::std::option::Option<&crate::types::ToolResultStatus> {
        self.status.as_ref()
    }
}
impl ToolResult {
    /// Creates a new builder-style object to manufacture [`ToolResult`](crate::types::ToolResult).
    pub fn builder() -> crate::types::builders::ToolResultBuilder {
        crate::types::builders::ToolResultBuilder::default()
    }
}

/// A builder for [`ToolResult`](crate::types::ToolResult).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ToolResultBuilder {
    pub(crate) tool_use_id: ::std::option::Option<::std::string::String>,
    pub(crate) content: ::std::option::Option<::std::vec::Vec<crate::types::ToolResultContentBlock>>,
    pub(crate) status: ::std::option::Option<crate::types::ToolResultStatus>,
}
impl ToolResultBuilder {
    /// The ID for the tool request.
    /// This field is required.
    pub fn tool_use_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tool_use_id = ::std::option::Option::Some(input.into());
        self
    }

    /// The ID for the tool request.
    pub fn set_tool_use_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tool_use_id = input;
        self
    }

    /// The ID for the tool request.
    pub fn get_tool_use_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.tool_use_id
    }

    /// Appends an item to `content`.
    ///
    /// To override the contents of this collection use [`set_content`](Self::set_content).
    ///
    /// Content of the tool result.
    pub fn content(mut self, input: crate::types::ToolResultContentBlock) -> Self {
        let mut v = self.content.unwrap_or_default();
        v.push(input);
        self.content = ::std::option::Option::Some(v);
        self
    }

    /// Content of the tool result.
    pub fn set_content(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::ToolResultContentBlock>>,
    ) -> Self {
        self.content = input;
        self
    }

    /// Content of the tool result.
    pub fn get_content(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ToolResultContentBlock>> {
        &self.content
    }

    /// Status of the tools result.
    pub fn status(mut self, input: crate::types::ToolResultStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }

    /// Status of the tools result.
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ToolResultStatus>) -> Self {
        self.status = input;
        self
    }

    /// Status of the tools result.
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ToolResultStatus> {
        &self.status
    }

    /// Consumes the builder and constructs a [`ToolResult`](crate::types::ToolResult).
    /// This method will fail if any of the following fields are not set:
    /// - [`tool_use_id`](crate::types::builders::ToolResultBuilder::tool_use_id)
    /// - [`content`](crate::types::builders::ToolResultBuilder::content)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::ToolResult, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ToolResult {
            tool_use_id: self.tool_use_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "tool_use_id",
                    "tool_use_id was not specified but it is required when building ToolResult",
                )
            })?,
            content: self.content.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "content",
                    "content was not specified but it is required when building ToolResult",
                )
            })?,
            status: self.status,
        })
    }
}
