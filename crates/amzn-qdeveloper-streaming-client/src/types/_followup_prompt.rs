// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Followup Prompt for the Assistant Response
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct FollowupPrompt {
    /// The content of the text message in markdown format.
    pub content: ::std::string::String,
    /// User Intent
    pub user_intent: ::std::option::Option<crate::types::UserIntent>,
}
impl FollowupPrompt {
    /// The content of the text message in markdown format.
    pub fn content(&self) -> &str {
        use std::ops::Deref;
        self.content.deref()
    }

    /// User Intent
    pub fn user_intent(&self) -> ::std::option::Option<&crate::types::UserIntent> {
        self.user_intent.as_ref()
    }
}
impl ::std::fmt::Debug for FollowupPrompt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("FollowupPrompt");
        formatter.field("content", &"*** Sensitive Data Redacted ***");
        formatter.field("user_intent", &self.user_intent);
        formatter.finish()
    }
}
impl FollowupPrompt {
    /// Creates a new builder-style object to manufacture
    /// [`FollowupPrompt`](crate::types::FollowupPrompt).
    pub fn builder() -> crate::types::builders::FollowupPromptBuilder {
        crate::types::builders::FollowupPromptBuilder::default()
    }
}

/// A builder for [`FollowupPrompt`](crate::types::FollowupPrompt).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct FollowupPromptBuilder {
    pub(crate) content: ::std::option::Option<::std::string::String>,
    pub(crate) user_intent: ::std::option::Option<crate::types::UserIntent>,
}
impl FollowupPromptBuilder {
    /// The content of the text message in markdown format.
    /// This field is required.
    pub fn content(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content = ::std::option::Option::Some(input.into());
        self
    }

    /// The content of the text message in markdown format.
    pub fn set_content(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content = input;
        self
    }

    /// The content of the text message in markdown format.
    pub fn get_content(&self) -> &::std::option::Option<::std::string::String> {
        &self.content
    }

    /// User Intent
    pub fn user_intent(mut self, input: crate::types::UserIntent) -> Self {
        self.user_intent = ::std::option::Option::Some(input);
        self
    }

    /// User Intent
    pub fn set_user_intent(mut self, input: ::std::option::Option<crate::types::UserIntent>) -> Self {
        self.user_intent = input;
        self
    }

    /// User Intent
    pub fn get_user_intent(&self) -> &::std::option::Option<crate::types::UserIntent> {
        &self.user_intent
    }

    /// Consumes the builder and constructs a [`FollowupPrompt`](crate::types::FollowupPrompt).
    /// This method will fail if any of the following fields are not set:
    /// - [`content`](crate::types::builders::FollowupPromptBuilder::content)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::FollowupPrompt, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FollowupPrompt {
            content: self.content.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "content",
                    "content was not specified but it is required when building FollowupPrompt",
                )
            })?,
            user_intent: self.user_intent,
        })
    }
}
impl ::std::fmt::Debug for FollowupPromptBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("FollowupPromptBuilder");
        formatter.field("content", &"*** Sensitive Data Redacted ***");
        formatter.field("user_intent", &self.user_intent);
        formatter.finish()
    }
}
