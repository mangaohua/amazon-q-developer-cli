// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Represents a location inside a resource, such as a line inside a text file.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct DiagnosticLocation {
    #[allow(missing_docs)] // documentation missing in model
    pub uri: ::std::string::String,
    /// Indicates Range / Span in a Text Document
    pub range: crate::types::Range,
}
impl DiagnosticLocation {
    #[allow(missing_docs)] // documentation missing in model
    pub fn uri(&self) -> &str {
        use std::ops::Deref;
        self.uri.deref()
    }

    /// Indicates Range / Span in a Text Document
    pub fn range(&self) -> &crate::types::Range {
        &self.range
    }
}
impl ::std::fmt::Debug for DiagnosticLocation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DiagnosticLocation");
        formatter.field("uri", &"*** Sensitive Data Redacted ***");
        formatter.field("range", &self.range);
        formatter.finish()
    }
}
impl DiagnosticLocation {
    /// Creates a new builder-style object to manufacture
    /// [`DiagnosticLocation`](crate::types::DiagnosticLocation).
    pub fn builder() -> crate::types::builders::DiagnosticLocationBuilder {
        crate::types::builders::DiagnosticLocationBuilder::default()
    }
}

/// A builder for [`DiagnosticLocation`](crate::types::DiagnosticLocation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct DiagnosticLocationBuilder {
    pub(crate) uri: ::std::option::Option<::std::string::String>,
    pub(crate) range: ::std::option::Option<crate::types::Range>,
}
impl DiagnosticLocationBuilder {
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.uri = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.uri = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.uri
    }

    /// Indicates Range / Span in a Text Document
    /// This field is required.
    pub fn range(mut self, input: crate::types::Range) -> Self {
        self.range = ::std::option::Option::Some(input);
        self
    }

    /// Indicates Range / Span in a Text Document
    pub fn set_range(mut self, input: ::std::option::Option<crate::types::Range>) -> Self {
        self.range = input;
        self
    }

    /// Indicates Range / Span in a Text Document
    pub fn get_range(&self) -> &::std::option::Option<crate::types::Range> {
        &self.range
    }

    /// Consumes the builder and constructs a
    /// [`DiagnosticLocation`](crate::types::DiagnosticLocation). This method will fail if any
    /// of the following fields are not set:
    /// - [`uri`](crate::types::builders::DiagnosticLocationBuilder::uri)
    /// - [`range`](crate::types::builders::DiagnosticLocationBuilder::range)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::DiagnosticLocation, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DiagnosticLocation {
            uri: self.uri.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "uri",
                    "uri was not specified but it is required when building DiagnosticLocation",
                )
            })?,
            range: self.range.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "range",
                    "range was not specified but it is required when building DiagnosticLocation",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for DiagnosticLocationBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DiagnosticLocationBuilder");
        formatter.field("uri", &"*** Sensitive Data Redacted ***");
        formatter.field("range", &self.range);
        formatter.finish()
    }
}
