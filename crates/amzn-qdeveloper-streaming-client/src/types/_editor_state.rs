// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Represents the state of an Editor
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EditorState {
    /// Represents currently edited file
    pub document: ::std::option::Option<crate::types::TextDocument>,
    /// Position of the cursor
    pub cursor_state: ::std::option::Option<crate::types::CursorState>,
    /// Represents IDE provided relevant files
    pub relevant_documents: ::std::option::Option<::std::vec::Vec<crate::types::RelevantTextDocument>>,
    /// Whether service should use relevant document in prompt
    pub use_relevant_documents: ::std::option::Option<bool>,
    /// Represents IDE provided list of workspace folders
    pub workspace_folders: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl EditorState {
    /// Represents currently edited file
    pub fn document(&self) -> ::std::option::Option<&crate::types::TextDocument> {
        self.document.as_ref()
    }

    /// Position of the cursor
    pub fn cursor_state(&self) -> ::std::option::Option<&crate::types::CursorState> {
        self.cursor_state.as_ref()
    }

    /// Represents IDE provided relevant files
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no
    /// value was sent, use `.relevant_documents.is_none()`.
    pub fn relevant_documents(&self) -> &[crate::types::RelevantTextDocument] {
        self.relevant_documents.as_deref().unwrap_or_default()
    }

    /// Whether service should use relevant document in prompt
    pub fn use_relevant_documents(&self) -> ::std::option::Option<bool> {
        self.use_relevant_documents
    }

    /// Represents IDE provided list of workspace folders
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no
    /// value was sent, use `.workspace_folders.is_none()`.
    pub fn workspace_folders(&self) -> &[::std::string::String] {
        self.workspace_folders.as_deref().unwrap_or_default()
    }
}
impl EditorState {
    /// Creates a new builder-style object to manufacture
    /// [`EditorState`](crate::types::EditorState).
    pub fn builder() -> crate::types::builders::EditorStateBuilder {
        crate::types::builders::EditorStateBuilder::default()
    }
}

/// A builder for [`EditorState`](crate::types::EditorState).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EditorStateBuilder {
    pub(crate) document: ::std::option::Option<crate::types::TextDocument>,
    pub(crate) cursor_state: ::std::option::Option<crate::types::CursorState>,
    pub(crate) relevant_documents: ::std::option::Option<::std::vec::Vec<crate::types::RelevantTextDocument>>,
    pub(crate) use_relevant_documents: ::std::option::Option<bool>,
    pub(crate) workspace_folders: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl EditorStateBuilder {
    /// Represents currently edited file
    pub fn document(mut self, input: crate::types::TextDocument) -> Self {
        self.document = ::std::option::Option::Some(input);
        self
    }

    /// Represents currently edited file
    pub fn set_document(mut self, input: ::std::option::Option<crate::types::TextDocument>) -> Self {
        self.document = input;
        self
    }

    /// Represents currently edited file
    pub fn get_document(&self) -> &::std::option::Option<crate::types::TextDocument> {
        &self.document
    }

    /// Position of the cursor
    pub fn cursor_state(mut self, input: crate::types::CursorState) -> Self {
        self.cursor_state = ::std::option::Option::Some(input);
        self
    }

    /// Position of the cursor
    pub fn set_cursor_state(mut self, input: ::std::option::Option<crate::types::CursorState>) -> Self {
        self.cursor_state = input;
        self
    }

    /// Position of the cursor
    pub fn get_cursor_state(&self) -> &::std::option::Option<crate::types::CursorState> {
        &self.cursor_state
    }

    /// Appends an item to `relevant_documents`.
    ///
    /// To override the contents of this collection use
    /// [`set_relevant_documents`](Self::set_relevant_documents).
    ///
    /// Represents IDE provided relevant files
    pub fn relevant_documents(mut self, input: crate::types::RelevantTextDocument) -> Self {
        let mut v = self.relevant_documents.unwrap_or_default();
        v.push(input);
        self.relevant_documents = ::std::option::Option::Some(v);
        self
    }

    /// Represents IDE provided relevant files
    pub fn set_relevant_documents(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::RelevantTextDocument>>,
    ) -> Self {
        self.relevant_documents = input;
        self
    }

    /// Represents IDE provided relevant files
    pub fn get_relevant_documents(
        &self,
    ) -> &::std::option::Option<::std::vec::Vec<crate::types::RelevantTextDocument>> {
        &self.relevant_documents
    }

    /// Whether service should use relevant document in prompt
    pub fn use_relevant_documents(mut self, input: bool) -> Self {
        self.use_relevant_documents = ::std::option::Option::Some(input);
        self
    }

    /// Whether service should use relevant document in prompt
    pub fn set_use_relevant_documents(mut self, input: ::std::option::Option<bool>) -> Self {
        self.use_relevant_documents = input;
        self
    }

    /// Whether service should use relevant document in prompt
    pub fn get_use_relevant_documents(&self) -> &::std::option::Option<bool> {
        &self.use_relevant_documents
    }

    /// Appends an item to `workspace_folders`.
    ///
    /// To override the contents of this collection use
    /// [`set_workspace_folders`](Self::set_workspace_folders).
    ///
    /// Represents IDE provided list of workspace folders
    pub fn workspace_folders(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.workspace_folders.unwrap_or_default();
        v.push(input.into());
        self.workspace_folders = ::std::option::Option::Some(v);
        self
    }

    /// Represents IDE provided list of workspace folders
    pub fn set_workspace_folders(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    ) -> Self {
        self.workspace_folders = input;
        self
    }

    /// Represents IDE provided list of workspace folders
    pub fn get_workspace_folders(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.workspace_folders
    }

    /// Consumes the builder and constructs a [`EditorState`](crate::types::EditorState).
    pub fn build(self) -> crate::types::EditorState {
        crate::types::EditorState {
            document: self.document,
            cursor_state: self.cursor_state,
            relevant_documents: self.relevant_documents,
            use_relevant_documents: self.use_relevant_documents,
            workspace_folders: self.workspace_folders,
        }
    }
}
