// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Structure representing a resource item
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct Resource {
    /// Card title.
    pub title: ::std::string::String,
    /// Link for the resource item
    pub link: ::std::string::String,
    /// Short text about that resource for example Region: us-east-1
    pub description: ::std::string::String,
    /// Resource type e.g AWS EC2
    pub r#type: ::std::string::String,
    /// Amazon resource number e.g arn:aws:aec:.....
    pub arn: ::std::string::String,
    /// A stringified object
    pub resource_json_string: ::std::string::String,
}
impl Resource {
    /// Card title.
    pub fn title(&self) -> &str {
        use std::ops::Deref;
        self.title.deref()
    }

    /// Link for the resource item
    pub fn link(&self) -> &str {
        use std::ops::Deref;
        self.link.deref()
    }

    /// Short text about that resource for example Region: us-east-1
    pub fn description(&self) -> &str {
        use std::ops::Deref;
        self.description.deref()
    }

    /// Resource type e.g AWS EC2
    pub fn r#type(&self) -> &str {
        use std::ops::Deref;
        self.r#type.deref()
    }

    /// Amazon resource number e.g arn:aws:aec:.....
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }

    /// A stringified object
    pub fn resource_json_string(&self) -> &str {
        use std::ops::Deref;
        self.resource_json_string.deref()
    }
}
impl ::std::fmt::Debug for Resource {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("Resource");
        formatter.field("title", &"*** Sensitive Data Redacted ***");
        formatter.field("link", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &"*** Sensitive Data Redacted ***");
        formatter.field("arn", &"*** Sensitive Data Redacted ***");
        formatter.field("resource_json_string", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl Resource {
    /// Creates a new builder-style object to manufacture [`Resource`](crate::types::Resource).
    pub fn builder() -> crate::types::builders::ResourceBuilder {
        crate::types::builders::ResourceBuilder::default()
    }
}

/// A builder for [`Resource`](crate::types::Resource).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ResourceBuilder {
    pub(crate) title: ::std::option::Option<::std::string::String>,
    pub(crate) link: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) resource_json_string: ::std::option::Option<::std::string::String>,
}
impl ResourceBuilder {
    /// Card title.
    /// This field is required.
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }

    /// Card title.
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }

    /// Card title.
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }

    /// Link for the resource item
    /// This field is required.
    pub fn link(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.link = ::std::option::Option::Some(input.into());
        self
    }

    /// Link for the resource item
    pub fn set_link(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.link = input;
        self
    }

    /// Link for the resource item
    pub fn get_link(&self) -> &::std::option::Option<::std::string::String> {
        &self.link
    }

    /// Short text about that resource for example Region: us-east-1
    /// This field is required.
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }

    /// Short text about that resource for example Region: us-east-1
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }

    /// Short text about that resource for example Region: us-east-1
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }

    /// Resource type e.g AWS EC2
    /// This field is required.
    pub fn r#type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.r#type = ::std::option::Option::Some(input.into());
        self
    }

    /// Resource type e.g AWS EC2
    pub fn set_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.r#type = input;
        self
    }

    /// Resource type e.g AWS EC2
    pub fn get_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.r#type
    }

    /// Amazon resource number e.g arn:aws:aec:.....
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }

    /// Amazon resource number e.g arn:aws:aec:.....
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }

    /// Amazon resource number e.g arn:aws:aec:.....
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }

    /// A stringified object
    /// This field is required.
    pub fn resource_json_string(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_json_string = ::std::option::Option::Some(input.into());
        self
    }

    /// A stringified object
    pub fn set_resource_json_string(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_json_string = input;
        self
    }

    /// A stringified object
    pub fn get_resource_json_string(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_json_string
    }

    /// Consumes the builder and constructs a [`Resource`](crate::types::Resource).
    /// This method will fail if any of the following fields are not set:
    /// - [`title`](crate::types::builders::ResourceBuilder::title)
    /// - [`link`](crate::types::builders::ResourceBuilder::link)
    /// - [`description`](crate::types::builders::ResourceBuilder::description)
    /// - [`r#type`](crate::types::builders::ResourceBuilder::type)
    /// - [`arn`](crate::types::builders::ResourceBuilder::arn)
    /// - [`resource_json_string`](crate::types::builders::ResourceBuilder::resource_json_string)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::Resource, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Resource {
            title: self.title.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "title",
                    "title was not specified but it is required when building Resource",
                )
            })?,
            link: self.link.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "link",
                    "link was not specified but it is required when building Resource",
                )
            })?,
            description: self.description.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "description",
                    "description was not specified but it is required when building Resource",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building Resource",
                )
            })?,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building Resource",
                )
            })?,
            resource_json_string: self.resource_json_string.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "resource_json_string",
                    "resource_json_string was not specified but it is required when building Resource",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for ResourceBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ResourceBuilder");
        formatter.field("title", &"*** Sensitive Data Redacted ***");
        formatter.field("link", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &"*** Sensitive Data Redacted ***");
        formatter.field("arn", &"*** Sensitive Data Redacted ***");
        formatter.field("resource_json_string", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
