// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Streaming response event for generated code text.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CodeEvent {
    /// Generated code snippet.
    pub content: ::std::string::String,
}
impl CodeEvent {
    /// Generated code snippet.
    pub fn content(&self) -> &str {
        use std::ops::Deref;
        self.content.deref()
    }
}
impl ::std::fmt::Debug for CodeEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CodeEvent");
        formatter.field("content", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl CodeEvent {
    /// Creates a new builder-style object to manufacture [`CodeEvent`](crate::types::CodeEvent).
    pub fn builder() -> crate::types::builders::CodeEventBuilder {
        crate::types::builders::CodeEventBuilder::default()
    }
}

/// A builder for [`CodeEvent`](crate::types::CodeEvent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CodeEventBuilder {
    pub(crate) content: ::std::option::Option<::std::string::String>,
}
impl CodeEventBuilder {
    /// Generated code snippet.
    /// This field is required.
    pub fn content(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content = ::std::option::Option::Some(input.into());
        self
    }

    /// Generated code snippet.
    pub fn set_content(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content = input;
        self
    }

    /// Generated code snippet.
    pub fn get_content(&self) -> &::std::option::Option<::std::string::String> {
        &self.content
    }

    /// Consumes the builder and constructs a [`CodeEvent`](crate::types::CodeEvent).
    /// This method will fail if any of the following fields are not set:
    /// - [`content`](crate::types::builders::CodeEventBuilder::content)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::CodeEvent, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CodeEvent {
            content: self.content.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "content",
                    "content was not specified but it is required when building CodeEvent",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for CodeEventBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CodeEventBuilder");
        formatter.field("content", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
