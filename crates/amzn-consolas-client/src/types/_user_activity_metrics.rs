// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UserActivityMetrics {
    #[allow(missing_docs)] // documentation missing in model
    pub active_user_count: ::std::option::Option<i64>,
}
impl UserActivityMetrics {
    #[allow(missing_docs)] // documentation missing in model
    pub fn active_user_count(&self) -> ::std::option::Option<i64> {
        self.active_user_count
    }
}
impl UserActivityMetrics {
    /// Creates a new builder-style object to manufacture
    /// [`UserActivityMetrics`](crate::types::UserActivityMetrics).
    pub fn builder() -> crate::types::builders::UserActivityMetricsBuilder {
        crate::types::builders::UserActivityMetricsBuilder::default()
    }
}

/// A builder for [`UserActivityMetrics`](crate::types::UserActivityMetrics).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UserActivityMetricsBuilder {
    pub(crate) active_user_count: ::std::option::Option<i64>,
}
impl UserActivityMetricsBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn active_user_count(mut self, input: i64) -> Self {
        self.active_user_count = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_active_user_count(mut self, input: ::std::option::Option<i64>) -> Self {
        self.active_user_count = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_active_user_count(&self) -> &::std::option::Option<i64> {
        &self.active_user_count
    }

    /// Consumes the builder and constructs a
    /// [`UserActivityMetrics`](crate::types::UserActivityMetrics).
    pub fn build(self) -> crate::types::UserActivityMetrics {
        crate::types::UserActivityMetrics {
            active_user_count: self.active_user_count,
        }
    }
}
