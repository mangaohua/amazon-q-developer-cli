// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct SupplementalContext {
    #[allow(missing_docs)] // documentation missing in model
    pub file_path: ::std::string::String,
    #[allow(missing_docs)] // documentation missing in model
    pub content: ::std::string::String,
}
impl SupplementalContext {
    #[allow(missing_docs)] // documentation missing in model
    pub fn file_path(&self) -> &str {
        use std::ops::Deref;
        self.file_path.deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn content(&self) -> &str {
        use std::ops::Deref;
        self.content.deref()
    }
}
impl ::std::fmt::Debug for SupplementalContext {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SupplementalContext");
        formatter.field("file_path", &"*** Sensitive Data Redacted ***");
        formatter.field("content", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl SupplementalContext {
    /// Creates a new builder-style object to manufacture
    /// [`SupplementalContext`](crate::types::SupplementalContext).
    pub fn builder() -> crate::types::builders::SupplementalContextBuilder {
        crate::types::builders::SupplementalContextBuilder::default()
    }
}

/// A builder for [`SupplementalContext`](crate::types::SupplementalContext).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct SupplementalContextBuilder {
    pub(crate) file_path: ::std::option::Option<::std::string::String>,
    pub(crate) content: ::std::option::Option<::std::string::String>,
}
impl SupplementalContextBuilder {
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn file_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.file_path = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_file_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.file_path = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_file_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.file_path
    }

    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn content(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_content(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_content(&self) -> &::std::option::Option<::std::string::String> {
        &self.content
    }

    /// Consumes the builder and constructs a
    /// [`SupplementalContext`](crate::types::SupplementalContext). This method will fail if any
    /// of the following fields are not set:
    /// - [`file_path`](crate::types::builders::SupplementalContextBuilder::file_path)
    /// - [`content`](crate::types::builders::SupplementalContextBuilder::content)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::SupplementalContext, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::types::SupplementalContext {
            file_path: self.file_path.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "file_path",
                    "file_path was not specified but it is required when building SupplementalContext",
                )
            })?,
            content: self.content.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "content",
                    "content was not specified but it is required when building SupplementalContext",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for SupplementalContextBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SupplementalContextBuilder");
        formatter.field("file_path", &"*** Sensitive Data Redacted ***");
        formatter.field("content", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
