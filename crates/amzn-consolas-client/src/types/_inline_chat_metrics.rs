// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InlineChatMetrics {
    #[allow(missing_docs)] // documentation missing in model
    pub accepted_num_suggestion_add_lines: ::std::option::Option<i64>,
    #[allow(missing_docs)] // documentation missing in model
    pub total_num_suggestion_add_lines: ::std::option::Option<i64>,
    #[allow(missing_docs)] // documentation missing in model
    pub suggestions_count: ::std::option::Option<i64>,
    #[allow(missing_docs)] // documentation missing in model
    pub acceptance_count: ::std::option::Option<i64>,
}
impl InlineChatMetrics {
    #[allow(missing_docs)] // documentation missing in model
    pub fn accepted_num_suggestion_add_lines(&self) -> ::std::option::Option<i64> {
        self.accepted_num_suggestion_add_lines
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn total_num_suggestion_add_lines(&self) -> ::std::option::Option<i64> {
        self.total_num_suggestion_add_lines
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn suggestions_count(&self) -> ::std::option::Option<i64> {
        self.suggestions_count
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn acceptance_count(&self) -> ::std::option::Option<i64> {
        self.acceptance_count
    }
}
impl InlineChatMetrics {
    /// Creates a new builder-style object to manufacture
    /// [`InlineChatMetrics`](crate::types::InlineChatMetrics).
    pub fn builder() -> crate::types::builders::InlineChatMetricsBuilder {
        crate::types::builders::InlineChatMetricsBuilder::default()
    }
}

/// A builder for [`InlineChatMetrics`](crate::types::InlineChatMetrics).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InlineChatMetricsBuilder {
    pub(crate) accepted_num_suggestion_add_lines: ::std::option::Option<i64>,
    pub(crate) total_num_suggestion_add_lines: ::std::option::Option<i64>,
    pub(crate) suggestions_count: ::std::option::Option<i64>,
    pub(crate) acceptance_count: ::std::option::Option<i64>,
}
impl InlineChatMetricsBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn accepted_num_suggestion_add_lines(mut self, input: i64) -> Self {
        self.accepted_num_suggestion_add_lines = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_accepted_num_suggestion_add_lines(mut self, input: ::std::option::Option<i64>) -> Self {
        self.accepted_num_suggestion_add_lines = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_accepted_num_suggestion_add_lines(&self) -> &::std::option::Option<i64> {
        &self.accepted_num_suggestion_add_lines
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn total_num_suggestion_add_lines(mut self, input: i64) -> Self {
        self.total_num_suggestion_add_lines = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_total_num_suggestion_add_lines(mut self, input: ::std::option::Option<i64>) -> Self {
        self.total_num_suggestion_add_lines = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_total_num_suggestion_add_lines(&self) -> &::std::option::Option<i64> {
        &self.total_num_suggestion_add_lines
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn suggestions_count(mut self, input: i64) -> Self {
        self.suggestions_count = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_suggestions_count(mut self, input: ::std::option::Option<i64>) -> Self {
        self.suggestions_count = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_suggestions_count(&self) -> &::std::option::Option<i64> {
        &self.suggestions_count
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn acceptance_count(mut self, input: i64) -> Self {
        self.acceptance_count = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_acceptance_count(mut self, input: ::std::option::Option<i64>) -> Self {
        self.acceptance_count = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_acceptance_count(&self) -> &::std::option::Option<i64> {
        &self.acceptance_count
    }

    /// Consumes the builder and constructs a
    /// [`InlineChatMetrics`](crate::types::InlineChatMetrics).
    pub fn build(self) -> crate::types::InlineChatMetrics {
        crate::types::InlineChatMetrics {
            accepted_num_suggestion_add_lines: self.accepted_num_suggestion_add_lines,
            total_num_suggestion_add_lines: self.total_num_suggestion_add_lines,
            suggestions_count: self.suggestions_count,
            acceptance_count: self.acceptance_count,
        }
    }
}
