// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Dimensions {
    /// Programming Languages supported by CodeWhisperer
    pub programming_language: ::std::option::Option<crate::types::ProgrammingLanguage>,
    #[allow(missing_docs)] // documentation missing in model
    pub ide_category: ::std::option::Option<crate::types::IdeCategory>,
    #[allow(missing_docs)] // documentation missing in model
    pub customization_arn: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub is_global_metrics: ::std::option::Option<crate::types::Monostate>,
}
impl Dimensions {
    /// Programming Languages supported by CodeWhisperer
    pub fn programming_language(&self) -> ::std::option::Option<&crate::types::ProgrammingLanguage> {
        self.programming_language.as_ref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn ide_category(&self) -> ::std::option::Option<&crate::types::IdeCategory> {
        self.ide_category.as_ref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn customization_arn(&self) -> ::std::option::Option<&str> {
        self.customization_arn.as_deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn is_global_metrics(&self) -> ::std::option::Option<&crate::types::Monostate> {
        self.is_global_metrics.as_ref()
    }
}
impl Dimensions {
    /// Creates a new builder-style object to manufacture [`Dimensions`](crate::types::Dimensions).
    pub fn builder() -> crate::types::builders::DimensionsBuilder {
        crate::types::builders::DimensionsBuilder::default()
    }
}

/// A builder for [`Dimensions`](crate::types::Dimensions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DimensionsBuilder {
    pub(crate) programming_language: ::std::option::Option<crate::types::ProgrammingLanguage>,
    pub(crate) ide_category: ::std::option::Option<crate::types::IdeCategory>,
    pub(crate) customization_arn: ::std::option::Option<::std::string::String>,
    pub(crate) is_global_metrics: ::std::option::Option<crate::types::Monostate>,
}
impl DimensionsBuilder {
    /// Programming Languages supported by CodeWhisperer
    pub fn programming_language(mut self, input: crate::types::ProgrammingLanguage) -> Self {
        self.programming_language = ::std::option::Option::Some(input);
        self
    }

    /// Programming Languages supported by CodeWhisperer
    pub fn set_programming_language(mut self, input: ::std::option::Option<crate::types::ProgrammingLanguage>) -> Self {
        self.programming_language = input;
        self
    }

    /// Programming Languages supported by CodeWhisperer
    pub fn get_programming_language(&self) -> &::std::option::Option<crate::types::ProgrammingLanguage> {
        &self.programming_language
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn ide_category(mut self, input: crate::types::IdeCategory) -> Self {
        self.ide_category = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_ide_category(mut self, input: ::std::option::Option<crate::types::IdeCategory>) -> Self {
        self.ide_category = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_ide_category(&self) -> &::std::option::Option<crate::types::IdeCategory> {
        &self.ide_category
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn customization_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.customization_arn = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_customization_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.customization_arn = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_customization_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.customization_arn
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn is_global_metrics(mut self, input: crate::types::Monostate) -> Self {
        self.is_global_metrics = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_is_global_metrics(mut self, input: ::std::option::Option<crate::types::Monostate>) -> Self {
        self.is_global_metrics = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_is_global_metrics(&self) -> &::std::option::Option<crate::types::Monostate> {
        &self.is_global_metrics
    }

    /// Consumes the builder and constructs a [`Dimensions`](crate::types::Dimensions).
    pub fn build(self) -> crate::types::Dimensions {
        crate::types::Dimensions {
            programming_language: self.programming_language,
            ide_category: self.ide_category,
            customization_arn: self.customization_arn,
            is_global_metrics: self.is_global_metrics,
        }
    }
}
