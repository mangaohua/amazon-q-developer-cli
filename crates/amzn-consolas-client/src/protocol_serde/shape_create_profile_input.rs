// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_profile_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_profile::CreateProfileInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.identity_source {
        #[allow(unused_mut)]
        let mut object_2 = object.key("identitySource").start_object();
        crate::protocol_serde::shape_identity_source::ser_identity_source(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.profile_name {
        object.key("profileName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.reference_tracker_configuration {
        #[allow(unused_mut)]
        let mut object_5 = object.key("referenceTrackerConfiguration").start_object();
        crate::protocol_serde::shape_reference_tracker_configuration::ser_reference_tracker_configuration(
            &mut object_5,
            var_4,
        )?;
        object_5.finish();
    }
    if let Some(var_6) = &input.active_functionalities {
        let mut array_7 = object.key("activeFunctionalities").start_array();
        for item_8 in var_6 {
            {
                array_7.value().string(item_8.as_str());
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.client_token {
        object.key("clientToken").string(var_9.as_str());
    }
    if let Some(var_10) = &input.kms_key_arn {
        object.key("kmsKeyArn").string(var_10.as_str());
    }
    if let Some(var_11) = &input.tags {
        let mut array_12 = object.key("tags").start_array();
        for item_13 in var_11 {
            {
                #[allow(unused_mut)]
                let mut object_14 = array_12.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_14, item_13)?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    if let Some(var_15) = &input.resource_policy {
        #[allow(unused_mut)]
        let mut object_16 = object.key("resourcePolicy").start_object();
        crate::protocol_serde::shape_resource_policy::ser_resource_policy(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.opt_in_features {
        #[allow(unused_mut)]
        let mut object_18 = object.key("optInFeatures").start_object();
        crate::protocol_serde::shape_opt_in_features::ser_opt_in_features(&mut object_18, var_17)?;
        object_18.finish();
    }
    Ok(())
}
