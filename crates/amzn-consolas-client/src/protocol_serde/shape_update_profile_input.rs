// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_profile_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_profile::UpdateProfileInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.profile_arn {
        object.key("profileArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.profile_name {
        object.key("profileName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.reference_tracker_configuration {
        #[allow(unused_mut)]
        let mut object_4 = object.key("referenceTrackerConfiguration").start_object();
        crate::protocol_serde::shape_reference_tracker_configuration::ser_reference_tracker_configuration(
            &mut object_4,
            var_3,
        )?;
        object_4.finish();
    }
    if let Some(var_5) = &input.active_functionalities {
        let mut array_6 = object.key("activeFunctionalities").start_array();
        for item_7 in var_5 {
            {
                array_6.value().string(item_7.as_str());
            }
        }
        array_6.finish();
    }
    if let Some(var_8) = &input.kms_key_arn {
        object.key("kmsKeyArn").string(var_8.as_str());
    }
    if let Some(var_9) = &input.resource_policy {
        #[allow(unused_mut)]
        let mut object_10 = object.key("resourcePolicy").start_object();
        crate::protocol_serde::shape_resource_policy::ser_resource_policy(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.target_profile_type {
        object.key("targetProfileType").string(var_11.as_str());
    }
    if let Some(var_12) = &input.opt_in_features {
        #[allow(unused_mut)]
        let mut object_13 = object.key("optInFeatures").start_object();
        crate::protocol_serde::shape_opt_in_features::ser_opt_in_features(&mut object_13, var_12)?;
        object_13.finish();
    }
    Ok(())
}
