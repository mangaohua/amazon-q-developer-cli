// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetCustomizationOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub arn: ::std::string::String,
    #[allow(missing_docs)] // documentation missing in model
    pub version: ::std::option::Option<i64>,
    #[allow(missing_docs)] // documentation missing in model
    pub status: crate::types::CustomizationStatus,
    #[allow(missing_docs)] // documentation missing in model
    pub error_details: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub data_reference: crate::types::DataReference,
    #[allow(missing_docs)] // documentation missing in model
    pub customization_name: ::std::string::String,
    #[allow(missing_docs)] // documentation missing in model
    pub description: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub profile_arn: ::std::string::String,
    #[allow(missing_docs)] // documentation missing in model
    pub updated_at: ::aws_smithy_types::DateTime,
    #[allow(missing_docs)] // documentation missing in model
    pub evaluation_metrics: ::std::option::Option<crate::types::EvaluationMetrics>,
    #[allow(missing_docs)] // documentation missing in model
    pub include_repos: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    _request_id: Option<String>,
}
impl GetCustomizationOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn version(&self) -> ::std::option::Option<i64> {
        self.version
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn status(&self) -> &crate::types::CustomizationStatus {
        &self.status
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn error_details(&self) -> ::std::option::Option<&str> {
        self.error_details.as_deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn data_reference(&self) -> &crate::types::DataReference {
        &self.data_reference
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn customization_name(&self) -> &str {
        use std::ops::Deref;
        self.customization_name.deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn profile_arn(&self) -> &str {
        use std::ops::Deref;
        self.profile_arn.deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn updated_at(&self) -> &::aws_smithy_types::DateTime {
        &self.updated_at
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn evaluation_metrics(&self) -> ::std::option::Option<&crate::types::EvaluationMetrics> {
        self.evaluation_metrics.as_ref()
    }

    #[allow(missing_docs)] // documentation missing in model
    /// If no value was sent for this field, a default will be set. If you want to determine if no
    /// value was sent, use `.include_repos.is_none()`.
    pub fn include_repos(&self) -> &[::std::string::String] {
        self.include_repos.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for GetCustomizationOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetCustomizationOutput");
        formatter.field("arn", &self.arn);
        formatter.field("version", &self.version);
        formatter.field("status", &self.status);
        formatter.field("error_details", &self.error_details);
        formatter.field("data_reference", &self.data_reference);
        formatter.field("customization_name", &self.customization_name);
        formatter.field("description", &self.description);
        formatter.field("profile_arn", &self.profile_arn);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("evaluation_metrics", &self.evaluation_metrics);
        formatter.field("include_repos", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for GetCustomizationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetCustomizationOutput {
    /// Creates a new builder-style object to manufacture
    /// [`GetCustomizationOutput`](crate::operation::get_customization::GetCustomizationOutput).
    pub fn builder() -> crate::operation::get_customization::builders::GetCustomizationOutputBuilder {
        crate::operation::get_customization::builders::GetCustomizationOutputBuilder::default()
    }
}

/// A builder for
/// [`GetCustomizationOutput`](crate::operation::get_customization::GetCustomizationOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GetCustomizationOutputBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) version: ::std::option::Option<i64>,
    pub(crate) status: ::std::option::Option<crate::types::CustomizationStatus>,
    pub(crate) error_details: ::std::option::Option<::std::string::String>,
    pub(crate) data_reference: ::std::option::Option<crate::types::DataReference>,
    pub(crate) customization_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) profile_arn: ::std::option::Option<::std::string::String>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) evaluation_metrics: ::std::option::Option<crate::types::EvaluationMetrics>,
    pub(crate) include_repos: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    _request_id: Option<String>,
}
impl GetCustomizationOutputBuilder {
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn version(mut self, input: i64) -> Self {
        self.version = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_version(mut self, input: ::std::option::Option<i64>) -> Self {
        self.version = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_version(&self) -> &::std::option::Option<i64> {
        &self.version
    }

    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn status(mut self, input: crate::types::CustomizationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::CustomizationStatus>) -> Self {
        self.status = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_status(&self) -> &::std::option::Option<crate::types::CustomizationStatus> {
        &self.status
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn error_details(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_details = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_error_details(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_details = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_error_details(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_details
    }

    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn data_reference(mut self, input: crate::types::DataReference) -> Self {
        self.data_reference = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_data_reference(mut self, input: ::std::option::Option<crate::types::DataReference>) -> Self {
        self.data_reference = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_data_reference(&self) -> &::std::option::Option<crate::types::DataReference> {
        &self.data_reference
    }

    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn customization_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.customization_name = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_customization_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.customization_name = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_customization_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.customization_name
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }

    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn profile_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.profile_arn = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_profile_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.profile_arn = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_profile_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.profile_arn
    }

    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn evaluation_metrics(mut self, input: crate::types::EvaluationMetrics) -> Self {
        self.evaluation_metrics = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_evaluation_metrics(mut self, input: ::std::option::Option<crate::types::EvaluationMetrics>) -> Self {
        self.evaluation_metrics = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_evaluation_metrics(&self) -> &::std::option::Option<crate::types::EvaluationMetrics> {
        &self.evaluation_metrics
    }

    /// Appends an item to `include_repos`.
    ///
    /// To override the contents of this collection use
    /// [`set_include_repos`](Self::set_include_repos).
    pub fn include_repos(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.include_repos.unwrap_or_default();
        v.push(input.into());
        self.include_repos = ::std::option::Option::Some(v);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_include_repos(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.include_repos = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_include_repos(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.include_repos
    }

    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }

    /// Consumes the builder and constructs a
    /// [`GetCustomizationOutput`](crate::operation::get_customization::GetCustomizationOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::operation::get_customization::builders::GetCustomizationOutputBuilder::arn)
    /// - [`status`](crate::operation::get_customization::builders::GetCustomizationOutputBuilder::status)
    /// - [`data_reference`](crate::operation::get_customization::builders::GetCustomizationOutputBuilder::data_reference)
    /// - [`customization_name`](crate::operation::get_customization::builders::GetCustomizationOutputBuilder::customization_name)
    /// - [`profile_arn`](crate::operation::get_customization::builders::GetCustomizationOutputBuilder::profile_arn)
    /// - [`updated_at`](crate::operation::get_customization::builders::GetCustomizationOutputBuilder::updated_at)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_customization::GetCustomizationOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_customization::GetCustomizationOutput {
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building GetCustomizationOutput",
                )
            })?,
            version: self.version,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building GetCustomizationOutput",
                )
            })?,
            error_details: self.error_details,
            data_reference: self.data_reference.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "data_reference",
                    "data_reference was not specified but it is required when building GetCustomizationOutput",
                )
            })?,
            customization_name: self.customization_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "customization_name",
                    "customization_name was not specified but it is required when building GetCustomizationOutput",
                )
            })?,
            description: self.description,
            profile_arn: self.profile_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "profile_arn",
                    "profile_arn was not specified but it is required when building GetCustomizationOutput",
                )
            })?,
            updated_at: self.updated_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "updated_at",
                    "updated_at was not specified but it is required when building GetCustomizationOutput",
                )
            })?,
            evaluation_metrics: self.evaluation_metrics,
            include_repos: self.include_repos,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for GetCustomizationOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetCustomizationOutputBuilder");
        formatter.field("arn", &self.arn);
        formatter.field("version", &self.version);
        formatter.field("status", &self.status);
        formatter.field("error_details", &self.error_details);
        formatter.field("data_reference", &self.data_reference);
        formatter.field("customization_name", &self.customization_name);
        formatter.field("description", &self.description);
        formatter.field("profile_arn", &self.profile_arn);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("evaluation_metrics", &self.evaluation_metrics);
        formatter.field("include_repos", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
