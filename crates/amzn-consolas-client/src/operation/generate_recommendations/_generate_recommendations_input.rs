// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GenerateRecommendationsInput {
    #[allow(missing_docs)] // documentation missing in model
    pub file_context: ::std::option::Option<crate::types::FileContext>,
    #[allow(missing_docs)] // documentation missing in model
    pub max_results: ::std::option::Option<i32>,
    #[allow(missing_docs)] // documentation missing in model
    pub next_token: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub reference_tracker_configuration: ::std::option::Option<crate::types::ReferenceTrackerConfiguration>,
    #[allow(missing_docs)] // documentation missing in model
    pub supplemental_contexts: ::std::option::Option<::std::vec::Vec<crate::types::SupplementalContext>>,
}
impl GenerateRecommendationsInput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn file_context(&self) -> ::std::option::Option<&crate::types::FileContext> {
        self.file_context.as_ref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn reference_tracker_configuration(
        &self,
    ) -> ::std::option::Option<&crate::types::ReferenceTrackerConfiguration> {
        self.reference_tracker_configuration.as_ref()
    }

    #[allow(missing_docs)] // documentation missing in model
    /// If no value was sent for this field, a default will be set. If you want to determine if no
    /// value was sent, use `.supplemental_contexts.is_none()`.
    pub fn supplemental_contexts(&self) -> &[crate::types::SupplementalContext] {
        self.supplemental_contexts.as_deref().unwrap_or_default()
    }
}
impl GenerateRecommendationsInput {
    /// Creates a new builder-style object to manufacture
    /// [`GenerateRecommendationsInput`](crate::operation::generate_recommendations::GenerateRecommendationsInput).
    pub fn builder() -> crate::operation::generate_recommendations::builders::GenerateRecommendationsInputBuilder {
        crate::operation::generate_recommendations::builders::GenerateRecommendationsInputBuilder::default()
    }
}

/// A builder for
/// [`GenerateRecommendationsInput`](crate::operation::generate_recommendations::GenerateRecommendationsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GenerateRecommendationsInputBuilder {
    pub(crate) file_context: ::std::option::Option<crate::types::FileContext>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) reference_tracker_configuration: ::std::option::Option<crate::types::ReferenceTrackerConfiguration>,
    pub(crate) supplemental_contexts: ::std::option::Option<::std::vec::Vec<crate::types::SupplementalContext>>,
}
impl GenerateRecommendationsInputBuilder {
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn file_context(mut self, input: crate::types::FileContext) -> Self {
        self.file_context = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_file_context(mut self, input: ::std::option::Option<crate::types::FileContext>) -> Self {
        self.file_context = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_file_context(&self) -> &::std::option::Option<crate::types::FileContext> {
        &self.file_context
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn reference_tracker_configuration(mut self, input: crate::types::ReferenceTrackerConfiguration) -> Self {
        self.reference_tracker_configuration = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_reference_tracker_configuration(
        mut self,
        input: ::std::option::Option<crate::types::ReferenceTrackerConfiguration>,
    ) -> Self {
        self.reference_tracker_configuration = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_reference_tracker_configuration(
        &self,
    ) -> &::std::option::Option<crate::types::ReferenceTrackerConfiguration> {
        &self.reference_tracker_configuration
    }

    /// Appends an item to `supplemental_contexts`.
    ///
    /// To override the contents of this collection use
    /// [`set_supplemental_contexts`](Self::set_supplemental_contexts).
    pub fn supplemental_contexts(mut self, input: crate::types::SupplementalContext) -> Self {
        let mut v = self.supplemental_contexts.unwrap_or_default();
        v.push(input);
        self.supplemental_contexts = ::std::option::Option::Some(v);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_supplemental_contexts(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::SupplementalContext>>,
    ) -> Self {
        self.supplemental_contexts = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_supplemental_contexts(
        &self,
    ) -> &::std::option::Option<::std::vec::Vec<crate::types::SupplementalContext>> {
        &self.supplemental_contexts
    }

    /// Consumes the builder and constructs a
    /// [`GenerateRecommendationsInput`](crate::operation::generate_recommendations::GenerateRecommendationsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::generate_recommendations::GenerateRecommendationsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::generate_recommendations::GenerateRecommendationsInput {
                file_context: self.file_context,
                max_results: self.max_results,
                next_token: self.next_token,
                reference_tracker_configuration: self.reference_tracker_configuration,
                supplemental_contexts: self.supplemental_contexts,
            },
        )
    }
}
