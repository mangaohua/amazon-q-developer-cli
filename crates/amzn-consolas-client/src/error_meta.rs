// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// This exception is thrown when the user does not have sufficient access to perform this
    /// action.
    AccessDeniedError(crate::types::error::AccessDeniedError),
    /// This exception is thrown when the action to perform could not be completed because the
    /// resource is in a conflicting state.
    ConflictError(crate::types::error::ConflictError),
    /// This exception is thrown when an unexpected error occurred during the processing of a
    /// request.
    InternalServerError(crate::types::error::InternalServerError),
    /// This exception is thrown when describing a resource that does not exist.
    ResourceNotFoundError(crate::types::error::ResourceNotFoundError),
    #[allow(missing_docs)] // documentation missing in model
    ServiceLinkedRoleLockClientError(crate::types::error::ServiceLinkedRoleLockClientError),
    #[allow(missing_docs)] // documentation missing in model
    ServiceLinkedRoleLockServiceError(crate::types::error::ServiceLinkedRoleLockServiceError),
    /// This exception is thrown when request was denied due to request throttling.
    ThrottlingError(crate::types::error::ThrottlingError),
    /// This exception is thrown when the input fails to satisfy the constraints specified by the
    /// service.
    ValidationError(crate::types::error::ValidationError),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error
    /// code).
    #[deprecated(
        note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
    variable wildcard pattern and check `.code()`:
     \
    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
     \
    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-Error) for what information is available for the error."
    )]
    Unhandled(crate::error::sealed_unhandled::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedError(inner) => inner.fmt(f),
            Error::ConflictError(inner) => inner.fmt(f),
            Error::InternalServerError(inner) => inner.fmt(f),
            Error::ResourceNotFoundError(inner) => inner.fmt(f),
            Error::ServiceLinkedRoleLockClientError(inner) => inner.fmt(f),
            Error::ServiceLinkedRoleLockServiceError(inner) => inner.fmt(f),
            Error::ThrottlingError(inner) => inner.fmt(f),
            Error::ValidationError(inner) => inner.fmt(f),
            Error::Unhandled(_) => {
                if let ::std::option::Option::Some(code) =
                    ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
                {
                    write!(f, "unhandled error ({code})")
                } else {
                    f.write_str("unhandled error")
                }
            },
        }
    }
}
impl From<::aws_smithy_types::error::operation::BuildError> for Error {
    fn from(value: ::aws_smithy_types::error::operation::BuildError) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source: value.into(),
            meta: ::std::default::Default::default(),
        })
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for Error {
    fn meta(&self) -> &::aws_smithy_types::error::metadata::ErrorMetadata {
        match self {
            Self::AccessDeniedError(inner) => inner.meta(),
            Self::ConflictError(inner) => inner.meta(),
            Self::InternalServerError(inner) => inner.meta(),
            Self::ResourceNotFoundError(inner) => inner.meta(),
            Self::ServiceLinkedRoleLockClientError(inner) => inner.meta(),
            Self::ServiceLinkedRoleLockServiceError(inner) => inner.meta(),
            Self::ThrottlingError(inner) => inner.meta(),
            Self::ValidationError(inner) => inner.meta(),
            Self::Unhandled(inner) => &inner.meta,
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::allow_vended_log_delivery_for_resource::AllowVendedLogDeliveryForResourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::allow_vended_log_delivery_for_resource::AllowVendedLogDeliveryForResourceError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::allow_vended_log_delivery_for_resource::AllowVendedLogDeliveryForResourceError> for Error {
    fn from(
        err: crate::operation::allow_vended_log_delivery_for_resource::AllowVendedLogDeliveryForResourceError,
    ) -> Self {
        match err {
            crate::operation::allow_vended_log_delivery_for_resource::AllowVendedLogDeliveryForResourceError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::operation::allow_vended_log_delivery_for_resource::AllowVendedLogDeliveryForResourceError::ThrottlingError(inner) => {
                Error::ThrottlingError(inner)
            }
            crate::operation::allow_vended_log_delivery_for_resource::AllowVendedLogDeliveryForResourceError::ValidationError(inner) => {
                Error::ValidationError(inner)
            }
            crate::operation::allow_vended_log_delivery_for_resource::AllowVendedLogDeliveryForResourceError::ResourceNotFoundError(inner) => {
                Error::ResourceNotFoundError(inner)
            }
            crate::operation::allow_vended_log_delivery_for_resource::AllowVendedLogDeliveryForResourceError::AccessDeniedError(inner) => {
                Error::AccessDeniedError(inner)
            }
            crate::operation::allow_vended_log_delivery_for_resource::AllowVendedLogDeliveryForResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::associate_customization_permission::AssociateCustomizationPermissionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::associate_customization_permission::AssociateCustomizationPermissionError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::associate_customization_permission::AssociateCustomizationPermissionError> for Error {
    fn from(err: crate::operation::associate_customization_permission::AssociateCustomizationPermissionError) -> Self {
        match err {
            crate::operation::associate_customization_permission::AssociateCustomizationPermissionError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::operation::associate_customization_permission::AssociateCustomizationPermissionError::ThrottlingError(inner) => {
                Error::ThrottlingError(inner)
            }
            crate::operation::associate_customization_permission::AssociateCustomizationPermissionError::ValidationError(inner) => {
                Error::ValidationError(inner)
            }
            crate::operation::associate_customization_permission::AssociateCustomizationPermissionError::ConflictError(inner) => {
                Error::ConflictError(inner)
            }
            crate::operation::associate_customization_permission::AssociateCustomizationPermissionError::ResourceNotFoundError(inner) => {
                Error::ResourceNotFoundError(inner)
            }
            crate::operation::associate_customization_permission::AssociateCustomizationPermissionError::AccessDeniedError(inner) => {
                Error::AccessDeniedError(inner)
            }
            crate::operation::associate_customization_permission::AssociateCustomizationPermissionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_customization::CreateCustomizationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_customization::CreateCustomizationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_customization::CreateCustomizationError> for Error {
    fn from(err: crate::operation::create_customization::CreateCustomizationError) -> Self {
        match err {
            crate::operation::create_customization::CreateCustomizationError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            },
            crate::operation::create_customization::CreateCustomizationError::ThrottlingError(inner) => {
                Error::ThrottlingError(inner)
            },
            crate::operation::create_customization::CreateCustomizationError::ValidationError(inner) => {
                Error::ValidationError(inner)
            },
            crate::operation::create_customization::CreateCustomizationError::ConflictError(inner) => {
                Error::ConflictError(inner)
            },
            crate::operation::create_customization::CreateCustomizationError::AccessDeniedError(inner) => {
                Error::AccessDeniedError(inner)
            },
            crate::operation::create_customization::CreateCustomizationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            },
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_profile::CreateProfileError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_profile::CreateProfileError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_profile::CreateProfileError> for Error {
    fn from(err: crate::operation::create_profile::CreateProfileError) -> Self {
        match err {
            crate::operation::create_profile::CreateProfileError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            },
            crate::operation::create_profile::CreateProfileError::ThrottlingError(inner) => {
                Error::ThrottlingError(inner)
            },
            crate::operation::create_profile::CreateProfileError::ValidationError(inner) => {
                Error::ValidationError(inner)
            },
            crate::operation::create_profile::CreateProfileError::ConflictError(inner) => Error::ConflictError(inner),
            crate::operation::create_profile::CreateProfileError::ResourceNotFoundError(inner) => {
                Error::ResourceNotFoundError(inner)
            },
            crate::operation::create_profile::CreateProfileError::AccessDeniedError(inner) => {
                Error::AccessDeniedError(inner)
            },
            crate::operation::create_profile::CreateProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_customization::DeleteCustomizationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_customization::DeleteCustomizationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_customization::DeleteCustomizationError> for Error {
    fn from(err: crate::operation::delete_customization::DeleteCustomizationError) -> Self {
        match err {
            crate::operation::delete_customization::DeleteCustomizationError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            },
            crate::operation::delete_customization::DeleteCustomizationError::ThrottlingError(inner) => {
                Error::ThrottlingError(inner)
            },
            crate::operation::delete_customization::DeleteCustomizationError::ValidationError(inner) => {
                Error::ValidationError(inner)
            },
            crate::operation::delete_customization::DeleteCustomizationError::ConflictError(inner) => {
                Error::ConflictError(inner)
            },
            crate::operation::delete_customization::DeleteCustomizationError::ResourceNotFoundError(inner) => {
                Error::ResourceNotFoundError(inner)
            },
            crate::operation::delete_customization::DeleteCustomizationError::AccessDeniedError(inner) => {
                Error::AccessDeniedError(inner)
            },
            crate::operation::delete_customization::DeleteCustomizationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            },
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_customization_permissions::DeleteCustomizationPermissionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_customization_permissions::DeleteCustomizationPermissionsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_customization_permissions::DeleteCustomizationPermissionsError> for Error {
    fn from(err: crate::operation::delete_customization_permissions::DeleteCustomizationPermissionsError) -> Self {
        match err {
            crate::operation::delete_customization_permissions::DeleteCustomizationPermissionsError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::operation::delete_customization_permissions::DeleteCustomizationPermissionsError::ThrottlingError(inner) => {
                Error::ThrottlingError(inner)
            }
            crate::operation::delete_customization_permissions::DeleteCustomizationPermissionsError::ValidationError(inner) => {
                Error::ValidationError(inner)
            }
            crate::operation::delete_customization_permissions::DeleteCustomizationPermissionsError::ConflictError(inner) => {
                Error::ConflictError(inner)
            }
            crate::operation::delete_customization_permissions::DeleteCustomizationPermissionsError::ResourceNotFoundError(inner) => {
                Error::ResourceNotFoundError(inner)
            }
            crate::operation::delete_customization_permissions::DeleteCustomizationPermissionsError::AccessDeniedError(inner) => {
                Error::AccessDeniedError(inner)
            }
            crate::operation::delete_customization_permissions::DeleteCustomizationPermissionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_profile::DeleteProfileError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_profile::DeleteProfileError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_profile::DeleteProfileError> for Error {
    fn from(err: crate::operation::delete_profile::DeleteProfileError) -> Self {
        match err {
            crate::operation::delete_profile::DeleteProfileError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            },
            crate::operation::delete_profile::DeleteProfileError::ThrottlingError(inner) => {
                Error::ThrottlingError(inner)
            },
            crate::operation::delete_profile::DeleteProfileError::ValidationError(inner) => {
                Error::ValidationError(inner)
            },
            crate::operation::delete_profile::DeleteProfileError::ConflictError(inner) => Error::ConflictError(inner),
            crate::operation::delete_profile::DeleteProfileError::ResourceNotFoundError(inner) => {
                Error::ResourceNotFoundError(inner)
            },
            crate::operation::delete_profile::DeleteProfileError::AccessDeniedError(inner) => {
                Error::AccessDeniedError(inner)
            },
            crate::operation::delete_profile::DeleteProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_customization_permission::DisassociateCustomizationPermissionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_customization_permission::DisassociateCustomizationPermissionError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::disassociate_customization_permission::DisassociateCustomizationPermissionError> for Error {
    fn from(
        err: crate::operation::disassociate_customization_permission::DisassociateCustomizationPermissionError,
    ) -> Self {
        match err {
            crate::operation::disassociate_customization_permission::DisassociateCustomizationPermissionError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::operation::disassociate_customization_permission::DisassociateCustomizationPermissionError::ThrottlingError(inner) => {
                Error::ThrottlingError(inner)
            }
            crate::operation::disassociate_customization_permission::DisassociateCustomizationPermissionError::ValidationError(inner) => {
                Error::ValidationError(inner)
            }
            crate::operation::disassociate_customization_permission::DisassociateCustomizationPermissionError::ConflictError(inner) => {
                Error::ConflictError(inner)
            }
            crate::operation::disassociate_customization_permission::DisassociateCustomizationPermissionError::ResourceNotFoundError(inner) => {
                Error::ResourceNotFoundError(inner)
            }
            crate::operation::disassociate_customization_permission::DisassociateCustomizationPermissionError::AccessDeniedError(inner) => {
                Error::AccessDeniedError(inner)
            }
            crate::operation::disassociate_customization_permission::DisassociateCustomizationPermissionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::generate_recommendations::GenerateRecommendationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::generate_recommendations::GenerateRecommendationsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::generate_recommendations::GenerateRecommendationsError> for Error {
    fn from(err: crate::operation::generate_recommendations::GenerateRecommendationsError) -> Self {
        match err {
            crate::operation::generate_recommendations::GenerateRecommendationsError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            },
            crate::operation::generate_recommendations::GenerateRecommendationsError::ThrottlingError(inner) => {
                Error::ThrottlingError(inner)
            },
            crate::operation::generate_recommendations::GenerateRecommendationsError::ValidationError(inner) => {
                Error::ValidationError(inner)
            },
            crate::operation::generate_recommendations::GenerateRecommendationsError::AccessDeniedError(inner) => {
                Error::AccessDeniedError(inner)
            },
            crate::operation::generate_recommendations::GenerateRecommendationsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            },
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_customization::GetCustomizationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_customization::GetCustomizationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_customization::GetCustomizationError> for Error {
    fn from(err: crate::operation::get_customization::GetCustomizationError) -> Self {
        match err {
            crate::operation::get_customization::GetCustomizationError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            },
            crate::operation::get_customization::GetCustomizationError::ThrottlingError(inner) => {
                Error::ThrottlingError(inner)
            },
            crate::operation::get_customization::GetCustomizationError::ValidationError(inner) => {
                Error::ValidationError(inner)
            },
            crate::operation::get_customization::GetCustomizationError::ResourceNotFoundError(inner) => {
                Error::ResourceNotFoundError(inner)
            },
            crate::operation::get_customization::GetCustomizationError::AccessDeniedError(inner) => {
                Error::AccessDeniedError(inner)
            },
            crate::operation::get_customization::GetCustomizationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_customization_permissions::ListCustomizationPermissionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_customization_permissions::ListCustomizationPermissionsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_customization_permissions::ListCustomizationPermissionsError> for Error {
    fn from(err: crate::operation::list_customization_permissions::ListCustomizationPermissionsError) -> Self {
        match err {
            crate::operation::list_customization_permissions::ListCustomizationPermissionsError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::operation::list_customization_permissions::ListCustomizationPermissionsError::ThrottlingError(inner) => {
                Error::ThrottlingError(inner)
            }
            crate::operation::list_customization_permissions::ListCustomizationPermissionsError::ValidationError(inner) => {
                Error::ValidationError(inner)
            }
            crate::operation::list_customization_permissions::ListCustomizationPermissionsError::ResourceNotFoundError(inner) => {
                Error::ResourceNotFoundError(inner)
            }
            crate::operation::list_customization_permissions::ListCustomizationPermissionsError::AccessDeniedError(inner) => {
                Error::AccessDeniedError(inner)
            }
            crate::operation::list_customization_permissions::ListCustomizationPermissionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_customizations::ListCustomizationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_customizations::ListCustomizationsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_customizations::ListCustomizationsError> for Error {
    fn from(err: crate::operation::list_customizations::ListCustomizationsError) -> Self {
        match err {
            crate::operation::list_customizations::ListCustomizationsError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            },
            crate::operation::list_customizations::ListCustomizationsError::ThrottlingError(inner) => {
                Error::ThrottlingError(inner)
            },
            crate::operation::list_customizations::ListCustomizationsError::ValidationError(inner) => {
                Error::ValidationError(inner)
            },
            crate::operation::list_customizations::ListCustomizationsError::AccessDeniedError(inner) => {
                Error::AccessDeniedError(inner)
            },
            crate::operation::list_customizations::ListCustomizationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_customization_versions::ListCustomizationVersionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_customization_versions::ListCustomizationVersionsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_customization_versions::ListCustomizationVersionsError> for Error {
    fn from(err: crate::operation::list_customization_versions::ListCustomizationVersionsError) -> Self {
        match err {
            crate::operation::list_customization_versions::ListCustomizationVersionsError::InternalServerError(
                inner,
            ) => Error::InternalServerError(inner),
            crate::operation::list_customization_versions::ListCustomizationVersionsError::ThrottlingError(inner) => {
                Error::ThrottlingError(inner)
            },
            crate::operation::list_customization_versions::ListCustomizationVersionsError::ValidationError(inner) => {
                Error::ValidationError(inner)
            },
            crate::operation::list_customization_versions::ListCustomizationVersionsError::ResourceNotFoundError(
                inner,
            ) => Error::ResourceNotFoundError(inner),
            crate::operation::list_customization_versions::ListCustomizationVersionsError::AccessDeniedError(inner) => {
                Error::AccessDeniedError(inner)
            },
            crate::operation::list_customization_versions::ListCustomizationVersionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            },
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_profiles::ListProfilesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_profiles::ListProfilesError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_profiles::ListProfilesError> for Error {
    fn from(err: crate::operation::list_profiles::ListProfilesError) -> Self {
        match err {
            crate::operation::list_profiles::ListProfilesError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            },
            crate::operation::list_profiles::ListProfilesError::ThrottlingError(inner) => Error::ThrottlingError(inner),
            crate::operation::list_profiles::ListProfilesError::ValidationError(inner) => Error::ValidationError(inner),
            crate::operation::list_profiles::ListProfilesError::AccessDeniedError(inner) => {
                Error::AccessDeniedError(inner)
            },
            crate::operation::list_profiles::ListProfilesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            },
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingError(inner) => {
                Error::ThrottlingError(inner)
            },
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationError(inner) => {
                Error::ValidationError(inner)
            },
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundError(inner) => {
                Error::ResourceNotFoundError(inner)
            },
            crate::operation::list_tags_for_resource::ListTagsForResourceError::AccessDeniedError(inner) => {
                Error::AccessDeniedError(inner)
            },
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            },
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::lock_service_linked_role::LockServiceLinkedRoleError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::lock_service_linked_role::LockServiceLinkedRoleError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::lock_service_linked_role::LockServiceLinkedRoleError> for Error {
    fn from(err: crate::operation::lock_service_linked_role::LockServiceLinkedRoleError) -> Self {
        match err {
            crate::operation::lock_service_linked_role::LockServiceLinkedRoleError::ServiceLinkedRoleLockClientError(inner) => {
                Error::ServiceLinkedRoleLockClientError(inner)
            }
            crate::operation::lock_service_linked_role::LockServiceLinkedRoleError::ServiceLinkedRoleLockServiceError(inner) => {
                Error::ServiceLinkedRoleLockServiceError(inner)
            }
            crate::operation::lock_service_linked_role::LockServiceLinkedRoleError::AccessDeniedError(inner) => Error::AccessDeniedError(inner),
            crate::operation::lock_service_linked_role::LockServiceLinkedRoleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            },
            crate::operation::tag_resource::TagResourceError::ThrottlingError(inner) => Error::ThrottlingError(inner),
            crate::operation::tag_resource::TagResourceError::ValidationError(inner) => Error::ValidationError(inner),
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundError(inner) => {
                Error::ResourceNotFoundError(inner)
            },
            crate::operation::tag_resource::TagResourceError::AccessDeniedError(inner) => {
                Error::AccessDeniedError(inner)
            },
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::unlock_service_linked_role::UnlockServiceLinkedRoleError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::unlock_service_linked_role::UnlockServiceLinkedRoleError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::unlock_service_linked_role::UnlockServiceLinkedRoleError> for Error {
    fn from(err: crate::operation::unlock_service_linked_role::UnlockServiceLinkedRoleError) -> Self {
        match err {
            crate::operation::unlock_service_linked_role::UnlockServiceLinkedRoleError::ServiceLinkedRoleLockClientError(inner) => {
                Error::ServiceLinkedRoleLockClientError(inner)
            }
            crate::operation::unlock_service_linked_role::UnlockServiceLinkedRoleError::ServiceLinkedRoleLockServiceError(inner) => {
                Error::ServiceLinkedRoleLockServiceError(inner)
            }
            crate::operation::unlock_service_linked_role::UnlockServiceLinkedRoleError::AccessDeniedError(inner) => Error::AccessDeniedError(inner),
            crate::operation::unlock_service_linked_role::UnlockServiceLinkedRoleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::untag_resource::UntagResourceError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            },
            crate::operation::untag_resource::UntagResourceError::ThrottlingError(inner) => {
                Error::ThrottlingError(inner)
            },
            crate::operation::untag_resource::UntagResourceError::ValidationError(inner) => {
                Error::ValidationError(inner)
            },
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundError(inner) => {
                Error::ResourceNotFoundError(inner)
            },
            crate::operation::untag_resource::UntagResourceError::AccessDeniedError(inner) => {
                Error::AccessDeniedError(inner)
            },
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_customization::UpdateCustomizationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_customization::UpdateCustomizationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_customization::UpdateCustomizationError> for Error {
    fn from(err: crate::operation::update_customization::UpdateCustomizationError) -> Self {
        match err {
            crate::operation::update_customization::UpdateCustomizationError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            },
            crate::operation::update_customization::UpdateCustomizationError::ThrottlingError(inner) => {
                Error::ThrottlingError(inner)
            },
            crate::operation::update_customization::UpdateCustomizationError::ValidationError(inner) => {
                Error::ValidationError(inner)
            },
            crate::operation::update_customization::UpdateCustomizationError::ConflictError(inner) => {
                Error::ConflictError(inner)
            },
            crate::operation::update_customization::UpdateCustomizationError::ResourceNotFoundError(inner) => {
                Error::ResourceNotFoundError(inner)
            },
            crate::operation::update_customization::UpdateCustomizationError::AccessDeniedError(inner) => {
                Error::AccessDeniedError(inner)
            },
            crate::operation::update_customization::UpdateCustomizationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            },
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_profile::UpdateProfileError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_profile::UpdateProfileError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_profile::UpdateProfileError> for Error {
    fn from(err: crate::operation::update_profile::UpdateProfileError) -> Self {
        match err {
            crate::operation::update_profile::UpdateProfileError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            },
            crate::operation::update_profile::UpdateProfileError::ThrottlingError(inner) => {
                Error::ThrottlingError(inner)
            },
            crate::operation::update_profile::UpdateProfileError::ValidationError(inner) => {
                Error::ValidationError(inner)
            },
            crate::operation::update_profile::UpdateProfileError::ConflictError(inner) => Error::ConflictError(inner),
            crate::operation::update_profile::UpdateProfileError::ResourceNotFoundError(inner) => {
                Error::ResourceNotFoundError(inner)
            },
            crate::operation::update_profile::UpdateProfileError::AccessDeniedError(inner) => {
                Error::AccessDeniedError(inner)
            },
            crate::operation::update_profile::UpdateProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::vend_key_grant::VendKeyGrantError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::vend_key_grant::VendKeyGrantError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::vend_key_grant::VendKeyGrantError> for Error {
    fn from(err: crate::operation::vend_key_grant::VendKeyGrantError) -> Self {
        match err {
            crate::operation::vend_key_grant::VendKeyGrantError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            },
            crate::operation::vend_key_grant::VendKeyGrantError::ThrottlingError(inner) => {
                Error::ThrottlingError(inner)
            },
            crate::operation::vend_key_grant::VendKeyGrantError::ValidationError(inner) => {
                Error::ValidationError(inner)
            },
            crate::operation::vend_key_grant::VendKeyGrantError::ResourceNotFoundError(inner) => {
                Error::ResourceNotFoundError(inner)
            },
            crate::operation::vend_key_grant::VendKeyGrantError::AccessDeniedError(inner) => {
                Error::AccessDeniedError(inner)
            },
            crate::operation::vend_key_grant::VendKeyGrantError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedError(inner) => inner.source(),
            Error::ConflictError(inner) => inner.source(),
            Error::InternalServerError(inner) => inner.source(),
            Error::ResourceNotFoundError(inner) => inner.source(),
            Error::ServiceLinkedRoleLockClientError(inner) => inner.source(),
            Error::ServiceLinkedRoleLockServiceError(inner) => inner.source(),
            Error::ThrottlingError(inner) => inner.source(),
            Error::ValidationError(inner) => inner.source(),
            Error::Unhandled(inner) => ::std::option::Option::Some(&*inner.source),
        }
    }
}
impl ::aws_types::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedError(e) => e.request_id(),
            Self::ConflictError(e) => e.request_id(),
            Self::InternalServerError(e) => e.request_id(),
            Self::ResourceNotFoundError(e) => e.request_id(),
            Self::ServiceLinkedRoleLockClientError(e) => e.request_id(),
            Self::ServiceLinkedRoleLockServiceError(e) => e.request_id(),
            Self::ThrottlingError(e) => e.request_id(),
            Self::ValidationError(e) => e.request_id(),
            Self::Unhandled(e) => e.meta.request_id(),
        }
    }
}
