// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MetricDatum {
    #[allow(missing_docs)] // documentation missing in model
    pub metric_name: ::std::string::String,
    #[allow(missing_docs)] // documentation missing in model
    pub epoch_timestamp: i64,
    #[allow(missing_docs)] // documentation missing in model
    pub unit: crate::types::Unit,
    #[allow(missing_docs)] // documentation missing in model
    pub value: f64,
    #[allow(missing_docs)] // documentation missing in model
    pub metadata: ::std::option::Option<::std::vec::Vec<crate::types::MetadataEntry>>,
    #[allow(missing_docs)] // documentation missing in model
    pub passive: bool,
}
impl MetricDatum {
    #[allow(missing_docs)] // documentation missing in model
    pub fn metric_name(&self) -> &str {
        use std::ops::Deref;
        self.metric_name.deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn epoch_timestamp(&self) -> i64 {
        self.epoch_timestamp
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn unit(&self) -> &crate::types::Unit {
        &self.unit
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn value(&self) -> f64 {
        self.value
    }

    #[allow(missing_docs)] // documentation missing in model
    /// If no value was sent for this field, a default will be set. If you want to determine if no
    /// value was sent, use `.metadata.is_none()`.
    pub fn metadata(&self) -> &[crate::types::MetadataEntry] {
        self.metadata.as_deref().unwrap_or_default()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn passive(&self) -> bool {
        self.passive
    }
}
impl MetricDatum {
    /// Creates a new builder-style object to manufacture
    /// [`MetricDatum`](crate::types::MetricDatum).
    pub fn builder() -> crate::types::builders::MetricDatumBuilder {
        crate::types::builders::MetricDatumBuilder::default()
    }
}

/// A builder for [`MetricDatum`](crate::types::MetricDatum).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MetricDatumBuilder {
    pub(crate) metric_name: ::std::option::Option<::std::string::String>,
    pub(crate) epoch_timestamp: ::std::option::Option<i64>,
    pub(crate) unit: ::std::option::Option<crate::types::Unit>,
    pub(crate) value: ::std::option::Option<f64>,
    pub(crate) metadata: ::std::option::Option<::std::vec::Vec<crate::types::MetadataEntry>>,
    pub(crate) passive: ::std::option::Option<bool>,
}
impl MetricDatumBuilder {
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn metric_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.metric_name = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_metric_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.metric_name = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_metric_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.metric_name
    }

    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn epoch_timestamp(mut self, input: i64) -> Self {
        self.epoch_timestamp = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_epoch_timestamp(mut self, input: ::std::option::Option<i64>) -> Self {
        self.epoch_timestamp = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_epoch_timestamp(&self) -> &::std::option::Option<i64> {
        &self.epoch_timestamp
    }

    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn unit(mut self, input: crate::types::Unit) -> Self {
        self.unit = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_unit(mut self, input: ::std::option::Option<crate::types::Unit>) -> Self {
        self.unit = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_unit(&self) -> &::std::option::Option<crate::types::Unit> {
        &self.unit
    }

    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn value(mut self, input: f64) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_value(mut self, input: ::std::option::Option<f64>) -> Self {
        self.value = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_value(&self) -> &::std::option::Option<f64> {
        &self.value
    }

    /// Appends an item to `metadata`.
    ///
    /// To override the contents of this collection use [`set_metadata`](Self::set_metadata).
    pub fn metadata(mut self, input: crate::types::MetadataEntry) -> Self {
        let mut v = self.metadata.unwrap_or_default();
        v.push(input);
        self.metadata = ::std::option::Option::Some(v);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_metadata(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MetadataEntry>>) -> Self {
        self.metadata = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_metadata(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MetadataEntry>> {
        &self.metadata
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn passive(mut self, input: bool) -> Self {
        self.passive = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_passive(mut self, input: ::std::option::Option<bool>) -> Self {
        self.passive = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_passive(&self) -> &::std::option::Option<bool> {
        &self.passive
    }

    /// Consumes the builder and constructs a [`MetricDatum`](crate::types::MetricDatum).
    /// This method will fail if any of the following fields are not set:
    /// - [`metric_name`](crate::types::builders::MetricDatumBuilder::metric_name)
    /// - [`unit`](crate::types::builders::MetricDatumBuilder::unit)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::MetricDatum, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MetricDatum {
            metric_name: self.metric_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "metric_name",
                    "metric_name was not specified but it is required when building MetricDatum",
                )
            })?,
            epoch_timestamp: self.epoch_timestamp.unwrap_or_default(),
            unit: self.unit.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "unit",
                    "unit was not specified but it is required when building MetricDatum",
                )
            })?,
            value: self.value.unwrap_or_default(),
            metadata: self.metadata,
            passive: self.passive.unwrap_or_default(),
        })
    }
}
