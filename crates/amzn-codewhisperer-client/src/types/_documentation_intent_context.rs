// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct DocumentationIntentContext {
    #[allow(missing_docs)] // documentation missing in model
    pub scope: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub r#type: crate::types::DocumentationType,
}
impl DocumentationIntentContext {
    #[allow(missing_docs)] // documentation missing in model
    pub fn scope(&self) -> ::std::option::Option<&str> {
        self.scope.as_deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn r#type(&self) -> &crate::types::DocumentationType {
        &self.r#type
    }
}
impl ::std::fmt::Debug for DocumentationIntentContext {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DocumentationIntentContext");
        formatter.field("scope", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &self.r#type);
        formatter.finish()
    }
}
impl DocumentationIntentContext {
    /// Creates a new builder-style object to manufacture
    /// [`DocumentationIntentContext`](crate::types::DocumentationIntentContext).
    pub fn builder() -> crate::types::builders::DocumentationIntentContextBuilder {
        crate::types::builders::DocumentationIntentContextBuilder::default()
    }
}

/// A builder for [`DocumentationIntentContext`](crate::types::DocumentationIntentContext).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct DocumentationIntentContextBuilder {
    pub(crate) scope: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::DocumentationType>,
}
impl DocumentationIntentContextBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn scope(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scope = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_scope(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scope = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_scope(&self) -> &::std::option::Option<::std::string::String> {
        &self.scope
    }

    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::DocumentationType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::DocumentationType>) -> Self {
        self.r#type = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_type(&self) -> &::std::option::Option<crate::types::DocumentationType> {
        &self.r#type
    }

    /// Consumes the builder and constructs a
    /// [`DocumentationIntentContext`](crate::types::DocumentationIntentContext). This method
    /// will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::DocumentationIntentContextBuilder::type)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::DocumentationIntentContext, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::types::DocumentationIntentContext {
            scope: self.scope,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building DocumentationIntentContext",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for DocumentationIntentContextBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DocumentationIntentContextBuilder");
        formatter.field("scope", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &self.r#type);
        formatter.finish()
    }
}
