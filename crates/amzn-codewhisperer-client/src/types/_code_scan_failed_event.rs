// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Published when a security scan or code review fails
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CodeScanFailedEvent {
    /// Programming Languages supported by CodeWhisperer
    pub programming_language: crate::types::ProgrammingLanguage,
    #[allow(missing_docs)] // documentation missing in model
    pub code_scan_job_id: ::std::string::String,
    #[allow(missing_docs)] // documentation missing in model
    pub timestamp: ::aws_smithy_types::DateTime,
    #[allow(missing_docs)] // documentation missing in model
    pub code_analysis_scope: ::std::option::Option<crate::types::CodeAnalysisScope>,
}
impl CodeScanFailedEvent {
    /// Programming Languages supported by CodeWhisperer
    pub fn programming_language(&self) -> &crate::types::ProgrammingLanguage {
        &self.programming_language
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn code_scan_job_id(&self) -> &str {
        use std::ops::Deref;
        self.code_scan_job_id.deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn timestamp(&self) -> &::aws_smithy_types::DateTime {
        &self.timestamp
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn code_analysis_scope(&self) -> ::std::option::Option<&crate::types::CodeAnalysisScope> {
        self.code_analysis_scope.as_ref()
    }
}
impl CodeScanFailedEvent {
    /// Creates a new builder-style object to manufacture
    /// [`CodeScanFailedEvent`](crate::types::CodeScanFailedEvent).
    pub fn builder() -> crate::types::builders::CodeScanFailedEventBuilder {
        crate::types::builders::CodeScanFailedEventBuilder::default()
    }
}

/// A builder for [`CodeScanFailedEvent`](crate::types::CodeScanFailedEvent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CodeScanFailedEventBuilder {
    pub(crate) programming_language: ::std::option::Option<crate::types::ProgrammingLanguage>,
    pub(crate) code_scan_job_id: ::std::option::Option<::std::string::String>,
    pub(crate) timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) code_analysis_scope: ::std::option::Option<crate::types::CodeAnalysisScope>,
}
impl CodeScanFailedEventBuilder {
    /// Programming Languages supported by CodeWhisperer
    /// This field is required.
    pub fn programming_language(mut self, input: crate::types::ProgrammingLanguage) -> Self {
        self.programming_language = ::std::option::Option::Some(input);
        self
    }

    /// Programming Languages supported by CodeWhisperer
    pub fn set_programming_language(mut self, input: ::std::option::Option<crate::types::ProgrammingLanguage>) -> Self {
        self.programming_language = input;
        self
    }

    /// Programming Languages supported by CodeWhisperer
    pub fn get_programming_language(&self) -> &::std::option::Option<crate::types::ProgrammingLanguage> {
        &self.programming_language
    }

    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn code_scan_job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.code_scan_job_id = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_code_scan_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.code_scan_job_id = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_code_scan_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.code_scan_job_id
    }

    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.timestamp = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.timestamp = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.timestamp
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn code_analysis_scope(mut self, input: crate::types::CodeAnalysisScope) -> Self {
        self.code_analysis_scope = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_code_analysis_scope(mut self, input: ::std::option::Option<crate::types::CodeAnalysisScope>) -> Self {
        self.code_analysis_scope = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_code_analysis_scope(&self) -> &::std::option::Option<crate::types::CodeAnalysisScope> {
        &self.code_analysis_scope
    }

    /// Consumes the builder and constructs a
    /// [`CodeScanFailedEvent`](crate::types::CodeScanFailedEvent). This method will fail if any
    /// of the following fields are not set:
    /// - [`programming_language`](crate::types::builders::CodeScanFailedEventBuilder::programming_language)
    /// - [`code_scan_job_id`](crate::types::builders::CodeScanFailedEventBuilder::code_scan_job_id)
    /// - [`timestamp`](crate::types::builders::CodeScanFailedEventBuilder::timestamp)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::CodeScanFailedEvent, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::types::CodeScanFailedEvent {
            programming_language: self.programming_language.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "programming_language",
                    "programming_language was not specified but it is required when building CodeScanFailedEvent",
                )
            })?,
            code_scan_job_id: self.code_scan_job_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "code_scan_job_id",
                    "code_scan_job_id was not specified but it is required when building CodeScanFailedEvent",
                )
            })?,
            timestamp: self.timestamp.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "timestamp",
                    "timestamp was not specified but it is required when building CodeScanFailedEvent",
                )
            })?,
            code_analysis_scope: self.code_analysis_scope,
        })
    }
}
