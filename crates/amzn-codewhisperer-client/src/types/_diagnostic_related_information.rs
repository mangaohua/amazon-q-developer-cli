// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Represents a related message and source code location for a diagnostic.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct DiagnosticRelatedInformation {
    /// The location of this related diagnostic information.
    pub location: crate::types::DiagnosticLocation,
    /// The message of this related diagnostic information.
    pub message: ::std::string::String,
}
impl DiagnosticRelatedInformation {
    /// The location of this related diagnostic information.
    pub fn location(&self) -> &crate::types::DiagnosticLocation {
        &self.location
    }

    /// The message of this related diagnostic information.
    pub fn message(&self) -> &str {
        use std::ops::Deref;
        self.message.deref()
    }
}
impl ::std::fmt::Debug for DiagnosticRelatedInformation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DiagnosticRelatedInformation");
        formatter.field("location", &self.location);
        formatter.field("message", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl DiagnosticRelatedInformation {
    /// Creates a new builder-style object to manufacture
    /// [`DiagnosticRelatedInformation`](crate::types::DiagnosticRelatedInformation).
    pub fn builder() -> crate::types::builders::DiagnosticRelatedInformationBuilder {
        crate::types::builders::DiagnosticRelatedInformationBuilder::default()
    }
}

/// A builder for [`DiagnosticRelatedInformation`](crate::types::DiagnosticRelatedInformation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct DiagnosticRelatedInformationBuilder {
    pub(crate) location: ::std::option::Option<crate::types::DiagnosticLocation>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
}
impl DiagnosticRelatedInformationBuilder {
    /// The location of this related diagnostic information.
    /// This field is required.
    pub fn location(mut self, input: crate::types::DiagnosticLocation) -> Self {
        self.location = ::std::option::Option::Some(input);
        self
    }

    /// The location of this related diagnostic information.
    pub fn set_location(mut self, input: ::std::option::Option<crate::types::DiagnosticLocation>) -> Self {
        self.location = input;
        self
    }

    /// The location of this related diagnostic information.
    pub fn get_location(&self) -> &::std::option::Option<crate::types::DiagnosticLocation> {
        &self.location
    }

    /// The message of this related diagnostic information.
    /// This field is required.
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }

    /// The message of this related diagnostic information.
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }

    /// The message of this related diagnostic information.
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }

    /// Consumes the builder and constructs a
    /// [`DiagnosticRelatedInformation`](crate::types::DiagnosticRelatedInformation).
    /// This method will fail if any of the following fields are not set:
    /// - [`location`](crate::types::builders::DiagnosticRelatedInformationBuilder::location)
    /// - [`message`](crate::types::builders::DiagnosticRelatedInformationBuilder::message)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::types::DiagnosticRelatedInformation,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::types::DiagnosticRelatedInformation {
            location: self.location.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "location",
                    "location was not specified but it is required when building DiagnosticRelatedInformation",
                )
            })?,
            message: self.message.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "message",
                    "message was not specified but it is required when building DiagnosticRelatedInformation",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for DiagnosticRelatedInformationBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DiagnosticRelatedInformationBuilder");
        formatter.field("location", &self.location);
        formatter.field("message", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
