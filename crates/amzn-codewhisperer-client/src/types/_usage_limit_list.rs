// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UsageLimitList {
    #[allow(missing_docs)] // documentation missing in model
    pub r#type: crate::types::UsageLimitType,
    #[allow(missing_docs)] // documentation missing in model
    pub value: i64,
    #[allow(missing_docs)] // documentation missing in model
    pub percent_used: ::std::option::Option<f64>,
}
impl UsageLimitList {
    #[allow(missing_docs)] // documentation missing in model
    pub fn r#type(&self) -> &crate::types::UsageLimitType {
        &self.r#type
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn value(&self) -> i64 {
        self.value
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn percent_used(&self) -> ::std::option::Option<f64> {
        self.percent_used
    }
}
impl UsageLimitList {
    /// Creates a new builder-style object to manufacture
    /// [`UsageLimitList`](crate::types::UsageLimitList).
    pub fn builder() -> crate::types::builders::UsageLimitListBuilder {
        crate::types::builders::UsageLimitListBuilder::default()
    }
}

/// A builder for [`UsageLimitList`](crate::types::UsageLimitList).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UsageLimitListBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::UsageLimitType>,
    pub(crate) value: ::std::option::Option<i64>,
    pub(crate) percent_used: ::std::option::Option<f64>,
}
impl UsageLimitListBuilder {
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::UsageLimitType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::UsageLimitType>) -> Self {
        self.r#type = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_type(&self) -> &::std::option::Option<crate::types::UsageLimitType> {
        &self.r#type
    }

    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn value(mut self, input: i64) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_value(mut self, input: ::std::option::Option<i64>) -> Self {
        self.value = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_value(&self) -> &::std::option::Option<i64> {
        &self.value
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn percent_used(mut self, input: f64) -> Self {
        self.percent_used = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_percent_used(mut self, input: ::std::option::Option<f64>) -> Self {
        self.percent_used = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_percent_used(&self) -> &::std::option::Option<f64> {
        &self.percent_used
    }

    /// Consumes the builder and constructs a [`UsageLimitList`](crate::types::UsageLimitList).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::UsageLimitListBuilder::type)
    /// - [`value`](crate::types::builders::UsageLimitListBuilder::value)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::UsageLimitList, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::UsageLimitList {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building UsageLimitList",
                )
            })?,
            value: self.value.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "value",
                    "value was not specified but it is required when building UsageLimitList",
                )
            })?,
            percent_used: self.percent_used,
        })
    }
}
