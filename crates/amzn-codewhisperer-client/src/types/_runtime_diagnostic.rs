// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Structure to represent metadata about a Runtime Diagnostics
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct RuntimeDiagnostic {
    /// A human-readable string describing the source of the diagnostic
    pub source: ::std::string::String,
    /// Diagnostic Error type
    pub severity: crate::types::DiagnosticSeverity,
    /// The diagnostic's message.
    pub message: ::std::string::String,
}
impl RuntimeDiagnostic {
    /// A human-readable string describing the source of the diagnostic
    pub fn source(&self) -> &str {
        use std::ops::Deref;
        self.source.deref()
    }

    /// Diagnostic Error type
    pub fn severity(&self) -> &crate::types::DiagnosticSeverity {
        &self.severity
    }

    /// The diagnostic's message.
    pub fn message(&self) -> &str {
        use std::ops::Deref;
        self.message.deref()
    }
}
impl ::std::fmt::Debug for RuntimeDiagnostic {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RuntimeDiagnostic");
        formatter.field("source", &"*** Sensitive Data Redacted ***");
        formatter.field("severity", &self.severity);
        formatter.field("message", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl RuntimeDiagnostic {
    /// Creates a new builder-style object to manufacture
    /// [`RuntimeDiagnostic`](crate::types::RuntimeDiagnostic).
    pub fn builder() -> crate::types::builders::RuntimeDiagnosticBuilder {
        crate::types::builders::RuntimeDiagnosticBuilder::default()
    }
}

/// A builder for [`RuntimeDiagnostic`](crate::types::RuntimeDiagnostic).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct RuntimeDiagnosticBuilder {
    pub(crate) source: ::std::option::Option<::std::string::String>,
    pub(crate) severity: ::std::option::Option<crate::types::DiagnosticSeverity>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
}
impl RuntimeDiagnosticBuilder {
    /// A human-readable string describing the source of the diagnostic
    /// This field is required.
    pub fn source(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source = ::std::option::Option::Some(input.into());
        self
    }

    /// A human-readable string describing the source of the diagnostic
    pub fn set_source(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source = input;
        self
    }

    /// A human-readable string describing the source of the diagnostic
    pub fn get_source(&self) -> &::std::option::Option<::std::string::String> {
        &self.source
    }

    /// Diagnostic Error type
    /// This field is required.
    pub fn severity(mut self, input: crate::types::DiagnosticSeverity) -> Self {
        self.severity = ::std::option::Option::Some(input);
        self
    }

    /// Diagnostic Error type
    pub fn set_severity(mut self, input: ::std::option::Option<crate::types::DiagnosticSeverity>) -> Self {
        self.severity = input;
        self
    }

    /// Diagnostic Error type
    pub fn get_severity(&self) -> &::std::option::Option<crate::types::DiagnosticSeverity> {
        &self.severity
    }

    /// The diagnostic's message.
    /// This field is required.
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }

    /// The diagnostic's message.
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }

    /// The diagnostic's message.
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }

    /// Consumes the builder and constructs a
    /// [`RuntimeDiagnostic`](crate::types::RuntimeDiagnostic). This method will fail if any of
    /// the following fields are not set:
    /// - [`source`](crate::types::builders::RuntimeDiagnosticBuilder::source)
    /// - [`severity`](crate::types::builders::RuntimeDiagnosticBuilder::severity)
    /// - [`message`](crate::types::builders::RuntimeDiagnosticBuilder::message)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::RuntimeDiagnostic, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RuntimeDiagnostic {
            source: self.source.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "source",
                    "source was not specified but it is required when building RuntimeDiagnostic",
                )
            })?,
            severity: self.severity.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "severity",
                    "severity was not specified but it is required when building RuntimeDiagnostic",
                )
            })?,
            message: self.message.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "message",
                    "message was not specified but it is required when building RuntimeDiagnostic",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for RuntimeDiagnosticBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RuntimeDiagnosticBuilder");
        formatter.field("source", &"*** Sensitive Data Redacted ***");
        formatter.field("severity", &self.severity);
        formatter.field("message", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
