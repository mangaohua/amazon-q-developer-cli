// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Deprecated: use DocV2AcceptanceEvent for tracking acceptance and DocV2GenerationEvent for
/// tracking generation
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DocGenerationEvent {
    /// ID which represents a multi-turn conversation
    pub conversation_id: ::std::string::String,
    #[allow(missing_docs)] // documentation missing in model
    pub number_of_add_chars: i32,
    #[allow(missing_docs)] // documentation missing in model
    pub number_of_add_lines: i32,
    #[allow(missing_docs)] // documentation missing in model
    pub number_of_add_files: i32,
    #[allow(missing_docs)] // documentation missing in model
    pub user_decision: ::std::option::Option<crate::types::DocUserDecision>,
    /// Tracks whether user chose to generate a new document, update an existing one, or edit
    /// document
    pub interaction_type: ::std::option::Option<crate::types::DocInteractionType>,
    #[allow(missing_docs)] // documentation missing in model
    pub user_identity: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub number_of_navigation: i32,
    /// Specifies the folder depth level where the document should be generated
    pub folder_level: ::std::option::Option<crate::types::DocFolderLevel>,
}
impl DocGenerationEvent {
    /// ID which represents a multi-turn conversation
    pub fn conversation_id(&self) -> &str {
        use std::ops::Deref;
        self.conversation_id.deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn number_of_add_chars(&self) -> i32 {
        self.number_of_add_chars
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn number_of_add_lines(&self) -> i32 {
        self.number_of_add_lines
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn number_of_add_files(&self) -> i32 {
        self.number_of_add_files
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn user_decision(&self) -> ::std::option::Option<&crate::types::DocUserDecision> {
        self.user_decision.as_ref()
    }

    /// Tracks whether user chose to generate a new document, update an existing one, or edit
    /// document
    pub fn interaction_type(&self) -> ::std::option::Option<&crate::types::DocInteractionType> {
        self.interaction_type.as_ref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn user_identity(&self) -> ::std::option::Option<&str> {
        self.user_identity.as_deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn number_of_navigation(&self) -> i32 {
        self.number_of_navigation
    }

    /// Specifies the folder depth level where the document should be generated
    pub fn folder_level(&self) -> ::std::option::Option<&crate::types::DocFolderLevel> {
        self.folder_level.as_ref()
    }
}
impl DocGenerationEvent {
    /// Creates a new builder-style object to manufacture
    /// [`DocGenerationEvent`](crate::types::DocGenerationEvent).
    pub fn builder() -> crate::types::builders::DocGenerationEventBuilder {
        crate::types::builders::DocGenerationEventBuilder::default()
    }
}

/// A builder for [`DocGenerationEvent`](crate::types::DocGenerationEvent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DocGenerationEventBuilder {
    pub(crate) conversation_id: ::std::option::Option<::std::string::String>,
    pub(crate) number_of_add_chars: ::std::option::Option<i32>,
    pub(crate) number_of_add_lines: ::std::option::Option<i32>,
    pub(crate) number_of_add_files: ::std::option::Option<i32>,
    pub(crate) user_decision: ::std::option::Option<crate::types::DocUserDecision>,
    pub(crate) interaction_type: ::std::option::Option<crate::types::DocInteractionType>,
    pub(crate) user_identity: ::std::option::Option<::std::string::String>,
    pub(crate) number_of_navigation: ::std::option::Option<i32>,
    pub(crate) folder_level: ::std::option::Option<crate::types::DocFolderLevel>,
}
impl DocGenerationEventBuilder {
    /// ID which represents a multi-turn conversation
    /// This field is required.
    pub fn conversation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.conversation_id = ::std::option::Option::Some(input.into());
        self
    }

    /// ID which represents a multi-turn conversation
    pub fn set_conversation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.conversation_id = input;
        self
    }

    /// ID which represents a multi-turn conversation
    pub fn get_conversation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.conversation_id
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn number_of_add_chars(mut self, input: i32) -> Self {
        self.number_of_add_chars = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_number_of_add_chars(mut self, input: ::std::option::Option<i32>) -> Self {
        self.number_of_add_chars = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_number_of_add_chars(&self) -> &::std::option::Option<i32> {
        &self.number_of_add_chars
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn number_of_add_lines(mut self, input: i32) -> Self {
        self.number_of_add_lines = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_number_of_add_lines(mut self, input: ::std::option::Option<i32>) -> Self {
        self.number_of_add_lines = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_number_of_add_lines(&self) -> &::std::option::Option<i32> {
        &self.number_of_add_lines
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn number_of_add_files(mut self, input: i32) -> Self {
        self.number_of_add_files = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_number_of_add_files(mut self, input: ::std::option::Option<i32>) -> Self {
        self.number_of_add_files = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_number_of_add_files(&self) -> &::std::option::Option<i32> {
        &self.number_of_add_files
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn user_decision(mut self, input: crate::types::DocUserDecision) -> Self {
        self.user_decision = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_user_decision(mut self, input: ::std::option::Option<crate::types::DocUserDecision>) -> Self {
        self.user_decision = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_user_decision(&self) -> &::std::option::Option<crate::types::DocUserDecision> {
        &self.user_decision
    }

    /// Tracks whether user chose to generate a new document, update an existing one, or edit
    /// document
    pub fn interaction_type(mut self, input: crate::types::DocInteractionType) -> Self {
        self.interaction_type = ::std::option::Option::Some(input);
        self
    }

    /// Tracks whether user chose to generate a new document, update an existing one, or edit
    /// document
    pub fn set_interaction_type(mut self, input: ::std::option::Option<crate::types::DocInteractionType>) -> Self {
        self.interaction_type = input;
        self
    }

    /// Tracks whether user chose to generate a new document, update an existing one, or edit
    /// document
    pub fn get_interaction_type(&self) -> &::std::option::Option<crate::types::DocInteractionType> {
        &self.interaction_type
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn user_identity(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_identity = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_user_identity(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_identity = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_user_identity(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_identity
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn number_of_navigation(mut self, input: i32) -> Self {
        self.number_of_navigation = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_number_of_navigation(mut self, input: ::std::option::Option<i32>) -> Self {
        self.number_of_navigation = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_number_of_navigation(&self) -> &::std::option::Option<i32> {
        &self.number_of_navigation
    }

    /// Specifies the folder depth level where the document should be generated
    pub fn folder_level(mut self, input: crate::types::DocFolderLevel) -> Self {
        self.folder_level = ::std::option::Option::Some(input);
        self
    }

    /// Specifies the folder depth level where the document should be generated
    pub fn set_folder_level(mut self, input: ::std::option::Option<crate::types::DocFolderLevel>) -> Self {
        self.folder_level = input;
        self
    }

    /// Specifies the folder depth level where the document should be generated
    pub fn get_folder_level(&self) -> &::std::option::Option<crate::types::DocFolderLevel> {
        &self.folder_level
    }

    /// Consumes the builder and constructs a
    /// [`DocGenerationEvent`](crate::types::DocGenerationEvent). This method will fail if any
    /// of the following fields are not set:
    /// - [`conversation_id`](crate::types::builders::DocGenerationEventBuilder::conversation_id)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::DocGenerationEvent, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DocGenerationEvent {
            conversation_id: self.conversation_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "conversation_id",
                    "conversation_id was not specified but it is required when building DocGenerationEvent",
                )
            })?,
            number_of_add_chars: self.number_of_add_chars.unwrap_or_default(),
            number_of_add_lines: self.number_of_add_lines.unwrap_or_default(),
            number_of_add_files: self.number_of_add_files.unwrap_or_default(),
            user_decision: self.user_decision,
            interaction_type: self.interaction_type,
            user_identity: self.user_identity,
            number_of_navigation: self.number_of_navigation.unwrap_or_default(),
            folder_level: self.folder_level,
        })
    }
}
