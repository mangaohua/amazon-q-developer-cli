// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `UsageLimitType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let usagelimittype = unimplemented!();
/// match usagelimittype {
///     UsageLimitType::AiEditor => { /* ... */ },
///     UsageLimitType::Chat => { /* ... */ },
///     UsageLimitType::CodeScan => { /* ... */ },
///     UsageLimitType::GumbyTransform => { /* ... */ },
///     UsageLimitType::ProactiveCodeScan => { /* ... */ },
///     UsageLimitType::Qsda => { /* ... */ },
///     UsageLimitType::Recommendations => { /* ... */ },
///     UsageLimitType::WeaverbirdConversation => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `usagelimittype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `UsageLimitType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `UsageLimitType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `UsageLimitType::NewFeature` is defined.
/// Specifically, when `usagelimittype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `UsageLimitType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone,
    ::std::cmp::Eq,
    ::std::cmp::Ord,
    ::std::cmp::PartialEq,
    ::std::cmp::PartialOrd,
    ::std::fmt::Debug,
    ::std::hash::Hash,
)]
pub enum UsageLimitType {
    /// AI editor service usage metric
    AiEditor,
    /// Chat service usage metric
    Chat,
    /// Code scanning service usage metric
    CodeScan,
    /// Code transformation service usage metric
    GumbyTransform,
    /// Proactive code scanning service usage metric
    ProactiveCodeScan,
    /// QSDA usage metric
    Qsda,
    /// Inline recommendations service usage metric
    Recommendations,
    /// Weaverbird conversation service usage metric
    WeaverbirdConversation,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(
        note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants."
    )]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for UsageLimitType {
    fn from(s: &str) -> Self {
        match s {
            "AI_EDITOR" => UsageLimitType::AiEditor,
            "CHAT" => UsageLimitType::Chat,
            "CODE_SCAN" => UsageLimitType::CodeScan,
            "GUMBY_TRANSFORM" => UsageLimitType::GumbyTransform,
            "PROACTIVE_CODE_SCAN" => UsageLimitType::ProactiveCodeScan,
            "QSDA" => UsageLimitType::Qsda,
            "RECOMMENDATIONS" => UsageLimitType::Recommendations,
            "WEAVERBIRD_CONVERSATION" => UsageLimitType::WeaverbirdConversation,
            other => UsageLimitType::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(
                other.to_owned(),
            )),
        }
    }
}
impl ::std::str::FromStr for UsageLimitType {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(UsageLimitType::from(s))
    }
}
impl UsageLimitType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            UsageLimitType::AiEditor => "AI_EDITOR",
            UsageLimitType::Chat => "CHAT",
            UsageLimitType::CodeScan => "CODE_SCAN",
            UsageLimitType::GumbyTransform => "GUMBY_TRANSFORM",
            UsageLimitType::ProactiveCodeScan => "PROACTIVE_CODE_SCAN",
            UsageLimitType::Qsda => "QSDA",
            UsageLimitType::Recommendations => "RECOMMENDATIONS",
            UsageLimitType::WeaverbirdConversation => "WEAVERBIRD_CONVERSATION",
            UsageLimitType::Unknown(value) => value.as_str(),
        }
    }

    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "AI_EDITOR",
            "CHAT",
            "CODE_SCAN",
            "GUMBY_TRANSFORM",
            "PROACTIVE_CODE_SCAN",
            "QSDA",
            "RECOMMENDATIONS",
            "WEAVERBIRD_CONVERSATION",
        ]
    }
}
impl ::std::convert::AsRef<str> for UsageLimitType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl UsageLimitType {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for UsageLimitType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            UsageLimitType::AiEditor => write!(f, "AI_EDITOR"),
            UsageLimitType::Chat => write!(f, "CHAT"),
            UsageLimitType::CodeScan => write!(f, "CODE_SCAN"),
            UsageLimitType::GumbyTransform => write!(f, "GUMBY_TRANSFORM"),
            UsageLimitType::ProactiveCodeScan => write!(f, "PROACTIVE_CODE_SCAN"),
            UsageLimitType::Qsda => write!(f, "QSDA"),
            UsageLimitType::Recommendations => write!(f, "RECOMMENDATIONS"),
            UsageLimitType::WeaverbirdConversation => write!(f, "WEAVERBIRD_CONVERSATION"),
            UsageLimitType::Unknown(value) => write!(f, "{}", value),
        }
    }
}
