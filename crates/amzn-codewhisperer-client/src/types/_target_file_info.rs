// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct TargetFileInfo {
    #[allow(missing_docs)] // documentation missing in model
    pub file_path: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub test_file_path: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub test_coverage: ::std::option::Option<i32>,
    #[allow(missing_docs)] // documentation missing in model
    pub file_summary: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub file_plan: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub code_references: ::std::option::Option<::std::vec::Vec<crate::types::Reference>>,
    #[allow(missing_docs)] // documentation missing in model
    pub number_of_test_methods: ::std::option::Option<i32>,
}
impl TargetFileInfo {
    #[allow(missing_docs)] // documentation missing in model
    pub fn file_path(&self) -> ::std::option::Option<&str> {
        self.file_path.as_deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn test_file_path(&self) -> ::std::option::Option<&str> {
        self.test_file_path.as_deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn test_coverage(&self) -> ::std::option::Option<i32> {
        self.test_coverage
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn file_summary(&self) -> ::std::option::Option<&str> {
        self.file_summary.as_deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn file_plan(&self) -> ::std::option::Option<&str> {
        self.file_plan.as_deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    /// If no value was sent for this field, a default will be set. If you want to determine if no
    /// value was sent, use `.code_references.is_none()`.
    pub fn code_references(&self) -> &[crate::types::Reference] {
        self.code_references.as_deref().unwrap_or_default()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn number_of_test_methods(&self) -> ::std::option::Option<i32> {
        self.number_of_test_methods
    }
}
impl ::std::fmt::Debug for TargetFileInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TargetFileInfo");
        formatter.field("file_path", &"*** Sensitive Data Redacted ***");
        formatter.field("test_file_path", &"*** Sensitive Data Redacted ***");
        formatter.field("test_coverage", &self.test_coverage);
        formatter.field("file_summary", &"*** Sensitive Data Redacted ***");
        formatter.field("file_plan", &"*** Sensitive Data Redacted ***");
        formatter.field("code_references", &self.code_references);
        formatter.field("number_of_test_methods", &self.number_of_test_methods);
        formatter.finish()
    }
}
impl TargetFileInfo {
    /// Creates a new builder-style object to manufacture
    /// [`TargetFileInfo`](crate::types::TargetFileInfo).
    pub fn builder() -> crate::types::builders::TargetFileInfoBuilder {
        crate::types::builders::TargetFileInfoBuilder::default()
    }
}

/// A builder for [`TargetFileInfo`](crate::types::TargetFileInfo).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct TargetFileInfoBuilder {
    pub(crate) file_path: ::std::option::Option<::std::string::String>,
    pub(crate) test_file_path: ::std::option::Option<::std::string::String>,
    pub(crate) test_coverage: ::std::option::Option<i32>,
    pub(crate) file_summary: ::std::option::Option<::std::string::String>,
    pub(crate) file_plan: ::std::option::Option<::std::string::String>,
    pub(crate) code_references: ::std::option::Option<::std::vec::Vec<crate::types::Reference>>,
    pub(crate) number_of_test_methods: ::std::option::Option<i32>,
}
impl TargetFileInfoBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn file_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.file_path = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_file_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.file_path = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_file_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.file_path
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn test_file_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.test_file_path = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_test_file_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.test_file_path = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_test_file_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.test_file_path
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn test_coverage(mut self, input: i32) -> Self {
        self.test_coverage = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_test_coverage(mut self, input: ::std::option::Option<i32>) -> Self {
        self.test_coverage = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_test_coverage(&self) -> &::std::option::Option<i32> {
        &self.test_coverage
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn file_summary(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.file_summary = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_file_summary(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.file_summary = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_file_summary(&self) -> &::std::option::Option<::std::string::String> {
        &self.file_summary
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn file_plan(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.file_plan = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_file_plan(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.file_plan = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_file_plan(&self) -> &::std::option::Option<::std::string::String> {
        &self.file_plan
    }

    /// Appends an item to `code_references`.
    ///
    /// To override the contents of this collection use
    /// [`set_code_references`](Self::set_code_references).
    pub fn code_references(mut self, input: crate::types::Reference) -> Self {
        let mut v = self.code_references.unwrap_or_default();
        v.push(input);
        self.code_references = ::std::option::Option::Some(v);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_code_references(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::Reference>>,
    ) -> Self {
        self.code_references = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_code_references(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Reference>> {
        &self.code_references
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn number_of_test_methods(mut self, input: i32) -> Self {
        self.number_of_test_methods = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_number_of_test_methods(mut self, input: ::std::option::Option<i32>) -> Self {
        self.number_of_test_methods = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_number_of_test_methods(&self) -> &::std::option::Option<i32> {
        &self.number_of_test_methods
    }

    /// Consumes the builder and constructs a [`TargetFileInfo`](crate::types::TargetFileInfo).
    pub fn build(self) -> crate::types::TargetFileInfo {
        crate::types::TargetFileInfo {
            file_path: self.file_path,
            test_file_path: self.test_file_path,
            test_coverage: self.test_coverage,
            file_summary: self.file_summary,
            file_plan: self.file_plan,
            code_references: self.code_references,
            number_of_test_methods: self.number_of_test_methods,
        }
    }
}
impl ::std::fmt::Debug for TargetFileInfoBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TargetFileInfoBuilder");
        formatter.field("file_path", &"*** Sensitive Data Redacted ***");
        formatter.field("test_file_path", &"*** Sensitive Data Redacted ***");
        formatter.field("test_coverage", &self.test_coverage);
        formatter.field("file_summary", &"*** Sensitive Data Redacted ***");
        formatter.field("file_plan", &"*** Sensitive Data Redacted ***");
        formatter.field("code_references", &self.code_references);
        formatter.field("number_of_test_methods", &self.number_of_test_methods);
        formatter.finish()
    }
}
