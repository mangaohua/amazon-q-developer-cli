// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct PackageInfo {
    #[allow(missing_docs)] // documentation missing in model
    pub execution_command: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub build_command: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub build_order: ::std::option::Option<i32>,
    #[allow(missing_docs)] // documentation missing in model
    pub test_framework: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub package_summary: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub package_plan: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub target_file_info_list: ::std::option::Option<::std::vec::Vec<crate::types::TargetFileInfo>>,
}
impl PackageInfo {
    #[allow(missing_docs)] // documentation missing in model
    pub fn execution_command(&self) -> ::std::option::Option<&str> {
        self.execution_command.as_deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn build_command(&self) -> ::std::option::Option<&str> {
        self.build_command.as_deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn build_order(&self) -> ::std::option::Option<i32> {
        self.build_order
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn test_framework(&self) -> ::std::option::Option<&str> {
        self.test_framework.as_deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn package_summary(&self) -> ::std::option::Option<&str> {
        self.package_summary.as_deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn package_plan(&self) -> ::std::option::Option<&str> {
        self.package_plan.as_deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    /// If no value was sent for this field, a default will be set. If you want to determine if no
    /// value was sent, use `.target_file_info_list.is_none()`.
    pub fn target_file_info_list(&self) -> &[crate::types::TargetFileInfo] {
        self.target_file_info_list.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for PackageInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PackageInfo");
        formatter.field("execution_command", &"*** Sensitive Data Redacted ***");
        formatter.field("build_command", &"*** Sensitive Data Redacted ***");
        formatter.field("build_order", &self.build_order);
        formatter.field("test_framework", &self.test_framework);
        formatter.field("package_summary", &"*** Sensitive Data Redacted ***");
        formatter.field("package_plan", &"*** Sensitive Data Redacted ***");
        formatter.field("target_file_info_list", &self.target_file_info_list);
        formatter.finish()
    }
}
impl PackageInfo {
    /// Creates a new builder-style object to manufacture
    /// [`PackageInfo`](crate::types::PackageInfo).
    pub fn builder() -> crate::types::builders::PackageInfoBuilder {
        crate::types::builders::PackageInfoBuilder::default()
    }
}

/// A builder for [`PackageInfo`](crate::types::PackageInfo).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct PackageInfoBuilder {
    pub(crate) execution_command: ::std::option::Option<::std::string::String>,
    pub(crate) build_command: ::std::option::Option<::std::string::String>,
    pub(crate) build_order: ::std::option::Option<i32>,
    pub(crate) test_framework: ::std::option::Option<::std::string::String>,
    pub(crate) package_summary: ::std::option::Option<::std::string::String>,
    pub(crate) package_plan: ::std::option::Option<::std::string::String>,
    pub(crate) target_file_info_list: ::std::option::Option<::std::vec::Vec<crate::types::TargetFileInfo>>,
}
impl PackageInfoBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn execution_command(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_command = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_execution_command(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_command = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_execution_command(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_command
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn build_command(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.build_command = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_build_command(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.build_command = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_build_command(&self) -> &::std::option::Option<::std::string::String> {
        &self.build_command
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn build_order(mut self, input: i32) -> Self {
        self.build_order = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_build_order(mut self, input: ::std::option::Option<i32>) -> Self {
        self.build_order = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_build_order(&self) -> &::std::option::Option<i32> {
        &self.build_order
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn test_framework(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.test_framework = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_test_framework(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.test_framework = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_test_framework(&self) -> &::std::option::Option<::std::string::String> {
        &self.test_framework
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn package_summary(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.package_summary = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_package_summary(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.package_summary = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_package_summary(&self) -> &::std::option::Option<::std::string::String> {
        &self.package_summary
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn package_plan(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.package_plan = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_package_plan(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.package_plan = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_package_plan(&self) -> &::std::option::Option<::std::string::String> {
        &self.package_plan
    }

    /// Appends an item to `target_file_info_list`.
    ///
    /// To override the contents of this collection use
    /// [`set_target_file_info_list`](Self::set_target_file_info_list).
    pub fn target_file_info_list(mut self, input: crate::types::TargetFileInfo) -> Self {
        let mut v = self.target_file_info_list.unwrap_or_default();
        v.push(input);
        self.target_file_info_list = ::std::option::Option::Some(v);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_target_file_info_list(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::TargetFileInfo>>,
    ) -> Self {
        self.target_file_info_list = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_target_file_info_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TargetFileInfo>> {
        &self.target_file_info_list
    }

    /// Consumes the builder and constructs a [`PackageInfo`](crate::types::PackageInfo).
    pub fn build(self) -> crate::types::PackageInfo {
        crate::types::PackageInfo {
            execution_command: self.execution_command,
            build_command: self.build_command,
            build_order: self.build_order,
            test_framework: self.test_framework,
            package_summary: self.package_summary,
            package_plan: self.package_plan,
            target_file_info_list: self.target_file_info_list,
        }
    }
}
impl ::std::fmt::Debug for PackageInfoBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PackageInfoBuilder");
        formatter.field("execution_command", &"*** Sensitive Data Redacted ***");
        formatter.field("build_command", &"*** Sensitive Data Redacted ***");
        formatter.field("build_order", &self.build_order);
        formatter.field("test_framework", &self.test_framework);
        formatter.field("package_summary", &"*** Sensitive Data Redacted ***");
        formatter.field("package_plan", &"*** Sensitive Data Redacted ***");
        formatter.field("target_file_info_list", &self.target_file_info_list);
        formatter.finish()
    }
}
