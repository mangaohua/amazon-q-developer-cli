// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct Edit {
    #[allow(missing_docs)] // documentation missing in model
    pub content: ::std::string::String,
    #[allow(missing_docs)] // documentation missing in model
    pub references: ::std::option::Option<::std::vec::Vec<crate::types::Reference>>,
}
impl Edit {
    #[allow(missing_docs)] // documentation missing in model
    pub fn content(&self) -> &str {
        use std::ops::Deref;
        self.content.deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    /// If no value was sent for this field, a default will be set. If you want to determine if no
    /// value was sent, use `.references.is_none()`.
    pub fn references(&self) -> &[crate::types::Reference] {
        self.references.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for Edit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("Edit");
        formatter.field("content", &"*** Sensitive Data Redacted ***");
        formatter.field("references", &self.references);
        formatter.finish()
    }
}
impl Edit {
    /// Creates a new builder-style object to manufacture [`Edit`](crate::types::Edit).
    pub fn builder() -> crate::types::builders::EditBuilder {
        crate::types::builders::EditBuilder::default()
    }
}

/// A builder for [`Edit`](crate::types::Edit).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct EditBuilder {
    pub(crate) content: ::std::option::Option<::std::string::String>,
    pub(crate) references: ::std::option::Option<::std::vec::Vec<crate::types::Reference>>,
}
impl EditBuilder {
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn content(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_content(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_content(&self) -> &::std::option::Option<::std::string::String> {
        &self.content
    }

    /// Appends an item to `references`.
    ///
    /// To override the contents of this collection use [`set_references`](Self::set_references).
    pub fn references(mut self, input: crate::types::Reference) -> Self {
        let mut v = self.references.unwrap_or_default();
        v.push(input);
        self.references = ::std::option::Option::Some(v);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_references(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Reference>>) -> Self {
        self.references = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_references(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Reference>> {
        &self.references
    }

    /// Consumes the builder and constructs a [`Edit`](crate::types::Edit).
    /// This method will fail if any of the following fields are not set:
    /// - [`content`](crate::types::builders::EditBuilder::content)
    pub fn build(self) -> ::std::result::Result<crate::types::Edit, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Edit {
            content: self.content.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "content",
                    "content was not specified but it is required when building Edit",
                )
            })?,
            references: self.references,
        })
    }
}
impl ::std::fmt::Debug for EditBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EditBuilder");
        formatter.field("content", &"*** Sensitive Data Redacted ***");
        formatter.field("references", &self.references);
        formatter.finish()
    }
}
