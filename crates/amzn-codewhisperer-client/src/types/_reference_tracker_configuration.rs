// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ReferenceTrackerConfiguration {
    /// Recommendations with references setting for CodeWhisperer
    pub recommendations_with_references: crate::types::RecommendationsWithReferencesPreference,
}
impl ReferenceTrackerConfiguration {
    /// Recommendations with references setting for CodeWhisperer
    pub fn recommendations_with_references(&self) -> &crate::types::RecommendationsWithReferencesPreference {
        &self.recommendations_with_references
    }
}
impl ReferenceTrackerConfiguration {
    /// Creates a new builder-style object to manufacture
    /// [`ReferenceTrackerConfiguration`](crate::types::ReferenceTrackerConfiguration).
    pub fn builder() -> crate::types::builders::ReferenceTrackerConfigurationBuilder {
        crate::types::builders::ReferenceTrackerConfigurationBuilder::default()
    }
}

/// A builder for [`ReferenceTrackerConfiguration`](crate::types::ReferenceTrackerConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ReferenceTrackerConfigurationBuilder {
    pub(crate) recommendations_with_references:
        ::std::option::Option<crate::types::RecommendationsWithReferencesPreference>,
}
impl ReferenceTrackerConfigurationBuilder {
    /// Recommendations with references setting for CodeWhisperer
    /// This field is required.
    pub fn recommendations_with_references(
        mut self,
        input: crate::types::RecommendationsWithReferencesPreference,
    ) -> Self {
        self.recommendations_with_references = ::std::option::Option::Some(input);
        self
    }

    /// Recommendations with references setting for CodeWhisperer
    pub fn set_recommendations_with_references(
        mut self,
        input: ::std::option::Option<crate::types::RecommendationsWithReferencesPreference>,
    ) -> Self {
        self.recommendations_with_references = input;
        self
    }

    /// Recommendations with references setting for CodeWhisperer
    pub fn get_recommendations_with_references(
        &self,
    ) -> &::std::option::Option<crate::types::RecommendationsWithReferencesPreference> {
        &self.recommendations_with_references
    }

    /// Consumes the builder and constructs a
    /// [`ReferenceTrackerConfiguration`](crate::types::ReferenceTrackerConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`recommendations_with_references`](crate::types::builders::ReferenceTrackerConfigurationBuilder::recommendations_with_references)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::types::ReferenceTrackerConfiguration,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::types::ReferenceTrackerConfiguration {
            recommendations_with_references: self.recommendations_with_references.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "recommendations_with_references",
                    "recommendations_with_references was not specified but it is required when building ReferenceTrackerConfiguration",
                )
            })?,
        })
    }
}
