// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct Import {
    #[allow(missing_docs)] // documentation missing in model
    pub statement: ::std::option::Option<::std::string::String>,
}
impl Import {
    #[allow(missing_docs)] // documentation missing in model
    pub fn statement(&self) -> ::std::option::Option<&str> {
        self.statement.as_deref()
    }
}
impl ::std::fmt::Debug for Import {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("Import");
        formatter.field("statement", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl Import {
    /// Creates a new builder-style object to manufacture [`Import`](crate::types::Import).
    pub fn builder() -> crate::types::builders::ImportBuilder {
        crate::types::builders::ImportBuilder::default()
    }
}

/// A builder for [`Import`](crate::types::Import).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ImportBuilder {
    pub(crate) statement: ::std::option::Option<::std::string::String>,
}
impl ImportBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn statement(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.statement = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_statement(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.statement = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_statement(&self) -> &::std::option::Option<::std::string::String> {
        &self.statement
    }

    /// Consumes the builder and constructs a [`Import`](crate::types::Import).
    pub fn build(self) -> crate::types::Import {
        crate::types::Import {
            statement: self.statement,
        }
    }
}
impl ::std::fmt::Debug for ImportBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ImportBuilder");
        formatter.field("statement", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
