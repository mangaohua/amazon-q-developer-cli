// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Represents an IDE retrieved relevant Text Document / File
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct RelevantTextDocument {
    /// Filepath relative to the root of the workspace
    pub relative_file_path: ::std::string::String,
    /// The text document's language identifier.
    pub programming_language: ::std::option::Option<crate::types::ProgrammingLanguage>,
    /// Content of the text document
    pub text: ::std::option::Option<::std::string::String>,
    /// DocumentSymbols parsed from a text document
    pub document_symbols: ::std::option::Option<::std::vec::Vec<crate::types::DocumentSymbol>>,
}
impl RelevantTextDocument {
    /// Filepath relative to the root of the workspace
    pub fn relative_file_path(&self) -> &str {
        use std::ops::Deref;
        self.relative_file_path.deref()
    }

    /// The text document's language identifier.
    pub fn programming_language(&self) -> ::std::option::Option<&crate::types::ProgrammingLanguage> {
        self.programming_language.as_ref()
    }

    /// Content of the text document
    pub fn text(&self) -> ::std::option::Option<&str> {
        self.text.as_deref()
    }

    /// DocumentSymbols parsed from a text document
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no
    /// value was sent, use `.document_symbols.is_none()`.
    pub fn document_symbols(&self) -> &[crate::types::DocumentSymbol] {
        self.document_symbols.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for RelevantTextDocument {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RelevantTextDocument");
        formatter.field("relative_file_path", &"*** Sensitive Data Redacted ***");
        formatter.field("programming_language", &self.programming_language);
        formatter.field("text", &"*** Sensitive Data Redacted ***");
        formatter.field("document_symbols", &self.document_symbols);
        formatter.finish()
    }
}
impl RelevantTextDocument {
    /// Creates a new builder-style object to manufacture
    /// [`RelevantTextDocument`](crate::types::RelevantTextDocument).
    pub fn builder() -> crate::types::builders::RelevantTextDocumentBuilder {
        crate::types::builders::RelevantTextDocumentBuilder::default()
    }
}

/// A builder for [`RelevantTextDocument`](crate::types::RelevantTextDocument).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct RelevantTextDocumentBuilder {
    pub(crate) relative_file_path: ::std::option::Option<::std::string::String>,
    pub(crate) programming_language: ::std::option::Option<crate::types::ProgrammingLanguage>,
    pub(crate) text: ::std::option::Option<::std::string::String>,
    pub(crate) document_symbols: ::std::option::Option<::std::vec::Vec<crate::types::DocumentSymbol>>,
}
impl RelevantTextDocumentBuilder {
    /// Filepath relative to the root of the workspace
    /// This field is required.
    pub fn relative_file_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.relative_file_path = ::std::option::Option::Some(input.into());
        self
    }

    /// Filepath relative to the root of the workspace
    pub fn set_relative_file_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.relative_file_path = input;
        self
    }

    /// Filepath relative to the root of the workspace
    pub fn get_relative_file_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.relative_file_path
    }

    /// The text document's language identifier.
    pub fn programming_language(mut self, input: crate::types::ProgrammingLanguage) -> Self {
        self.programming_language = ::std::option::Option::Some(input);
        self
    }

    /// The text document's language identifier.
    pub fn set_programming_language(mut self, input: ::std::option::Option<crate::types::ProgrammingLanguage>) -> Self {
        self.programming_language = input;
        self
    }

    /// The text document's language identifier.
    pub fn get_programming_language(&self) -> &::std::option::Option<crate::types::ProgrammingLanguage> {
        &self.programming_language
    }

    /// Content of the text document
    pub fn text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.text = ::std::option::Option::Some(input.into());
        self
    }

    /// Content of the text document
    pub fn set_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.text = input;
        self
    }

    /// Content of the text document
    pub fn get_text(&self) -> &::std::option::Option<::std::string::String> {
        &self.text
    }

    /// Appends an item to `document_symbols`.
    ///
    /// To override the contents of this collection use
    /// [`set_document_symbols`](Self::set_document_symbols).
    ///
    /// DocumentSymbols parsed from a text document
    pub fn document_symbols(mut self, input: crate::types::DocumentSymbol) -> Self {
        let mut v = self.document_symbols.unwrap_or_default();
        v.push(input);
        self.document_symbols = ::std::option::Option::Some(v);
        self
    }

    /// DocumentSymbols parsed from a text document
    pub fn set_document_symbols(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::DocumentSymbol>>,
    ) -> Self {
        self.document_symbols = input;
        self
    }

    /// DocumentSymbols parsed from a text document
    pub fn get_document_symbols(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DocumentSymbol>> {
        &self.document_symbols
    }

    /// Consumes the builder and constructs a
    /// [`RelevantTextDocument`](crate::types::RelevantTextDocument). This method will fail if
    /// any of the following fields are not set:
    /// - [`relative_file_path`](crate::types::builders::RelevantTextDocumentBuilder::relative_file_path)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::RelevantTextDocument, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::types::RelevantTextDocument {
            relative_file_path: self.relative_file_path.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "relative_file_path",
                    "relative_file_path was not specified but it is required when building RelevantTextDocument",
                )
            })?,
            programming_language: self.programming_language,
            text: self.text,
            document_symbols: self.document_symbols,
        })
    }
}
impl ::std::fmt::Debug for RelevantTextDocumentBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RelevantTextDocumentBuilder");
        formatter.field("relative_file_path", &"*** Sensitive Data Redacted ***");
        formatter.field("programming_language", &self.programming_language);
        formatter.field("text", &"*** Sensitive Data Redacted ***");
        formatter.field("document_symbols", &self.document_symbols);
        formatter.finish()
    }
}
