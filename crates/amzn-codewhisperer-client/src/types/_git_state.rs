// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// State related to the Git VSC
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GitState {
    /// The output of the command `git status --porcelain=v1 -b`
    pub status: ::std::option::Option<::std::string::String>,
}
impl GitState {
    /// The output of the command `git status --porcelain=v1 -b`
    pub fn status(&self) -> ::std::option::Option<&str> {
        self.status.as_deref()
    }
}
impl ::std::fmt::Debug for GitState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GitState");
        formatter.field("status", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl GitState {
    /// Creates a new builder-style object to manufacture [`GitState`](crate::types::GitState).
    pub fn builder() -> crate::types::builders::GitStateBuilder {
        crate::types::builders::GitStateBuilder::default()
    }
}

/// A builder for [`GitState`](crate::types::GitState).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GitStateBuilder {
    pub(crate) status: ::std::option::Option<::std::string::String>,
}
impl GitStateBuilder {
    /// The output of the command `git status --porcelain=v1 -b`
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }

    /// The output of the command `git status --porcelain=v1 -b`
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }

    /// The output of the command `git status --porcelain=v1 -b`
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }

    /// Consumes the builder and constructs a [`GitState`](crate::types::GitState).
    pub fn build(self) -> crate::types::GitState {
        crate::types::GitState { status: self.status }
    }
}
impl ::std::fmt::Debug for GitStateBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GitStateBuilder");
        formatter.field("status", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
