// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct TargetCode {
    /// The file path relative to the root of the workspace, could be a single file or a folder.
    pub relative_target_path: ::std::string::String,
    #[allow(missing_docs)] // documentation missing in model
    pub target_line_range_list: ::std::option::Option<::std::vec::Vec<crate::types::Range>>,
}
impl TargetCode {
    /// The file path relative to the root of the workspace, could be a single file or a folder.
    pub fn relative_target_path(&self) -> &str {
        use std::ops::Deref;
        self.relative_target_path.deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    /// If no value was sent for this field, a default will be set. If you want to determine if no
    /// value was sent, use `.target_line_range_list.is_none()`.
    pub fn target_line_range_list(&self) -> &[crate::types::Range] {
        self.target_line_range_list.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for TargetCode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TargetCode");
        formatter.field("relative_target_path", &"*** Sensitive Data Redacted ***");
        formatter.field("target_line_range_list", &self.target_line_range_list);
        formatter.finish()
    }
}
impl TargetCode {
    /// Creates a new builder-style object to manufacture [`TargetCode`](crate::types::TargetCode).
    pub fn builder() -> crate::types::builders::TargetCodeBuilder {
        crate::types::builders::TargetCodeBuilder::default()
    }
}

/// A builder for [`TargetCode`](crate::types::TargetCode).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct TargetCodeBuilder {
    pub(crate) relative_target_path: ::std::option::Option<::std::string::String>,
    pub(crate) target_line_range_list: ::std::option::Option<::std::vec::Vec<crate::types::Range>>,
}
impl TargetCodeBuilder {
    /// The file path relative to the root of the workspace, could be a single file or a folder.
    /// This field is required.
    pub fn relative_target_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.relative_target_path = ::std::option::Option::Some(input.into());
        self
    }

    /// The file path relative to the root of the workspace, could be a single file or a folder.
    pub fn set_relative_target_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.relative_target_path = input;
        self
    }

    /// The file path relative to the root of the workspace, could be a single file or a folder.
    pub fn get_relative_target_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.relative_target_path
    }

    /// Appends an item to `target_line_range_list`.
    ///
    /// To override the contents of this collection use
    /// [`set_target_line_range_list`](Self::set_target_line_range_list).
    pub fn target_line_range_list(mut self, input: crate::types::Range) -> Self {
        let mut v = self.target_line_range_list.unwrap_or_default();
        v.push(input);
        self.target_line_range_list = ::std::option::Option::Some(v);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_target_line_range_list(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::Range>>,
    ) -> Self {
        self.target_line_range_list = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_target_line_range_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Range>> {
        &self.target_line_range_list
    }

    /// Consumes the builder and constructs a [`TargetCode`](crate::types::TargetCode).
    /// This method will fail if any of the following fields are not set:
    /// - [`relative_target_path`](crate::types::builders::TargetCodeBuilder::relative_target_path)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::TargetCode, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TargetCode {
            relative_target_path: self.relative_target_path.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "relative_target_path",
                    "relative_target_path was not specified but it is required when building TargetCode",
                )
            })?,
            target_line_range_list: self.target_line_range_list,
        })
    }
}
impl ::std::fmt::Debug for TargetCodeBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TargetCodeBuilder");
        formatter.field("relative_target_path", &"*** Sensitive Data Redacted ***");
        formatter.field("target_line_range_list", &self.target_line_range_list);
        formatter.finish()
    }
}
