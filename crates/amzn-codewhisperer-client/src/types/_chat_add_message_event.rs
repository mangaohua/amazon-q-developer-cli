// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ChatAddMessageEvent {
    /// ID which represents a multi-turn conversation
    pub conversation_id: ::std::string::String,
    /// Unique identifier for the chat message
    pub message_id: ::std::string::String,
    #[allow(missing_docs)] // documentation missing in model
    pub customization_arn: ::std::option::Option<::std::string::String>,
    /// User Intent
    pub user_intent: ::std::option::Option<crate::types::UserIntent>,
    #[allow(missing_docs)] // documentation missing in model
    pub has_code_snippet: ::std::option::Option<bool>,
    /// Programming Languages supported by CodeWhisperer
    pub programming_language: ::std::option::Option<crate::types::ProgrammingLanguage>,
    #[allow(missing_docs)] // documentation missing in model
    pub active_editor_total_characters: ::std::option::Option<i32>,
    #[allow(missing_docs)] // documentation missing in model
    pub time_to_first_chunk_milliseconds: ::std::option::Option<f64>,
    #[allow(missing_docs)] // documentation missing in model
    pub time_between_chunks: ::std::option::Option<::std::vec::Vec<f64>>,
    #[allow(missing_docs)] // documentation missing in model
    pub full_responselatency: ::std::option::Option<f64>,
    #[allow(missing_docs)] // documentation missing in model
    pub request_length: ::std::option::Option<i32>,
    #[allow(missing_docs)] // documentation missing in model
    pub response_length: ::std::option::Option<i32>,
    #[allow(missing_docs)] // documentation missing in model
    pub number_of_code_blocks: ::std::option::Option<i32>,
    #[allow(missing_docs)] // documentation missing in model
    pub has_project_level_context: ::std::option::Option<bool>,
}
impl ChatAddMessageEvent {
    /// ID which represents a multi-turn conversation
    pub fn conversation_id(&self) -> &str {
        use std::ops::Deref;
        self.conversation_id.deref()
    }

    /// Unique identifier for the chat message
    pub fn message_id(&self) -> &str {
        use std::ops::Deref;
        self.message_id.deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn customization_arn(&self) -> ::std::option::Option<&str> {
        self.customization_arn.as_deref()
    }

    /// User Intent
    pub fn user_intent(&self) -> ::std::option::Option<&crate::types::UserIntent> {
        self.user_intent.as_ref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn has_code_snippet(&self) -> ::std::option::Option<bool> {
        self.has_code_snippet
    }

    /// Programming Languages supported by CodeWhisperer
    pub fn programming_language(&self) -> ::std::option::Option<&crate::types::ProgrammingLanguage> {
        self.programming_language.as_ref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn active_editor_total_characters(&self) -> ::std::option::Option<i32> {
        self.active_editor_total_characters
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn time_to_first_chunk_milliseconds(&self) -> ::std::option::Option<f64> {
        self.time_to_first_chunk_milliseconds
    }

    #[allow(missing_docs)] // documentation missing in model
    /// If no value was sent for this field, a default will be set. If you want to determine if no
    /// value was sent, use `.time_between_chunks.is_none()`.
    pub fn time_between_chunks(&self) -> &[f64] {
        self.time_between_chunks.as_deref().unwrap_or_default()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn full_responselatency(&self) -> ::std::option::Option<f64> {
        self.full_responselatency
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn request_length(&self) -> ::std::option::Option<i32> {
        self.request_length
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn response_length(&self) -> ::std::option::Option<i32> {
        self.response_length
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn number_of_code_blocks(&self) -> ::std::option::Option<i32> {
        self.number_of_code_blocks
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn has_project_level_context(&self) -> ::std::option::Option<bool> {
        self.has_project_level_context
    }
}
impl ChatAddMessageEvent {
    /// Creates a new builder-style object to manufacture
    /// [`ChatAddMessageEvent`](crate::types::ChatAddMessageEvent).
    pub fn builder() -> crate::types::builders::ChatAddMessageEventBuilder {
        crate::types::builders::ChatAddMessageEventBuilder::default()
    }
}

/// A builder for [`ChatAddMessageEvent`](crate::types::ChatAddMessageEvent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ChatAddMessageEventBuilder {
    pub(crate) conversation_id: ::std::option::Option<::std::string::String>,
    pub(crate) message_id: ::std::option::Option<::std::string::String>,
    pub(crate) customization_arn: ::std::option::Option<::std::string::String>,
    pub(crate) user_intent: ::std::option::Option<crate::types::UserIntent>,
    pub(crate) has_code_snippet: ::std::option::Option<bool>,
    pub(crate) programming_language: ::std::option::Option<crate::types::ProgrammingLanguage>,
    pub(crate) active_editor_total_characters: ::std::option::Option<i32>,
    pub(crate) time_to_first_chunk_milliseconds: ::std::option::Option<f64>,
    pub(crate) time_between_chunks: ::std::option::Option<::std::vec::Vec<f64>>,
    pub(crate) full_responselatency: ::std::option::Option<f64>,
    pub(crate) request_length: ::std::option::Option<i32>,
    pub(crate) response_length: ::std::option::Option<i32>,
    pub(crate) number_of_code_blocks: ::std::option::Option<i32>,
    pub(crate) has_project_level_context: ::std::option::Option<bool>,
}
impl ChatAddMessageEventBuilder {
    /// ID which represents a multi-turn conversation
    /// This field is required.
    pub fn conversation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.conversation_id = ::std::option::Option::Some(input.into());
        self
    }

    /// ID which represents a multi-turn conversation
    pub fn set_conversation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.conversation_id = input;
        self
    }

    /// ID which represents a multi-turn conversation
    pub fn get_conversation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.conversation_id
    }

    /// Unique identifier for the chat message
    /// This field is required.
    pub fn message_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message_id = ::std::option::Option::Some(input.into());
        self
    }

    /// Unique identifier for the chat message
    pub fn set_message_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message_id = input;
        self
    }

    /// Unique identifier for the chat message
    pub fn get_message_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.message_id
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn customization_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.customization_arn = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_customization_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.customization_arn = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_customization_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.customization_arn
    }

    /// User Intent
    pub fn user_intent(mut self, input: crate::types::UserIntent) -> Self {
        self.user_intent = ::std::option::Option::Some(input);
        self
    }

    /// User Intent
    pub fn set_user_intent(mut self, input: ::std::option::Option<crate::types::UserIntent>) -> Self {
        self.user_intent = input;
        self
    }

    /// User Intent
    pub fn get_user_intent(&self) -> &::std::option::Option<crate::types::UserIntent> {
        &self.user_intent
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn has_code_snippet(mut self, input: bool) -> Self {
        self.has_code_snippet = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_has_code_snippet(mut self, input: ::std::option::Option<bool>) -> Self {
        self.has_code_snippet = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_has_code_snippet(&self) -> &::std::option::Option<bool> {
        &self.has_code_snippet
    }

    /// Programming Languages supported by CodeWhisperer
    pub fn programming_language(mut self, input: crate::types::ProgrammingLanguage) -> Self {
        self.programming_language = ::std::option::Option::Some(input);
        self
    }

    /// Programming Languages supported by CodeWhisperer
    pub fn set_programming_language(mut self, input: ::std::option::Option<crate::types::ProgrammingLanguage>) -> Self {
        self.programming_language = input;
        self
    }

    /// Programming Languages supported by CodeWhisperer
    pub fn get_programming_language(&self) -> &::std::option::Option<crate::types::ProgrammingLanguage> {
        &self.programming_language
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn active_editor_total_characters(mut self, input: i32) -> Self {
        self.active_editor_total_characters = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_active_editor_total_characters(mut self, input: ::std::option::Option<i32>) -> Self {
        self.active_editor_total_characters = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_active_editor_total_characters(&self) -> &::std::option::Option<i32> {
        &self.active_editor_total_characters
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn time_to_first_chunk_milliseconds(mut self, input: f64) -> Self {
        self.time_to_first_chunk_milliseconds = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_time_to_first_chunk_milliseconds(mut self, input: ::std::option::Option<f64>) -> Self {
        self.time_to_first_chunk_milliseconds = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_time_to_first_chunk_milliseconds(&self) -> &::std::option::Option<f64> {
        &self.time_to_first_chunk_milliseconds
    }

    /// Appends an item to `time_between_chunks`.
    ///
    /// To override the contents of this collection use
    /// [`set_time_between_chunks`](Self::set_time_between_chunks).
    pub fn time_between_chunks(mut self, input: f64) -> Self {
        let mut v = self.time_between_chunks.unwrap_or_default();
        v.push(input);
        self.time_between_chunks = ::std::option::Option::Some(v);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_time_between_chunks(mut self, input: ::std::option::Option<::std::vec::Vec<f64>>) -> Self {
        self.time_between_chunks = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_time_between_chunks(&self) -> &::std::option::Option<::std::vec::Vec<f64>> {
        &self.time_between_chunks
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn full_responselatency(mut self, input: f64) -> Self {
        self.full_responselatency = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_full_responselatency(mut self, input: ::std::option::Option<f64>) -> Self {
        self.full_responselatency = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_full_responselatency(&self) -> &::std::option::Option<f64> {
        &self.full_responselatency
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn request_length(mut self, input: i32) -> Self {
        self.request_length = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_request_length(mut self, input: ::std::option::Option<i32>) -> Self {
        self.request_length = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_request_length(&self) -> &::std::option::Option<i32> {
        &self.request_length
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn response_length(mut self, input: i32) -> Self {
        self.response_length = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_response_length(mut self, input: ::std::option::Option<i32>) -> Self {
        self.response_length = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_response_length(&self) -> &::std::option::Option<i32> {
        &self.response_length
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn number_of_code_blocks(mut self, input: i32) -> Self {
        self.number_of_code_blocks = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_number_of_code_blocks(mut self, input: ::std::option::Option<i32>) -> Self {
        self.number_of_code_blocks = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_number_of_code_blocks(&self) -> &::std::option::Option<i32> {
        &self.number_of_code_blocks
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn has_project_level_context(mut self, input: bool) -> Self {
        self.has_project_level_context = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_has_project_level_context(mut self, input: ::std::option::Option<bool>) -> Self {
        self.has_project_level_context = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_has_project_level_context(&self) -> &::std::option::Option<bool> {
        &self.has_project_level_context
    }

    /// Consumes the builder and constructs a
    /// [`ChatAddMessageEvent`](crate::types::ChatAddMessageEvent). This method will fail if any
    /// of the following fields are not set:
    /// - [`conversation_id`](crate::types::builders::ChatAddMessageEventBuilder::conversation_id)
    /// - [`message_id`](crate::types::builders::ChatAddMessageEventBuilder::message_id)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::ChatAddMessageEvent, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::types::ChatAddMessageEvent {
            conversation_id: self.conversation_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "conversation_id",
                    "conversation_id was not specified but it is required when building ChatAddMessageEvent",
                )
            })?,
            message_id: self.message_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "message_id",
                    "message_id was not specified but it is required when building ChatAddMessageEvent",
                )
            })?,
            customization_arn: self.customization_arn,
            user_intent: self.user_intent,
            has_code_snippet: self.has_code_snippet,
            programming_language: self.programming_language,
            active_editor_total_characters: self.active_editor_total_characters,
            time_to_first_chunk_milliseconds: self.time_to_first_chunk_milliseconds,
            time_between_chunks: self.time_between_chunks,
            full_responselatency: self.full_responselatency,
            request_length: self.request_length,
            response_length: self.response_length,
            number_of_code_blocks: self.number_of_code_blocks,
            has_project_level_context: self.has_project_level_context,
        })
    }
}
