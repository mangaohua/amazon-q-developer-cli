// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct Event {
    #[allow(missing_docs)] // documentation missing in model
    pub event_id: ::std::string::String,
    #[allow(missing_docs)] // documentation missing in model
    pub generation_id: ::std::string::String,
    #[allow(missing_docs)] // documentation missing in model
    pub event_timestamp: ::aws_smithy_types::DateTime,
    #[allow(missing_docs)] // documentation missing in model
    pub event_type: ::std::string::String,
    #[allow(missing_docs)] // documentation missing in model
    pub event_blob: ::aws_smithy_types::Blob,
}
impl Event {
    #[allow(missing_docs)] // documentation missing in model
    pub fn event_id(&self) -> &str {
        use std::ops::Deref;
        self.event_id.deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn generation_id(&self) -> &str {
        use std::ops::Deref;
        self.generation_id.deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn event_timestamp(&self) -> &::aws_smithy_types::DateTime {
        &self.event_timestamp
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn event_type(&self) -> &str {
        use std::ops::Deref;
        self.event_type.deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn event_blob(&self) -> &::aws_smithy_types::Blob {
        &self.event_blob
    }
}
impl ::std::fmt::Debug for Event {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("Event");
        formatter.field("event_id", &self.event_id);
        formatter.field("generation_id", &self.generation_id);
        formatter.field("event_timestamp", &self.event_timestamp);
        formatter.field("event_type", &self.event_type);
        formatter.field("event_blob", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl Event {
    /// Creates a new builder-style object to manufacture [`Event`](crate::types::Event).
    pub fn builder() -> crate::types::builders::EventBuilder {
        crate::types::builders::EventBuilder::default()
    }
}

/// A builder for [`Event`](crate::types::Event).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct EventBuilder {
    pub(crate) event_id: ::std::option::Option<::std::string::String>,
    pub(crate) generation_id: ::std::option::Option<::std::string::String>,
    pub(crate) event_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) event_type: ::std::option::Option<::std::string::String>,
    pub(crate) event_blob: ::std::option::Option<::aws_smithy_types::Blob>,
}
impl EventBuilder {
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn event_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_id = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_event_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_id = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_event_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_id
    }

    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn generation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.generation_id = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_generation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.generation_id = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_generation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.generation_id
    }

    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn event_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.event_timestamp = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_event_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.event_timestamp = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_event_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.event_timestamp
    }

    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn event_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_type = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_event_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_type = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_event_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_type
    }

    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn event_blob(mut self, input: ::aws_smithy_types::Blob) -> Self {
        self.event_blob = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_event_blob(mut self, input: ::std::option::Option<::aws_smithy_types::Blob>) -> Self {
        self.event_blob = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_event_blob(&self) -> &::std::option::Option<::aws_smithy_types::Blob> {
        &self.event_blob
    }

    /// Consumes the builder and constructs a [`Event`](crate::types::Event).
    /// This method will fail if any of the following fields are not set:
    /// - [`event_id`](crate::types::builders::EventBuilder::event_id)
    /// - [`generation_id`](crate::types::builders::EventBuilder::generation_id)
    /// - [`event_timestamp`](crate::types::builders::EventBuilder::event_timestamp)
    /// - [`event_type`](crate::types::builders::EventBuilder::event_type)
    /// - [`event_blob`](crate::types::builders::EventBuilder::event_blob)
    pub fn build(self) -> ::std::result::Result<crate::types::Event, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Event {
            event_id: self.event_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "event_id",
                    "event_id was not specified but it is required when building Event",
                )
            })?,
            generation_id: self.generation_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "generation_id",
                    "generation_id was not specified but it is required when building Event",
                )
            })?,
            event_timestamp: self.event_timestamp.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "event_timestamp",
                    "event_timestamp was not specified but it is required when building Event",
                )
            })?,
            event_type: self.event_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "event_type",
                    "event_type was not specified but it is required when building Event",
                )
            })?,
            event_blob: self.event_blob.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "event_blob",
                    "event_blob was not specified but it is required when building Event",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for EventBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EventBuilder");
        formatter.field("event_id", &self.event_id);
        formatter.field("generation_id", &self.generation_id);
        formatter.field("event_timestamp", &self.event_timestamp);
        formatter.field("event_type", &self.event_type);
        formatter.field("event_blob", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
