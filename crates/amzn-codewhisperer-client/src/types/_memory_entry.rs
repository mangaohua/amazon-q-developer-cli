// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// MemoryEntry corresponds to a single user memory
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct MemoryEntry {
    /// A unique identifier for a single memory entry
    pub id: ::std::string::String,
    #[allow(missing_docs)] // documentation missing in model
    pub memory_entry_string: ::std::string::String,
    /// Metadata for a single memory entry
    pub metadata: crate::types::MemoryEntryMetadata,
}
impl MemoryEntry {
    /// A unique identifier for a single memory entry
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn memory_entry_string(&self) -> &str {
        use std::ops::Deref;
        self.memory_entry_string.deref()
    }

    /// Metadata for a single memory entry
    pub fn metadata(&self) -> &crate::types::MemoryEntryMetadata {
        &self.metadata
    }
}
impl ::std::fmt::Debug for MemoryEntry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("MemoryEntry");
        formatter.field("id", &self.id);
        formatter.field("memory_entry_string", &"*** Sensitive Data Redacted ***");
        formatter.field("metadata", &self.metadata);
        formatter.finish()
    }
}
impl MemoryEntry {
    /// Creates a new builder-style object to manufacture
    /// [`MemoryEntry`](crate::types::MemoryEntry).
    pub fn builder() -> crate::types::builders::MemoryEntryBuilder {
        crate::types::builders::MemoryEntryBuilder::default()
    }
}

/// A builder for [`MemoryEntry`](crate::types::MemoryEntry).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct MemoryEntryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) memory_entry_string: ::std::option::Option<::std::string::String>,
    pub(crate) metadata: ::std::option::Option<crate::types::MemoryEntryMetadata>,
}
impl MemoryEntryBuilder {
    /// A unique identifier for a single memory entry
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }

    /// A unique identifier for a single memory entry
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }

    /// A unique identifier for a single memory entry
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }

    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn memory_entry_string(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.memory_entry_string = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_memory_entry_string(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.memory_entry_string = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_memory_entry_string(&self) -> &::std::option::Option<::std::string::String> {
        &self.memory_entry_string
    }

    /// Metadata for a single memory entry
    /// This field is required.
    pub fn metadata(mut self, input: crate::types::MemoryEntryMetadata) -> Self {
        self.metadata = ::std::option::Option::Some(input);
        self
    }

    /// Metadata for a single memory entry
    pub fn set_metadata(mut self, input: ::std::option::Option<crate::types::MemoryEntryMetadata>) -> Self {
        self.metadata = input;
        self
    }

    /// Metadata for a single memory entry
    pub fn get_metadata(&self) -> &::std::option::Option<crate::types::MemoryEntryMetadata> {
        &self.metadata
    }

    /// Consumes the builder and constructs a [`MemoryEntry`](crate::types::MemoryEntry).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::MemoryEntryBuilder::id)
    /// - [`memory_entry_string`](crate::types::builders::MemoryEntryBuilder::memory_entry_string)
    /// - [`metadata`](crate::types::builders::MemoryEntryBuilder::metadata)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::MemoryEntry, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MemoryEntry {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building MemoryEntry",
                )
            })?,
            memory_entry_string: self.memory_entry_string.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "memory_entry_string",
                    "memory_entry_string was not specified but it is required when building MemoryEntry",
                )
            })?,
            metadata: self.metadata.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "metadata",
                    "metadata was not specified but it is required when building MemoryEntry",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for MemoryEntryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("MemoryEntryBuilder");
        formatter.field("id", &self.id);
        formatter.field("memory_entry_string", &"*** Sensitive Data Redacted ***");
        formatter.field("metadata", &self.metadata);
        formatter.finish()
    }
}
