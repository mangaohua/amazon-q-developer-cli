// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_code_analysis_findings::_list_code_analysis_findings_input::ListCodeAnalysisFindingsInputBuilder;
pub use crate::operation::list_code_analysis_findings::_list_code_analysis_findings_output::ListCodeAnalysisFindingsOutputBuilder;

impl crate::operation::list_code_analysis_findings::builders::ListCodeAnalysisFindingsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::list_code_analysis_findings::ListCodeAnalysisFindingsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_code_analysis_findings::ListCodeAnalysisFindingsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.list_code_analysis_findings();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ListCodeAnalysisFindings`.
///
/// Lists the findings from a particular code analysis job.
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ListCodeAnalysisFindingsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_code_analysis_findings::builders::ListCodeAnalysisFindingsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::list_code_analysis_findings::ListCodeAnalysisFindingsOutput,
        crate::operation::list_code_analysis_findings::ListCodeAnalysisFindingsError,
    > for ListCodeAnalysisFindingsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::list_code_analysis_findings::ListCodeAnalysisFindingsOutput,
            crate::operation::list_code_analysis_findings::ListCodeAnalysisFindingsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ListCodeAnalysisFindingsFluentBuilder {
    /// Creates a new `ListCodeAnalysisFindingsFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }

    /// Access the ListCodeAnalysisFindings as a reference.
    pub fn as_input(
        &self,
    ) -> &crate::operation::list_code_analysis_findings::builders::ListCodeAnalysisFindingsInputBuilder {
        &self.inner
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_code_analysis_findings::ListCodeAnalysisFindingsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_code_analysis_findings::ListCodeAnalysisFindingsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins =
            crate::operation::list_code_analysis_findings::ListCodeAnalysisFindings::operation_runtime_plugins(
                self.handle.runtime_plugins.clone(),
                &self.handle.conf,
                self.config_override,
            );
        crate::operation::list_code_analysis_findings::ListCodeAnalysisFindings::orchestrate(&runtime_plugins, input)
            .await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being
    /// sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::list_code_analysis_findings::ListCodeAnalysisFindingsOutput,
        crate::operation::list_code_analysis_findings::ListCodeAnalysisFindingsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }

    pub(crate) fn config_override(
        mut self,
        config_override: impl ::std::convert::Into<crate::config::Builder>,
    ) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(
        &mut self,
        config_override: ::std::option::Option<crate::config::Builder>,
    ) -> &mut Self {
        self.config_override = config_override;
        self
    }

    /// Create a paginator for this request
    ///
    /// Paginators are used by calling
    /// [`send().await`](crate::operation::list_code_analysis_findings::paginator::ListCodeAnalysisFindingsPaginator::send)
    /// which returns a
    /// [`PaginationStream`](aws_smithy_async::future::pagination_stream::PaginationStream).
    pub fn into_paginator(
        self,
    ) -> crate::operation::list_code_analysis_findings::paginator::ListCodeAnalysisFindingsPaginator {
        crate::operation::list_code_analysis_findings::paginator::ListCodeAnalysisFindingsPaginator::new(
            self.handle,
            self.inner,
        )
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.job_id(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_job_id(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_job_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_job_id()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn code_analysis_findings_schema(mut self, input: crate::types::CodeAnalysisFindingsSchema) -> Self {
        self.inner = self.inner.code_analysis_findings_schema(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_code_analysis_findings_schema(
        mut self,
        input: ::std::option::Option<crate::types::CodeAnalysisFindingsSchema>,
    ) -> Self {
        self.inner = self.inner.set_code_analysis_findings_schema(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_code_analysis_findings_schema(
        &self,
    ) -> &::std::option::Option<crate::types::CodeAnalysisFindingsSchema> {
        self.inner.get_code_analysis_findings_schema()
    }
}
